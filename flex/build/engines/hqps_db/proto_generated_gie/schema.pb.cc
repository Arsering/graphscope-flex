// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_schema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LabelMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ColumnMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RelationMeta_LabelPair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EntityMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RelationMeta;
}  // namespace protobuf_schema_2eproto
namespace schema {
class LabelMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelMeta>
      _instance;
} _LabelMeta_default_instance_;
class ColumnMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnMeta>
      _instance;
} _ColumnMeta_default_instance_;
class EntityMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityMeta>
      _instance;
} _EntityMeta_default_instance_;
class RelationMeta_LabelPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelationMeta_LabelPair>
      _instance;
} _RelationMeta_LabelPair_default_instance_;
class RelationMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelationMeta>
      _instance;
} _RelationMeta_default_instance_;
class SchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schema>
      _instance;
} _Schema_default_instance_;
}  // namespace schema
namespace protobuf_schema_2eproto {
static void InitDefaultsLabelMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_LabelMeta_default_instance_;
    new (ptr) ::schema::LabelMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::LabelMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LabelMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLabelMeta}, {}};

static void InitDefaultsColumnMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_ColumnMeta_default_instance_;
    new (ptr) ::schema::ColumnMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::ColumnMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ColumnMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsColumnMeta}, {
      &protobuf_schema_2eproto::scc_info_LabelMeta.base,}};

static void InitDefaultsEntityMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_EntityMeta_default_instance_;
    new (ptr) ::schema::EntityMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::EntityMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EntityMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEntityMeta}, {
      &protobuf_schema_2eproto::scc_info_LabelMeta.base,
      &protobuf_schema_2eproto::scc_info_ColumnMeta.base,}};

static void InitDefaultsRelationMeta_LabelPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_RelationMeta_LabelPair_default_instance_;
    new (ptr) ::schema::RelationMeta_LabelPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::RelationMeta_LabelPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RelationMeta_LabelPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRelationMeta_LabelPair}, {
      &protobuf_schema_2eproto::scc_info_LabelMeta.base,}};

static void InitDefaultsRelationMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_RelationMeta_default_instance_;
    new (ptr) ::schema::RelationMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::RelationMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RelationMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRelationMeta}, {
      &protobuf_schema_2eproto::scc_info_LabelMeta.base,
      &protobuf_schema_2eproto::scc_info_RelationMeta_LabelPair.base,
      &protobuf_schema_2eproto::scc_info_ColumnMeta.base,}};

static void InitDefaultsSchema() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_Schema_default_instance_;
    new (ptr) ::schema::Schema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::Schema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Schema =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSchema}, {
      &protobuf_schema_2eproto::scc_info_EntityMeta.base,
      &protobuf_schema_2eproto::scc_info_RelationMeta.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LabelMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EntityMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelationMeta_LabelPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelationMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schema.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::LabelMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::LabelMeta, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::LabelMeta, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::ColumnMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::ColumnMeta, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::ColumnMeta, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::ColumnMeta, is_primary_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::EntityMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::EntityMeta, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::EntityMeta, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta_LabelPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta_LabelPair, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta_LabelPair, dst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta, entity_pairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::RelationMeta, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, relations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, is_table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, is_column_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::schema::LabelMeta)},
  { 7, -1, sizeof(::schema::ColumnMeta)},
  { 15, -1, sizeof(::schema::EntityMeta)},
  { 22, -1, sizeof(::schema::RelationMeta_LabelPair)},
  { 29, -1, sizeof(::schema::RelationMeta)},
  { 37, -1, sizeof(::schema::Schema)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_LabelMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_ColumnMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_EntityMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_RelationMeta_LabelPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_RelationMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_Schema_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "schema.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014schema.proto\022\006schema\032\014common.proto\"%\n\t"
      "LabelMeta\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\"i\n\nC"
      "olumnMeta\022\036\n\003key\030\001 \001(\0132\021.schema.LabelMet"
      "a\022#\n\tdata_type\030\002 \001(\0162\020.common.DataType\022\026"
      "\n\016is_primary_key\030\003 \001(\010\"S\n\nEntityMeta\022 \n\005"
      "label\030\001 \001(\0132\021.schema.LabelMeta\022#\n\007column"
      "s\030\002 \003(\0132\022.schema.ColumnMeta\"\330\001\n\014Relation"
      "Meta\022 \n\005label\030\001 \001(\0132\021.schema.LabelMeta\0224"
      "\n\014entity_pairs\030\002 \003(\0132\036.schema.RelationMe"
      "ta.LabelPair\022#\n\007columns\030\003 \003(\0132\022.schema.C"
      "olumnMeta\032K\n\tLabelPair\022\036\n\003src\030\001 \001(\0132\021.sc"
      "hema.LabelMeta\022\036\n\003dst\030\002 \001(\0132\021.schema.Lab"
      "elMeta\"\202\001\n\006Schema\022$\n\010entities\030\001 \003(\0132\022.sc"
      "hema.EntityMeta\022\'\n\trelations\030\002 \003(\0132\024.sch"
      "ema.RelationMeta\022\023\n\013is_table_id\030\003 \001(\010\022\024\n"
      "\014is_column_id\030\004 \001(\010B0\n!com.alibaba.graph"
      "scope.gaia.protoB\013OuterSchemab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schema_2eproto
namespace schema {

// ===================================================================

void LabelMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelMeta::kIdFieldNumber;
const int LabelMeta::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelMeta::LabelMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_LabelMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.LabelMeta)
}
LabelMeta::LabelMeta(const LabelMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:schema.LabelMeta)
}

void LabelMeta::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

LabelMeta::~LabelMeta() {
  // @@protoc_insertion_point(destructor:schema.LabelMeta)
  SharedDtor();
}

void LabelMeta::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LabelMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LabelMeta::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelMeta& LabelMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_LabelMeta.base);
  return *internal_default_instance();
}


void LabelMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.LabelMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool LabelMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.LabelMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schema.LabelMeta.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.LabelMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.LabelMeta)
  return false;
#undef DO_
}

void LabelMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.LabelMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.LabelMeta.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.LabelMeta)
}

::google::protobuf::uint8* LabelMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.LabelMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.LabelMeta.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.LabelMeta)
  return target;
}

size_t LabelMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.LabelMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.LabelMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.LabelMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.LabelMeta)
    MergeFrom(*source);
  }
}

void LabelMeta::MergeFrom(const LabelMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.LabelMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void LabelMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.LabelMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMeta::CopyFrom(const LabelMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.LabelMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMeta::IsInitialized() const {
  return true;
}

void LabelMeta::Swap(LabelMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelMeta::InternalSwap(LabelMeta* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LabelMeta::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnMeta::InitAsDefaultInstance() {
  ::schema::_ColumnMeta_default_instance_._instance.get_mutable()->key_ = const_cast< ::schema::LabelMeta*>(
      ::schema::LabelMeta::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnMeta::kKeyFieldNumber;
const int ColumnMeta::kDataTypeFieldNumber;
const int ColumnMeta::kIsPrimaryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnMeta::ColumnMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_ColumnMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.ColumnMeta)
}
ColumnMeta::ColumnMeta(const ColumnMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::schema::LabelMeta(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_primary_key_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(is_primary_key_));
  // @@protoc_insertion_point(copy_constructor:schema.ColumnMeta)
}

void ColumnMeta::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_primary_key_) -
      reinterpret_cast<char*>(&key_)) + sizeof(is_primary_key_));
}

ColumnMeta::~ColumnMeta() {
  // @@protoc_insertion_point(destructor:schema.ColumnMeta)
  SharedDtor();
}

void ColumnMeta::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void ColumnMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnMeta::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnMeta& ColumnMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_ColumnMeta.base);
  return *internal_default_instance();
}


void ColumnMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.ColumnMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_primary_key_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(is_primary_key_));
  _internal_metadata_.Clear();
}

bool ColumnMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.ColumnMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schema.LabelMeta key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.DataType data_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::common::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_primary_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.ColumnMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.ColumnMeta)
  return false;
#undef DO_
}

void ColumnMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.ColumnMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_key(), output);
  }

  // .common.DataType data_type = 2;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // bool is_primary_key = 3;
  if (this->is_primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_primary_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.ColumnMeta)
}

::google::protobuf::uint8* ColumnMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.ColumnMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_key(), deterministic, target);
  }

  // .common.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // bool is_primary_key = 3;
  if (this->is_primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_primary_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.ColumnMeta)
  return target;
}

size_t ColumnMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.ColumnMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schema.LabelMeta key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .common.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // bool is_primary_key = 3;
  if (this->is_primary_key() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.ColumnMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.ColumnMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.ColumnMeta)
    MergeFrom(*source);
  }
}

void ColumnMeta::MergeFrom(const ColumnMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.ColumnMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::schema::LabelMeta::MergeFrom(from.key());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.is_primary_key() != 0) {
    set_is_primary_key(from.is_primary_key());
  }
}

void ColumnMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.ColumnMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMeta::CopyFrom(const ColumnMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.ColumnMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMeta::IsInitialized() const {
  return true;
}

void ColumnMeta::Swap(ColumnMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnMeta::InternalSwap(ColumnMeta* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(data_type_, other->data_type_);
  swap(is_primary_key_, other->is_primary_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnMeta::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityMeta::InitAsDefaultInstance() {
  ::schema::_EntityMeta_default_instance_._instance.get_mutable()->label_ = const_cast< ::schema::LabelMeta*>(
      ::schema::LabelMeta::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMeta::kLabelFieldNumber;
const int EntityMeta::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMeta::EntityMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_EntityMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.EntityMeta)
}
EntityMeta::EntityMeta(const EntityMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_label()) {
    label_ = new ::schema::LabelMeta(*from.label_);
  } else {
    label_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schema.EntityMeta)
}

void EntityMeta::SharedCtor() {
  label_ = NULL;
}

EntityMeta::~EntityMeta() {
  // @@protoc_insertion_point(destructor:schema.EntityMeta)
  SharedDtor();
}

void EntityMeta::SharedDtor() {
  if (this != internal_default_instance()) delete label_;
}

void EntityMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EntityMeta::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMeta& EntityMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_EntityMeta.base);
  return *internal_default_instance();
}


void EntityMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.EntityMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
  _internal_metadata_.Clear();
}

bool EntityMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.EntityMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schema.LabelMeta label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schema.ColumnMeta columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.EntityMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.EntityMeta)
  return false;
#undef DO_
}

void EntityMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.EntityMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta label = 1;
  if (this->has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_label(), output);
  }

  // repeated .schema.ColumnMeta columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->columns(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.EntityMeta)
}

::google::protobuf::uint8* EntityMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.EntityMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta label = 1;
  if (this->has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_label(), deterministic, target);
  }

  // repeated .schema.ColumnMeta columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.EntityMeta)
  return target;
}

size_t EntityMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.EntityMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .schema.ColumnMeta columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // .schema.LabelMeta label = 1;
  if (this->has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *label_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.EntityMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.EntityMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.EntityMeta)
    MergeFrom(*source);
  }
}

void EntityMeta::MergeFrom(const EntityMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.EntityMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_label()) {
    mutable_label()->::schema::LabelMeta::MergeFrom(from.label());
  }
}

void EntityMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.EntityMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMeta::CopyFrom(const EntityMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.EntityMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMeta::IsInitialized() const {
  return true;
}

void EntityMeta::Swap(EntityMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMeta::InternalSwap(EntityMeta* other) {
  using std::swap;
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  swap(label_, other->label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EntityMeta::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelationMeta_LabelPair::InitAsDefaultInstance() {
  ::schema::_RelationMeta_LabelPair_default_instance_._instance.get_mutable()->src_ = const_cast< ::schema::LabelMeta*>(
      ::schema::LabelMeta::internal_default_instance());
  ::schema::_RelationMeta_LabelPair_default_instance_._instance.get_mutable()->dst_ = const_cast< ::schema::LabelMeta*>(
      ::schema::LabelMeta::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationMeta_LabelPair::kSrcFieldNumber;
const int RelationMeta_LabelPair::kDstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationMeta_LabelPair::RelationMeta_LabelPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_RelationMeta_LabelPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.RelationMeta.LabelPair)
}
RelationMeta_LabelPair::RelationMeta_LabelPair(const RelationMeta_LabelPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::schema::LabelMeta(*from.src_);
  } else {
    src_ = NULL;
  }
  if (from.has_dst()) {
    dst_ = new ::schema::LabelMeta(*from.dst_);
  } else {
    dst_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schema.RelationMeta.LabelPair)
}

void RelationMeta_LabelPair::SharedCtor() {
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_) -
      reinterpret_cast<char*>(&src_)) + sizeof(dst_));
}

RelationMeta_LabelPair::~RelationMeta_LabelPair() {
  // @@protoc_insertion_point(destructor:schema.RelationMeta.LabelPair)
  SharedDtor();
}

void RelationMeta_LabelPair::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void RelationMeta_LabelPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelationMeta_LabelPair::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelationMeta_LabelPair& RelationMeta_LabelPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_RelationMeta_LabelPair.base);
  return *internal_default_instance();
}


void RelationMeta_LabelPair::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.RelationMeta.LabelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && src_ != NULL) {
    delete src_;
  }
  src_ = NULL;
  if (GetArenaNoVirtual() == NULL && dst_ != NULL) {
    delete dst_;
  }
  dst_ = NULL;
  _internal_metadata_.Clear();
}

bool RelationMeta_LabelPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.RelationMeta.LabelPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schema.LabelMeta src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.LabelMeta dst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.RelationMeta.LabelPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.RelationMeta.LabelPair)
  return false;
#undef DO_
}

void RelationMeta_LabelPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.RelationMeta.LabelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta src = 1;
  if (this->has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_src(), output);
  }

  // .schema.LabelMeta dst = 2;
  if (this->has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dst(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.RelationMeta.LabelPair)
}

::google::protobuf::uint8* RelationMeta_LabelPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.RelationMeta.LabelPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta src = 1;
  if (this->has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_src(), deterministic, target);
  }

  // .schema.LabelMeta dst = 2;
  if (this->has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dst(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.RelationMeta.LabelPair)
  return target;
}

size_t RelationMeta_LabelPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.RelationMeta.LabelPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schema.LabelMeta src = 1;
  if (this->has_src()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .schema.LabelMeta dst = 2;
  if (this->has_dst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationMeta_LabelPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.RelationMeta.LabelPair)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationMeta_LabelPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelationMeta_LabelPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.RelationMeta.LabelPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.RelationMeta.LabelPair)
    MergeFrom(*source);
  }
}

void RelationMeta_LabelPair::MergeFrom(const RelationMeta_LabelPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.RelationMeta.LabelPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_src()) {
    mutable_src()->::schema::LabelMeta::MergeFrom(from.src());
  }
  if (from.has_dst()) {
    mutable_dst()->::schema::LabelMeta::MergeFrom(from.dst());
  }
}

void RelationMeta_LabelPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.RelationMeta.LabelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationMeta_LabelPair::CopyFrom(const RelationMeta_LabelPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.RelationMeta.LabelPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationMeta_LabelPair::IsInitialized() const {
  return true;
}

void RelationMeta_LabelPair::Swap(RelationMeta_LabelPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelationMeta_LabelPair::InternalSwap(RelationMeta_LabelPair* other) {
  using std::swap;
  swap(src_, other->src_);
  swap(dst_, other->dst_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelationMeta_LabelPair::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelationMeta::InitAsDefaultInstance() {
  ::schema::_RelationMeta_default_instance_._instance.get_mutable()->label_ = const_cast< ::schema::LabelMeta*>(
      ::schema::LabelMeta::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationMeta::kLabelFieldNumber;
const int RelationMeta::kEntityPairsFieldNumber;
const int RelationMeta::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationMeta::RelationMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_RelationMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.RelationMeta)
}
RelationMeta::RelationMeta(const RelationMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entity_pairs_(from.entity_pairs_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_label()) {
    label_ = new ::schema::LabelMeta(*from.label_);
  } else {
    label_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schema.RelationMeta)
}

void RelationMeta::SharedCtor() {
  label_ = NULL;
}

RelationMeta::~RelationMeta() {
  // @@protoc_insertion_point(destructor:schema.RelationMeta)
  SharedDtor();
}

void RelationMeta::SharedDtor() {
  if (this != internal_default_instance()) delete label_;
}

void RelationMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelationMeta::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelationMeta& RelationMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_RelationMeta.base);
  return *internal_default_instance();
}


void RelationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.RelationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_pairs_.Clear();
  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
  _internal_metadata_.Clear();
}

bool RelationMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.RelationMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schema.LabelMeta label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schema.RelationMeta.LabelPair entity_pairs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entity_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schema.ColumnMeta columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.RelationMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.RelationMeta)
  return false;
#undef DO_
}

void RelationMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.RelationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta label = 1;
  if (this->has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_label(), output);
  }

  // repeated .schema.RelationMeta.LabelPair entity_pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entity_pairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entity_pairs(static_cast<int>(i)),
      output);
  }

  // repeated .schema.ColumnMeta columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->columns(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.RelationMeta)
}

::google::protobuf::uint8* RelationMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.RelationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.LabelMeta label = 1;
  if (this->has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_label(), deterministic, target);
  }

  // repeated .schema.RelationMeta.LabelPair entity_pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entity_pairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entity_pairs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .schema.ColumnMeta columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.RelationMeta)
  return target;
}

size_t RelationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.RelationMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .schema.RelationMeta.LabelPair entity_pairs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entity_pairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entity_pairs(static_cast<int>(i)));
    }
  }

  // repeated .schema.ColumnMeta columns = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // .schema.LabelMeta label = 1;
  if (this->has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *label_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.RelationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelationMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.RelationMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.RelationMeta)
    MergeFrom(*source);
  }
}

void RelationMeta::MergeFrom(const RelationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.RelationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_pairs_.MergeFrom(from.entity_pairs_);
  columns_.MergeFrom(from.columns_);
  if (from.has_label()) {
    mutable_label()->::schema::LabelMeta::MergeFrom(from.label());
  }
}

void RelationMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.RelationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationMeta::CopyFrom(const RelationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.RelationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationMeta::IsInitialized() const {
  return true;
}

void RelationMeta::Swap(RelationMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelationMeta::InternalSwap(RelationMeta* other) {
  using std::swap;
  CastToBase(&entity_pairs_)->InternalSwap(CastToBase(&other->entity_pairs_));
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  swap(label_, other->label_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelationMeta::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Schema::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schema::kEntitiesFieldNumber;
const int Schema::kRelationsFieldNumber;
const int Schema::kIsTableIdFieldNumber;
const int Schema::kIsColumnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schema::Schema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_Schema.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.Schema)
}
Schema::Schema(const Schema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entities_(from.entities_),
      relations_(from.relations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_table_id_, &from.is_table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_column_id_) -
    reinterpret_cast<char*>(&is_table_id_)) + sizeof(is_column_id_));
  // @@protoc_insertion_point(copy_constructor:schema.Schema)
}

void Schema::SharedCtor() {
  ::memset(&is_table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_column_id_) -
      reinterpret_cast<char*>(&is_table_id_)) + sizeof(is_column_id_));
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:schema.Schema)
  SharedDtor();
}

void Schema::SharedDtor() {
}

void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Schema::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schema& Schema::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_Schema.base);
  return *internal_default_instance();
}


void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  relations_.Clear();
  ::memset(&is_table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_column_id_) -
      reinterpret_cast<char*>(&is_table_id_)) + sizeof(is_column_id_));
  _internal_metadata_.Clear();
}

bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.Schema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.EntityMeta entities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schema.RelationMeta relations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_column_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_column_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.Schema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.Schema)
  return false;
#undef DO_
}

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .schema.EntityMeta entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entities(static_cast<int>(i)),
      output);
  }

  // repeated .schema.RelationMeta relations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->relations(static_cast<int>(i)),
      output);
  }

  // bool is_table_id = 3;
  if (this->is_table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_table_id(), output);
  }

  // bool is_column_id = 4;
  if (this->is_column_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_column_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.Schema)
}

::google::protobuf::uint8* Schema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .schema.EntityMeta entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .schema.RelationMeta relations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->relations(static_cast<int>(i)), deterministic, target);
  }

  // bool is_table_id = 3;
  if (this->is_table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_table_id(), target);
  }

  // bool is_column_id = 4;
  if (this->is_column_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_column_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.Schema)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .schema.EntityMeta entities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entities(static_cast<int>(i)));
    }
  }

  // repeated .schema.RelationMeta relations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->relations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relations(static_cast<int>(i)));
    }
  }

  // bool is_table_id = 3;
  if (this->is_table_id() != 0) {
    total_size += 1 + 1;
  }

  // bool is_column_id = 4;
  if (this->is_column_id() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  const Schema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.Schema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.Schema)
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  relations_.MergeFrom(from.relations_);
  if (from.is_table_id() != 0) {
    set_is_table_id(from.is_table_id());
  }
  if (from.is_column_id() != 0) {
    set_is_column_id(from.is_column_id());
  }
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::Swap(Schema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schema::InternalSwap(Schema* other) {
  using std::swap;
  CastToBase(&entities_)->InternalSwap(CastToBase(&other->entities_));
  CastToBase(&relations_)->InternalSwap(CastToBase(&other->relations_));
  swap(is_table_id_, other->is_table_id_);
  swap(is_column_id_, other->is_column_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace schema
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::LabelMeta* Arena::CreateMaybeMessage< ::schema::LabelMeta >(Arena* arena) {
  return Arena::CreateInternal< ::schema::LabelMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::ColumnMeta* Arena::CreateMaybeMessage< ::schema::ColumnMeta >(Arena* arena) {
  return Arena::CreateInternal< ::schema::ColumnMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::EntityMeta* Arena::CreateMaybeMessage< ::schema::EntityMeta >(Arena* arena) {
  return Arena::CreateInternal< ::schema::EntityMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::RelationMeta_LabelPair* Arena::CreateMaybeMessage< ::schema::RelationMeta_LabelPair >(Arena* arena) {
  return Arena::CreateInternal< ::schema::RelationMeta_LabelPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::RelationMeta* Arena::CreateMaybeMessage< ::schema::RelationMeta >(Arena* arena) {
  return Arena::CreateInternal< ::schema::RelationMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::Schema* Arena::CreateMaybeMessage< ::schema::Schema >(Arena* arena) {
  return Arena::CreateInternal< ::schema::Schema >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
