// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: algebra.proto

#include "algebra.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_algebra_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Branch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QueryParams_ExtraEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Range;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Root;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sample_SampleByNum;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sample_SampleByRatio;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SinkDefault_IdNameMapping;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Union;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Apply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_As;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Dedup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IndexPredicate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IndexPredicate_AndPredicate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Intersect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Join;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Limit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LogicalPlan_Node;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MetaData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OrderBy_OrderingPair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Select;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SinkDefault;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SinkVineyard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<22> scc_info_LogicalPlan_Operator;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_AggFunc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_KeyAlias;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_OrderBy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PathExpand_ExpandBase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pattern;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pattern_Sentence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Project;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Project_ExprAlias;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sample_SampleType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SegmentApply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sink_SinkTarget;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Unfold;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EdgeExpand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GetV;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GroupBy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_IndexPredicate_Triplet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Sample;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_PathExpand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Pattern_Binder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_QueryParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Scan;
}  // namespace protobuf_algebra_2eproto
namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NameOrId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_None;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Pair;
}  // namespace protobuf_common_2eproto
namespace protobuf_expr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_expr_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NameOrIdKey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_expr_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Variable;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_expr_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Case;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_expr_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Property;
}  // namespace protobuf_expr_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_schema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Schema;
}  // namespace protobuf_schema_2eproto
namespace protobuf_type_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_type_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IrDataType;
}  // namespace protobuf_type_2eproto
namespace algebra {
class MetaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetaData>
      _instance;
} _MetaData_default_instance_;
class Project_ExprAliasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Project_ExprAlias>
      _instance;
} _Project_ExprAlias_default_instance_;
class ProjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Project>
      _instance;
} _Project_default_instance_;
class SelectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Select>
      _instance;
} _Select_default_instance_;
class JoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Join>
      _instance;
} _Join_default_instance_;
class UnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Union>
      _instance;
} _Union_default_instance_;
class IntersectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intersect>
      _instance;
} _Intersect_default_instance_;
class GroupBy_AggFuncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBy_AggFunc>
      _instance;
} _GroupBy_AggFunc_default_instance_;
class GroupBy_KeyAliasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBy_KeyAlias>
      _instance;
} _GroupBy_KeyAlias_default_instance_;
class GroupByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBy>
      _instance;
} _GroupBy_default_instance_;
class OrderBy_OrderingPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy_OrderingPair>
      _instance;
} _OrderBy_OrderingPair_default_instance_;
class OrderByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy>
      _instance;
} _OrderBy_default_instance_;
class DedupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dedup>
      _instance;
} _Dedup_default_instance_;
class UnfoldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unfold>
      _instance;
} _Unfold_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Range>
      _instance;
} _Range_default_instance_;
class LimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Limit>
      _instance;
} _Limit_default_instance_;
class IndexPredicate_TripletDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexPredicate_Triplet>
      _instance;
} _IndexPredicate_Triplet_default_instance_;
class IndexPredicate_AndPredicateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexPredicate_AndPredicate>
      _instance;
} _IndexPredicate_AndPredicate_default_instance_;
class IndexPredicateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexPredicate>
      _instance;
} _IndexPredicate_default_instance_;
class QueryParams_ExtraEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryParams_ExtraEntry_DoNotUse>
      _instance;
} _QueryParams_ExtraEntry_DoNotUse_default_instance_;
class QueryParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryParams>
      _instance;
} _QueryParams_default_instance_;
class ScanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scan>
      _instance;
} _Scan_default_instance_;
class GetVDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetV>
      _instance;
} _GetV_default_instance_;
class AsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<As>
      _instance;
} _As_default_instance_;
class EdgeExpandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EdgeExpand>
      _instance;
} _EdgeExpand_default_instance_;
class PathExpand_ExpandBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathExpand_ExpandBase>
      _instance;
} _PathExpand_ExpandBase_default_instance_;
class PathExpandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathExpand>
      _instance;
} _PathExpand_default_instance_;
class ApplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Apply>
      _instance;
} _Apply_default_instance_;
class SegmentApplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SegmentApply>
      _instance;
} _SegmentApply_default_instance_;
class Pattern_BinderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pattern_Binder>
      _instance;
  const ::algebra::EdgeExpand* edge_;
  const ::algebra::PathExpand* path_;
  const ::algebra::GetV* vertex_;
  const ::algebra::Select* select_;
} _Pattern_Binder_default_instance_;
class Pattern_SentenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pattern_Sentence>
      _instance;
} _Pattern_Sentence_default_instance_;
class PatternDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pattern>
      _instance;
} _Pattern_default_instance_;
class Sample_SampleByRatioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sample_SampleByRatio>
      _instance;
} _Sample_SampleByRatio_default_instance_;
class Sample_SampleByNumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sample_SampleByNum>
      _instance;
} _Sample_SampleByNum_default_instance_;
class Sample_SampleTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sample_SampleType>
      _instance;
  const ::algebra::Sample_SampleByRatio* sample_by_ratio_;
  const ::algebra::Sample_SampleByNum* sample_by_num_;
} _Sample_SampleType_default_instance_;
class SampleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sample>
      _instance;
} _Sample_default_instance_;
class Sink_SinkTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sink_SinkTarget>
      _instance;
  const ::algebra::SinkDefault* sink_default_;
  const ::algebra::SinkVineyard* sink_vineyard_;
} _Sink_SinkTarget_default_instance_;
class SinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sink>
      _instance;
} _Sink_default_instance_;
class SinkDefault_IdNameMappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SinkDefault_IdNameMapping>
      _instance;
} _SinkDefault_IdNameMapping_default_instance_;
class SinkDefaultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SinkDefault>
      _instance;
} _SinkDefault_default_instance_;
class SinkVineyardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SinkVineyard>
      _instance;
} _SinkVineyard_default_instance_;
class RootDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Root>
      _instance;
} _Root_default_instance_;
class BranchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Branch>
      _instance;
} _Branch_default_instance_;
class LogicalPlan_OperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicalPlan_Operator>
      _instance;
  const ::algebra::Project* project_;
  const ::algebra::Select* select_;
  const ::algebra::Join* join_;
  const ::algebra::Union* union__;
  const ::algebra::GroupBy* group_by_;
  const ::algebra::OrderBy* order_by_;
  const ::algebra::Dedup* dedup_;
  const ::algebra::Unfold* unfold_;
  const ::algebra::Apply* apply_;
  const ::algebra::SegmentApply* seg_apply_;
  const ::algebra::Scan* scan_;
  const ::algebra::Limit* limit_;
  const ::algebra::As* as_;
  const ::algebra::Intersect* intersect_;
  const ::algebra::Sink* sink_;
  const ::algebra::Root* root_;
  const ::algebra::Sample* sample_;
  const ::algebra::Branch* branch_;
  const ::algebra::GetV* vertex_;
  const ::algebra::EdgeExpand* edge_;
  const ::algebra::PathExpand* path_;
  const ::algebra::Pattern* pattern_;
} _LogicalPlan_Operator_default_instance_;
class LogicalPlan_NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicalPlan_Node>
      _instance;
} _LogicalPlan_Node_default_instance_;
class LogicalPlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogicalPlan>
      _instance;
} _LogicalPlan_default_instance_;
}  // namespace algebra
namespace protobuf_algebra_2eproto {
static void InitDefaultsMetaData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_MetaData_default_instance_;
    new (ptr) ::algebra::MetaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::MetaData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MetaData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetaData}, {
      &protobuf_type_2eproto::scc_info_IrDataType.base,}};

static void InitDefaultsProject_ExprAlias() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Project_ExprAlias_default_instance_;
    new (ptr) ::algebra::Project_ExprAlias();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Project_ExprAlias::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Project_ExprAlias =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProject_ExprAlias}, {
      &protobuf_expr_2eproto::scc_info_Case.base,
      &protobuf_common_2eproto::scc_info_NameOrId.base,}};

static void InitDefaultsProject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Project_default_instance_;
    new (ptr) ::algebra::Project();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Project::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Project =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProject}, {
      &protobuf_algebra_2eproto::scc_info_Project_ExprAlias.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsSelect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Select_default_instance_;
    new (ptr) ::algebra::Select();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Select::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Select =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSelect}, {
      &protobuf_expr_2eproto::scc_info_Case.base,}};

static void InitDefaultsJoin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Join_default_instance_;
    new (ptr) ::algebra::Join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJoin}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,}};

static void InitDefaultsUnion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Union_default_instance_;
    new (ptr) ::algebra::Union();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Union::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Union =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnion}, {}};

static void InitDefaultsIntersect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Intersect_default_instance_;
    new (ptr) ::algebra::Intersect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Intersect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Intersect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntersect}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,}};

static void InitDefaultsGroupBy_AggFunc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_GroupBy_AggFunc_default_instance_;
    new (ptr) ::algebra::GroupBy_AggFunc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::GroupBy_AggFunc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_AggFunc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroupBy_AggFunc}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,
      &protobuf_common_2eproto::scc_info_NameOrId.base,}};

static void InitDefaultsGroupBy_KeyAlias() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_GroupBy_KeyAlias_default_instance_;
    new (ptr) ::algebra::GroupBy_KeyAlias();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::GroupBy_KeyAlias::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_KeyAlias =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroupBy_KeyAlias}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,
      &protobuf_common_2eproto::scc_info_NameOrId.base,}};

static void InitDefaultsGroupBy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_GroupBy_default_instance_;
    new (ptr) ::algebra::GroupBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::GroupBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GroupBy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGroupBy}, {
      &protobuf_algebra_2eproto::scc_info_GroupBy_KeyAlias.base,
      &protobuf_algebra_2eproto::scc_info_GroupBy_AggFunc.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsOrderBy_OrderingPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_OrderBy_OrderingPair_default_instance_;
    new (ptr) ::algebra::OrderBy_OrderingPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::OrderBy_OrderingPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderBy_OrderingPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderBy_OrderingPair}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,}};

static void InitDefaultsOrderBy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_OrderBy_default_instance_;
    new (ptr) ::algebra::OrderBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::OrderBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OrderBy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOrderBy}, {
      &protobuf_algebra_2eproto::scc_info_OrderBy_OrderingPair.base,
      &protobuf_algebra_2eproto::scc_info_Range.base,}};

static void InitDefaultsDedup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Dedup_default_instance_;
    new (ptr) ::algebra::Dedup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Dedup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Dedup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDedup}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,}};

static void InitDefaultsUnfold() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Unfold_default_instance_;
    new (ptr) ::algebra::Unfold();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Unfold::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Unfold =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUnfold}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Range_default_instance_;
    new (ptr) ::algebra::Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Range =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRange}, {}};

static void InitDefaultsLimit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Limit_default_instance_;
    new (ptr) ::algebra::Limit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Limit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Limit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLimit}, {
      &protobuf_algebra_2eproto::scc_info_Range.base,}};

static void InitDefaultsIndexPredicate_Triplet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_IndexPredicate_Triplet_default_instance_;
    new (ptr) ::algebra::IndexPredicate_Triplet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::IndexPredicate_Triplet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_IndexPredicate_Triplet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsIndexPredicate_Triplet}, {
      &protobuf_expr_2eproto::scc_info_Property.base,
      &protobuf_common_2eproto::scc_info_Pair.base,
      &protobuf_common_2eproto::scc_info_None.base,}};

static void InitDefaultsIndexPredicate_AndPredicate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_IndexPredicate_AndPredicate_default_instance_;
    new (ptr) ::algebra::IndexPredicate_AndPredicate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::IndexPredicate_AndPredicate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IndexPredicate_AndPredicate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIndexPredicate_AndPredicate}, {
      &protobuf_algebra_2eproto::scc_info_IndexPredicate_Triplet.base,}};

static void InitDefaultsIndexPredicate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_IndexPredicate_default_instance_;
    new (ptr) ::algebra::IndexPredicate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::IndexPredicate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IndexPredicate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIndexPredicate}, {
      &protobuf_algebra_2eproto::scc_info_IndexPredicate_AndPredicate.base,}};

static void InitDefaultsQueryParams_ExtraEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_QueryParams_ExtraEntry_DoNotUse_default_instance_;
    new (ptr) ::algebra::QueryParams_ExtraEntry_DoNotUse();
  }
  ::algebra::QueryParams_ExtraEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueryParams_ExtraEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueryParams_ExtraEntry_DoNotUse}, {}};

static void InitDefaultsQueryParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_QueryParams_default_instance_;
    new (ptr) ::algebra::QueryParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::QueryParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_QueryParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsQueryParams}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_Range.base,
      &protobuf_expr_2eproto::scc_info_Case.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams_ExtraEntry_DoNotUse.base,}};

static void InitDefaultsScan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Scan_default_instance_;
    new (ptr) ::algebra::Scan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Scan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Scan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsScan}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams.base,
      &protobuf_algebra_2eproto::scc_info_IndexPredicate.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsGetV() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_GetV_default_instance_;
    new (ptr) ::algebra::GetV();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::GetV::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GetV =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGetV}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsAs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_As_default_instance_;
    new (ptr) ::algebra::As();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::As::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_As =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAs}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,}};

static void InitDefaultsEdgeExpand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_EdgeExpand_default_instance_;
    new (ptr) ::algebra::EdgeExpand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::EdgeExpand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_EdgeExpand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEdgeExpand}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsPathExpand_ExpandBase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_PathExpand_ExpandBase_default_instance_;
    new (ptr) ::algebra::PathExpand_ExpandBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::PathExpand_ExpandBase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PathExpand_ExpandBase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPathExpand_ExpandBase}, {
      &protobuf_algebra_2eproto::scc_info_EdgeExpand.base,
      &protobuf_algebra_2eproto::scc_info_GetV.base,}};

static void InitDefaultsPathExpand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_PathExpand_default_instance_;
    new (ptr) ::algebra::PathExpand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::PathExpand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PathExpand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPathExpand}, {
      &protobuf_algebra_2eproto::scc_info_PathExpand_ExpandBase.base,
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_Range.base,
      &protobuf_expr_2eproto::scc_info_Case.base,}};

static void InitDefaultsApply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Apply_default_instance_;
    new (ptr) ::algebra::Apply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Apply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Apply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApply}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,}};

static void InitDefaultsSegmentApply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_SegmentApply_default_instance_;
    new (ptr) ::algebra::SegmentApply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::SegmentApply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SegmentApply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSegmentApply}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_Apply.base,}};

static void InitDefaultsPattern_Binder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Pattern_Binder_default_instance_;
    new (ptr) ::algebra::Pattern_Binder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Pattern_Binder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Pattern_Binder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPattern_Binder}, {
      &protobuf_algebra_2eproto::scc_info_EdgeExpand.base,
      &protobuf_algebra_2eproto::scc_info_PathExpand.base,
      &protobuf_algebra_2eproto::scc_info_GetV.base,
      &protobuf_algebra_2eproto::scc_info_Select.base,}};

static void InitDefaultsPattern_Sentence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Pattern_Sentence_default_instance_;
    new (ptr) ::algebra::Pattern_Sentence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Pattern_Sentence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pattern_Sentence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPattern_Sentence}, {
      &protobuf_common_2eproto::scc_info_NameOrId.base,
      &protobuf_algebra_2eproto::scc_info_Pattern_Binder.base,}};

static void InitDefaultsPattern() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Pattern_default_instance_;
    new (ptr) ::algebra::Pattern();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Pattern::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pattern =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPattern}, {
      &protobuf_algebra_2eproto::scc_info_Pattern_Sentence.base,
      &protobuf_algebra_2eproto::scc_info_MetaData.base,}};

static void InitDefaultsSample_SampleByRatio() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Sample_SampleByRatio_default_instance_;
    new (ptr) ::algebra::Sample_SampleByRatio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Sample_SampleByRatio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sample_SampleByRatio =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSample_SampleByRatio}, {}};

static void InitDefaultsSample_SampleByNum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Sample_SampleByNum_default_instance_;
    new (ptr) ::algebra::Sample_SampleByNum();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Sample_SampleByNum::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sample_SampleByNum =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSample_SampleByNum}, {}};

static void InitDefaultsSample_SampleType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Sample_SampleType_default_instance_;
    new (ptr) ::algebra::Sample_SampleType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Sample_SampleType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sample_SampleType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSample_SampleType}, {
      &protobuf_algebra_2eproto::scc_info_Sample_SampleByRatio.base,
      &protobuf_algebra_2eproto::scc_info_Sample_SampleByNum.base,}};

static void InitDefaultsSample() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Sample_default_instance_;
    new (ptr) ::algebra::Sample();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Sample::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Sample =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSample}, {
      &protobuf_algebra_2eproto::scc_info_Sample_SampleType.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_expr_2eproto::scc_info_Variable.base,}};

static void InitDefaultsSink_SinkTarget() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Sink_SinkTarget_default_instance_;
    new (ptr) ::algebra::Sink_SinkTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Sink_SinkTarget::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sink_SinkTarget =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSink_SinkTarget}, {
      &protobuf_algebra_2eproto::scc_info_SinkDefault.base,
      &protobuf_algebra_2eproto::scc_info_SinkVineyard.base,}};

static void InitDefaultsSink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Sink_default_instance_;
    new (ptr) ::algebra::Sink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Sink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSink}, {
      &protobuf_expr_2eproto::scc_info_NameOrIdKey.base,
      &protobuf_algebra_2eproto::scc_info_Sink_SinkTarget.base,}};

static void InitDefaultsSinkDefault_IdNameMapping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_SinkDefault_IdNameMapping_default_instance_;
    new (ptr) ::algebra::SinkDefault_IdNameMapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::SinkDefault_IdNameMapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SinkDefault_IdNameMapping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSinkDefault_IdNameMapping}, {}};

static void InitDefaultsSinkDefault() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_SinkDefault_default_instance_;
    new (ptr) ::algebra::SinkDefault();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::SinkDefault::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SinkDefault =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSinkDefault}, {
      &protobuf_algebra_2eproto::scc_info_SinkDefault_IdNameMapping.base,}};

static void InitDefaultsSinkVineyard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_SinkVineyard_default_instance_;
    new (ptr) ::algebra::SinkVineyard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::SinkVineyard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SinkVineyard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSinkVineyard}, {
      &protobuf_schema_2eproto::scc_info_Schema.base,}};

static void InitDefaultsRoot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Root_default_instance_;
    new (ptr) ::algebra::Root();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Root::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Root =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoot}, {}};

static void InitDefaultsBranch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_Branch_default_instance_;
    new (ptr) ::algebra::Branch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::Branch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Branch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBranch}, {}};

static void InitDefaultsLogicalPlan_Operator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_LogicalPlan_Operator_default_instance_;
    new (ptr) ::algebra::LogicalPlan_Operator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::LogicalPlan_Operator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<22> scc_info_LogicalPlan_Operator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 22, InitDefaultsLogicalPlan_Operator}, {
      &protobuf_algebra_2eproto::scc_info_Project.base,
      &protobuf_algebra_2eproto::scc_info_Select.base,
      &protobuf_algebra_2eproto::scc_info_Join.base,
      &protobuf_algebra_2eproto::scc_info_Union.base,
      &protobuf_algebra_2eproto::scc_info_GroupBy.base,
      &protobuf_algebra_2eproto::scc_info_OrderBy.base,
      &protobuf_algebra_2eproto::scc_info_Dedup.base,
      &protobuf_algebra_2eproto::scc_info_Unfold.base,
      &protobuf_algebra_2eproto::scc_info_Apply.base,
      &protobuf_algebra_2eproto::scc_info_SegmentApply.base,
      &protobuf_algebra_2eproto::scc_info_Scan.base,
      &protobuf_algebra_2eproto::scc_info_Limit.base,
      &protobuf_algebra_2eproto::scc_info_As.base,
      &protobuf_algebra_2eproto::scc_info_Intersect.base,
      &protobuf_algebra_2eproto::scc_info_Sink.base,
      &protobuf_algebra_2eproto::scc_info_Root.base,
      &protobuf_algebra_2eproto::scc_info_Sample.base,
      &protobuf_algebra_2eproto::scc_info_Branch.base,
      &protobuf_algebra_2eproto::scc_info_GetV.base,
      &protobuf_algebra_2eproto::scc_info_EdgeExpand.base,
      &protobuf_algebra_2eproto::scc_info_PathExpand.base,
      &protobuf_algebra_2eproto::scc_info_Pattern.base,}};

static void InitDefaultsLogicalPlan_Node() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_LogicalPlan_Node_default_instance_;
    new (ptr) ::algebra::LogicalPlan_Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::LogicalPlan_Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogicalPlan_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogicalPlan_Node}, {
      &protobuf_algebra_2eproto::scc_info_LogicalPlan_Operator.base,}};

static void InitDefaultsLogicalPlan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::algebra::_LogicalPlan_default_instance_;
    new (ptr) ::algebra::LogicalPlan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algebra::LogicalPlan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LogicalPlan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogicalPlan}, {
      &protobuf_algebra_2eproto::scc_info_LogicalPlan_Node.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MetaData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Project_ExprAlias.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Project.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Select.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Union.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Intersect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBy_AggFunc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBy_KeyAlias.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy_OrderingPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Dedup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unfold.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Range.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Limit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndexPredicate_Triplet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndexPredicate_AndPredicate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndexPredicate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryParams_ExtraEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueryParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetV.base);
  ::google::protobuf::internal::InitSCC(&scc_info_As.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EdgeExpand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathExpand_ExpandBase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathExpand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Apply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SegmentApply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pattern_Binder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pattern_Sentence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pattern.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sample_SampleByRatio.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sample_SampleByNum.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sample_SampleType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sample.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sink_SinkTarget.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SinkDefault_IdNameMapping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SinkDefault.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SinkVineyard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Root.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Branch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogicalPlan_Operator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogicalPlan_Node.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogicalPlan.base);
}

::google::protobuf::Metadata file_level_metadata[46];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::MetaData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::MetaData, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project_ExprAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project_ExprAlias, expr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project_ExprAlias, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project, mappings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project, is_append_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Project, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Select, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Select, predicate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Join, left_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Join, right_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Join, kind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Union, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Union, parents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Intersect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Intersect, parents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Intersect, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_AggFunc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_AggFunc, vars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_AggFunc, aggregate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_AggFunc, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_KeyAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_KeyAlias, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy_KeyAlias, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy, mappings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy, functions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GroupBy, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::OrderBy_OrderingPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::OrderBy_OrderingPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::OrderBy_OrderingPair, order_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::OrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::OrderBy, pairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::OrderBy, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Dedup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Dedup, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Unfold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Unfold, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Unfold, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Unfold, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Range, lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Range, upper_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Limit, range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate_Triplet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate_Triplet, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate_Triplet, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate_Triplet, cmp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate_AndPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate_AndPredicate, predicates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::IndexPredicate, or_predicates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams_ExtraEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams_ExtraEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams_ExtraEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams_ExtraEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, tables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, is_all_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, predicate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, sample_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::QueryParams, extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Scan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Scan, scan_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Scan, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Scan, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Scan, idx_predicate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Scan, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GetV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GetV, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GetV, opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GetV, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GetV, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::GetV, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::As, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::As, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, v_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, expand_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::EdgeExpand, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand_ExpandBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand_ExpandBase, edge_expand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand_ExpandBase, get_v_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, start_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, hop_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, path_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, result_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::PathExpand, condition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Apply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Apply, join_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Apply, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Apply, subtask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Apply, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SegmentApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SegmentApply, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SegmentApply, apply_subtask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Binder, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Binder, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::algebra::Pattern_BinderDefaultTypeInternal, edge_),
  offsetof(::algebra::Pattern_BinderDefaultTypeInternal, path_),
  offsetof(::algebra::Pattern_BinderDefaultTypeInternal, vertex_),
  offsetof(::algebra::Pattern_BinderDefaultTypeInternal, select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Binder, item_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Sentence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Sentence, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Sentence, binders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Sentence, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern_Sentence, join_kind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern, sentences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Pattern, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleByRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleByRatio, ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleByNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleByNum, num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleType, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::algebra::Sample_SampleTypeDefaultTypeInternal, sample_by_ratio_),
  offsetof(::algebra::Sample_SampleTypeDefaultTypeInternal, sample_by_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample_SampleType, inner_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample, sample_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sample, sample_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sink_SinkTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sink_SinkTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::algebra::Sink_SinkTargetDefaultTypeInternal, sink_default_),
  offsetof(::algebra::Sink_SinkTargetDefaultTypeInternal, sink_vineyard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sink_SinkTarget, inner_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sink, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Sink, sink_target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkDefault_IdNameMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkDefault_IdNameMapping, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkDefault_IdNameMapping, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkDefault_IdNameMapping, meta_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkDefault, id_name_mappings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkVineyard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkVineyard, graph_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::SinkVineyard, graph_schema_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::Branch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan_Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan_Operator, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, project_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, select_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, join_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, union__),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, group_by_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, order_by_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, dedup_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, unfold_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, apply_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, seg_apply_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, scan_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, limit_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, as_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, intersect_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, sink_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, root_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, sample_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, branch_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, vertex_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, edge_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, path_),
  offsetof(::algebra::LogicalPlan_OperatorDefaultTypeInternal, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan_Operator, opr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan_Node, opr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan_Node, children_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algebra::LogicalPlan, roots_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::algebra::MetaData)},
  { 7, -1, sizeof(::algebra::Project_ExprAlias)},
  { 14, -1, sizeof(::algebra::Project)},
  { 22, -1, sizeof(::algebra::Select)},
  { 28, -1, sizeof(::algebra::Join)},
  { 36, -1, sizeof(::algebra::Union)},
  { 42, -1, sizeof(::algebra::Intersect)},
  { 49, -1, sizeof(::algebra::GroupBy_AggFunc)},
  { 57, -1, sizeof(::algebra::GroupBy_KeyAlias)},
  { 64, -1, sizeof(::algebra::GroupBy)},
  { 72, -1, sizeof(::algebra::OrderBy_OrderingPair)},
  { 79, -1, sizeof(::algebra::OrderBy)},
  { 86, -1, sizeof(::algebra::Dedup)},
  { 92, -1, sizeof(::algebra::Unfold)},
  { 100, -1, sizeof(::algebra::Range)},
  { 107, -1, sizeof(::algebra::Limit)},
  { 113, -1, sizeof(::algebra::IndexPredicate_Triplet)},
  { 121, -1, sizeof(::algebra::IndexPredicate_AndPredicate)},
  { 127, -1, sizeof(::algebra::IndexPredicate)},
  { 133, 140, sizeof(::algebra::QueryParams_ExtraEntry_DoNotUse)},
  { 142, -1, sizeof(::algebra::QueryParams)},
  { 154, -1, sizeof(::algebra::Scan)},
  { 164, -1, sizeof(::algebra::GetV)},
  { 174, -1, sizeof(::algebra::As)},
  { 180, -1, sizeof(::algebra::EdgeExpand)},
  { 191, -1, sizeof(::algebra::PathExpand_ExpandBase)},
  { 198, -1, sizeof(::algebra::PathExpand)},
  { 210, -1, sizeof(::algebra::Apply)},
  { 219, -1, sizeof(::algebra::SegmentApply)},
  { 226, -1, sizeof(::algebra::Pattern_Binder)},
  { 236, -1, sizeof(::algebra::Pattern_Sentence)},
  { 245, -1, sizeof(::algebra::Pattern)},
  { 252, -1, sizeof(::algebra::Sample_SampleByRatio)},
  { 258, -1, sizeof(::algebra::Sample_SampleByNum)},
  { 264, -1, sizeof(::algebra::Sample_SampleType)},
  { 272, -1, sizeof(::algebra::Sample)},
  { 280, -1, sizeof(::algebra::Sink_SinkTarget)},
  { 288, -1, sizeof(::algebra::Sink)},
  { 295, -1, sizeof(::algebra::SinkDefault_IdNameMapping)},
  { 303, -1, sizeof(::algebra::SinkDefault)},
  { 309, -1, sizeof(::algebra::SinkVineyard)},
  { 316, -1, sizeof(::algebra::Root)},
  { 321, -1, sizeof(::algebra::Branch)},
  { 326, -1, sizeof(::algebra::LogicalPlan_Operator)},
  { 354, -1, sizeof(::algebra::LogicalPlan_Node)},
  { 361, -1, sizeof(::algebra::LogicalPlan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_MetaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Project_ExprAlias_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Project_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Select_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Union_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Intersect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_GroupBy_AggFunc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_GroupBy_KeyAlias_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_GroupBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_OrderBy_OrderingPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_OrderBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Dedup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Unfold_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Limit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_IndexPredicate_Triplet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_IndexPredicate_AndPredicate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_IndexPredicate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_QueryParams_ExtraEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_QueryParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Scan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_GetV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_As_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_EdgeExpand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_PathExpand_ExpandBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_PathExpand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Apply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_SegmentApply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Pattern_Binder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Pattern_Sentence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Pattern_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Sample_SampleByRatio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Sample_SampleByNum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Sample_SampleType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Sample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Sink_SinkTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Sink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_SinkDefault_IdNameMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_SinkDefault_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_SinkVineyard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Root_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_Branch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_LogicalPlan_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_LogicalPlan_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algebra::_LogicalPlan_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "algebra.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 46);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ralgebra.proto\022\007algebra\032\014common.proto\032\n"
      "expr.proto\032\014schema.proto\032\ntype.proto\032\036go"
      "ogle/protobuf/wrappers.proto\";\n\010MetaData"
      "\022 \n\004type\030\001 \001(\0132\022.common.IrDataType\022\r\n\005al"
      "ias\030\002 \001(\005\"\300\001\n\007Project\022,\n\010mappings\030\001 \003(\0132"
      "\032.algebra.Project.ExprAlias\022\021\n\tis_append"
      "\030\002 \001(\010\022$\n\tmeta_data\030\003 \003(\0132\021.algebra.Meta"
      "Data\032N\n\tExprAlias\022 \n\004expr\030\001 \001(\0132\022.common"
      ".Expression\022\037\n\005alias\030\002 \001(\0132\020.common.Name"
      "OrId\"/\n\006Select\022%\n\tpredicate\030\001 \001(\0132\022.comm"
      "on.Expression\"\336\001\n\004Join\022#\n\tleft_keys\030\001 \003("
      "\0132\020.common.Variable\022$\n\nright_keys\030\002 \003(\0132"
      "\020.common.Variable\022$\n\004kind\030\003 \001(\0162\026.algebr"
      "a.Join.JoinKind\"e\n\010JoinKind\022\t\n\005INNER\020\000\022\016"
      "\n\nLEFT_OUTER\020\001\022\017\n\013RIGHT_OUTER\020\002\022\016\n\nFULL_"
      "OUTER\020\003\022\010\n\004SEMI\020\004\022\010\n\004ANTI\020\005\022\t\n\005TIMES\020\006\"\030"
      "\n\005Union\022\017\n\007parents\030\001 \003(\005\";\n\tIntersect\022\017\n"
      "\007parents\030\001 \003(\005\022\035\n\003key\030\002 \001(\0132\020.common.Nam"
      "eOrId\"\315\003\n\007GroupBy\022+\n\010mappings\030\001 \003(\0132\031.al"
      "gebra.GroupBy.KeyAlias\022+\n\tfunctions\030\002 \003("
      "\0132\030.algebra.GroupBy.AggFunc\022$\n\tmeta_data"
      "\030\003 \003(\0132\021.algebra.MetaData\032\365\001\n\007AggFunc\022\036\n"
      "\004vars\030\001 \003(\0132\020.common.Variable\0225\n\taggrega"
      "te\030\002 \001(\0162\".algebra.GroupBy.AggFunc.Aggre"
      "gate\022\037\n\005alias\030\003 \001(\0132\020.common.NameOrId\"r\n"
      "\tAggregate\022\007\n\003SUM\020\000\022\007\n\003MIN\020\001\022\007\n\003MAX\020\002\022\t\n"
      "\005COUNT\020\003\022\022\n\016COUNT_DISTINCT\020\004\022\013\n\007TO_LIST\020"
      "\005\022\n\n\006TO_SET\020\006\022\007\n\003AVG\020\007\022\t\n\005FIRST\020\010\032J\n\010Key"
      "Alias\022\035\n\003key\030\001 \001(\0132\020.common.Variable\022\037\n\005"
      "alias\030\002 \001(\0132\020.common.NameOrId\"\343\001\n\007OrderB"
      "y\022,\n\005pairs\030\002 \003(\0132\035.algebra.OrderBy.Order"
      "ingPair\022\035\n\005limit\030\003 \001(\0132\016.algebra.Range\032\212"
      "\001\n\014OrderingPair\022\035\n\003key\030\001 \001(\0132\020.common.Va"
      "riable\0222\n\005order\030\002 \001(\0162#.algebra.OrderBy."
      "OrderingPair.Order\"\'\n\005Order\022\013\n\007SHUFFLE\020\000"
      "\022\007\n\003ASC\020\001\022\010\n\004DESC\020\002\"\'\n\005Dedup\022\036\n\004keys\030\001 \003"
      "(\0132\020.common.Variable\"n\n\006Unfold\022\035\n\003tag\030\001 "
      "\001(\0132\020.common.NameOrId\022\037\n\005alias\030\002 \001(\0132\020.c"
      "ommon.NameOrId\022$\n\tmeta_data\030\003 \001(\0132\021.alge"
      "bra.MetaData\"%\n\005Range\022\r\n\005lower\030\001 \001(\005\022\r\n\005"
      "upper\030\002 \001(\005\"&\n\005Limit\022\035\n\005range\030\001 \001(\0132\016.al"
      "gebra.Range\"\365\001\n\016IndexPredicate\022;\n\ror_pre"
      "dicates\030\001 \003(\0132$.algebra.IndexPredicate.A"
      "ndPredicate\032a\n\007Triplet\022\035\n\003key\030\001 \001(\0132\020.co"
      "mmon.Property\022\034\n\005value\030\002 \001(\0132\r.common.Va"
      "lue\022\031\n\003cmp\030\003 \001(\0132\014.common.None\032C\n\014AndPre"
      "dicate\0223\n\npredicates\030\001 \003(\0132\037.algebra.Ind"
      "exPredicate.Triplet\"\244\002\n\013QueryParams\022 \n\006t"
      "ables\030\001 \003(\0132\020.common.NameOrId\022!\n\007columns"
      "\030\002 \003(\0132\020.common.NameOrId\022\026\n\016is_all_colum"
      "ns\030\003 \001(\010\022\035\n\005limit\030\004 \001(\0132\016.algebra.Range\022"
      "%\n\tpredicate\030\005 \001(\0132\022.common.Expression\022\024"
      "\n\014sample_ratio\030\006 \001(\001\022.\n\005extra\030\007 \003(\0132\037.al"
      "gebra.QueryParams.ExtraEntry\032,\n\nExtraEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\370\001\n\004S"
      "can\022\'\n\010scan_opt\030\001 \001(\0162\025.algebra.Scan.Sca"
      "nOpt\022\037\n\005alias\030\002 \001(\0132\020.common.NameOrId\022$\n"
      "\006params\030\003 \001(\0132\024.algebra.QueryParams\022.\n\ri"
      "dx_predicate\030\004 \001(\0132\027.algebra.IndexPredic"
      "ate\022$\n\tmeta_data\030\005 \001(\0132\021.algebra.MetaDat"
      "a\"*\n\007ScanOpt\022\n\n\006VERTEX\020\000\022\010\n\004EDGE\020\001\022\t\n\005TA"
      "BLE\020\002\"\344\001\n\004GetV\022\035\n\003tag\030\001 \001(\0132\020.common.Nam"
      "eOrId\022\037\n\003opt\030\002 \001(\0162\022.algebra.GetV.VOpt\022$"
      "\n\006params\030\003 \001(\0132\024.algebra.QueryParams\022\037\n\005"
      "alias\030\004 \001(\0132\020.common.NameOrId\022$\n\tmeta_da"
      "ta\030\005 \001(\0132\021.algebra.MetaData\"/\n\004VOpt\022\t\n\005S"
      "TART\020\000\022\007\n\003END\020\001\022\t\n\005OTHER\020\002\022\010\n\004BOTH\020\003\"%\n\002"
      "As\022\037\n\005alias\030\001 \001(\0132\020.common.NameOrId\"\326\002\n\n"
      "EdgeExpand\022\037\n\005v_tag\030\001 \001(\0132\020.common.NameO"
      "rId\0220\n\tdirection\030\002 \001(\0162\035.algebra.EdgeExp"
      "and.Direction\022$\n\006params\030\003 \001(\0132\024.algebra."
      "QueryParams\022\037\n\005alias\030\004 \001(\0132\020.common.Name"
      "OrId\0221\n\nexpand_opt\030\005 \001(\0162\035.algebra.EdgeE"
      "xpand.ExpandOpt\022$\n\tmeta_data\030\006 \001(\0132\021.alg"
      "ebra.MetaData\"&\n\tDirection\022\007\n\003OUT\020\000\022\006\n\002I"
      "N\020\001\022\010\n\004BOTH\020\002\"-\n\tExpandOpt\022\n\n\006VERTEX\020\000\022\010"
      "\n\004EDGE\020\001\022\n\n\006DEGREE\020\002\"\330\003\n\nPathExpand\022,\n\004b"
      "ase\030\001 \001(\0132\036.algebra.PathExpand.ExpandBas"
      "e\022#\n\tstart_tag\030\002 \001(\0132\020.common.NameOrId\022\037"
      "\n\005alias\030\003 \001(\0132\020.common.NameOrId\022!\n\thop_r"
      "ange\030\004 \001(\0132\016.algebra.Range\022-\n\010path_opt\030\005"
      " \001(\0162\033.algebra.PathExpand.PathOpt\0221\n\nres"
      "ult_opt\030\006 \001(\0162\035.algebra.PathExpand.Resul"
      "tOpt\022%\n\tcondition\030\007 \001(\0132\022.common.Express"
      "ion\032T\n\nExpandBase\022(\n\013edge_expand\030\001 \001(\0132\023"
      ".algebra.EdgeExpand\022\034\n\005get_V\030\002 \001(\0132\r.alg"
      "ebra.GetV\"$\n\007PathOpt\022\r\n\tARBITRARY\020\000\022\n\n\006S"
      "IMPLE\020\001\".\n\tResultOpt\022\t\n\005END_V\020\000\022\t\n\005ALL_V"
      "\020\001\022\013\n\007ALL_V_E\020\002\"\204\001\n\005Apply\022)\n\tjoin_kind\030\001"
      " \001(\0162\026.algebra.Join.JoinKind\022\036\n\004tags\030\002 \003"
      "(\0132\020.common.NameOrId\022\017\n\007subtask\030\003 \001(\005\022\037\n"
      "\005alias\030\004 \001(\0132\020.common.NameOrId\"U\n\014Segmen"
      "tApply\022\036\n\004keys\030\001 \003(\0132\020.common.NameOrId\022%"
      "\n\rapply_subtask\030\002 \001(\0132\016.algebra.Apply\"\240\003"
      "\n\007Pattern\022,\n\tsentences\030\001 \003(\0132\031.algebra.P"
      "attern.Sentence\022$\n\tmeta_data\030\002 \003(\0132\021.alg"
      "ebra.MetaData\032\236\001\n\006Binder\022#\n\004edge\030\001 \001(\0132\023"
      ".algebra.EdgeExpandH\000\022#\n\004path\030\002 \001(\0132\023.al"
      "gebra.PathExpandH\000\022\037\n\006vertex\030\003 \001(\0132\r.alg"
      "ebra.GetVH\000\022!\n\006select\030\004 \001(\0132\017.algebra.Se"
      "lectH\000B\006\n\004item\032\237\001\n\010Sentence\022\037\n\005start\030\001 \001"
      "(\0132\020.common.NameOrId\022(\n\007binders\030\002 \003(\0132\027."
      "algebra.Pattern.Binder\022\035\n\003end\030\003 \001(\0132\020.co"
      "mmon.NameOrId\022)\n\tjoin_kind\030\004 \001(\0162\026.algeb"
      "ra.Join.JoinKind\"\321\002\n\006Sample\022/\n\013sample_ty"
      "pe\030\001 \001(\0132\032.algebra.Sample.SampleType\022)\n\004"
      "seed\030\002 \001(\0132\033.google.protobuf.Int32Value\022"
      "\'\n\rsample_weight\030\003 \001(\0132\020.common.Variable"
      "\032\036\n\rSampleByRatio\022\r\n\005ratio\030\001 \001(\001\032\032\n\013Samp"
      "leByNum\022\013\n\003num\030\001 \001(\005\032\205\001\n\nSampleType\0228\n\017s"
      "ample_by_ratio\030\001 \001(\0132\035.algebra.Sample.Sa"
      "mpleByRatioH\000\0224\n\rsample_by_num\030\002 \001(\0132\033.a"
      "lgebra.Sample.SampleByNumH\000B\007\n\005inner\"\315\001\n"
      "\004Sink\022!\n\004tags\030\001 \003(\0132\023.common.NameOrIdKey"
      "\022-\n\013sink_target\030\002 \001(\0132\030.algebra.Sink.Sin"
      "kTarget\032s\n\nSinkTarget\022,\n\014sink_default\030\001 "
      "\001(\0132\024.algebra.SinkDefaultH\000\022.\n\rsink_vine"
      "yard\030\002 \001(\0132\025.algebra.SinkVineyardH\000B\007\n\005i"
      "nner\"\343\001\n\013SinkDefault\022<\n\020id_name_mappings"
      "\030\001 \003(\0132\".algebra.SinkDefault.IdNameMappi"
      "ng\032[\n\rIdNameMapping\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030"
      "\002 \001(\t\0220\n\tmeta_type\030\003 \001(\0162\035.algebra.SinkD"
      "efault.MetaType\"9\n\010MetaType\022\n\n\006ENTITY\020\000\022"
      "\014\n\010RELATION\020\001\022\n\n\006COLUMN\020\002\022\007\n\003TAG\020\003\"H\n\014Si"
      "nkVineyard\022\022\n\ngraph_name\030\001 \001(\t\022$\n\014graph_"
      "schema\030\002 \001(\0132\016.schema.Schema\"\006\n\004Root\"\010\n\006"
      "Branch\"\235\007\n\013LogicalPlan\022(\n\005nodes\030\001 \003(\0132\031."
      "algebra.LogicalPlan.Node\022\r\n\005roots\030\002 \003(\005\032"
      "\216\006\n\010Operator\022#\n\007project\030\001 \001(\0132\020.algebra."
      "ProjectH\000\022!\n\006select\030\002 \001(\0132\017.algebra.Sele"
      "ctH\000\022\035\n\004join\030\003 \001(\0132\r.algebra.JoinH\000\022\037\n\005u"
      "nion\030\004 \001(\0132\016.algebra.UnionH\000\022$\n\010group_by"
      "\030\005 \001(\0132\020.algebra.GroupByH\000\022$\n\010order_by\030\006"
      " \001(\0132\020.algebra.OrderByH\000\022\037\n\005dedup\030\007 \001(\0132"
      "\016.algebra.DedupH\000\022!\n\006unfold\030\010 \001(\0132\017.alge"
      "bra.UnfoldH\000\022\037\n\005apply\030\t \001(\0132\016.algebra.Ap"
      "plyH\000\022*\n\tseg_apply\030\n \001(\0132\025.algebra.Segme"
      "ntApplyH\000\022\035\n\004scan\030\013 \001(\0132\r.algebra.ScanH\000"
      "\022\037\n\005limit\030\014 \001(\0132\016.algebra.LimitH\000\022\031\n\002as\030"
      "\016 \001(\0132\013.algebra.AsH\000\022\'\n\tintersect\030\017 \001(\0132"
      "\022.algebra.IntersectH\000\022\035\n\004sink\030\020 \001(\0132\r.al"
      "gebra.SinkH\000\022\035\n\004root\030\021 \001(\0132\r.algebra.Roo"
      "tH\000\022!\n\006sample\030\022 \001(\0132\017.algebra.SampleH\000\022!"
      "\n\006branch\030\023 \001(\0132\017.algebra.BranchH\000\022\037\n\006ver"
      "tex\030\036 \001(\0132\r.algebra.GetVH\000\022#\n\004edge\030\037 \001(\013"
      "2\023.algebra.EdgeExpandH\000\022#\n\004path\030  \001(\0132\023."
      "algebra.PathExpandH\000\022#\n\007pattern\030# \001(\0132\020."
      "algebra.PatternH\000B\005\n\003opr\032D\n\004Node\022*\n\003opr\030"
      "\001 \001(\0132\035.algebra.LogicalPlan.Operator\022\020\n\010"
      "children\030\002 \003(\005B1\n!com.alibaba.graphscope"
      ".gaia.protoB\014GraphAlgebrab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6033);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "algebra.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_expr_2eproto::AddDescriptors();
  ::protobuf_schema_2eproto::AddDescriptors();
  ::protobuf_type_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_algebra_2eproto
namespace algebra {
const ::google::protobuf::EnumDescriptor* Join_JoinKind_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[0];
}
bool Join_JoinKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Join_JoinKind Join::INNER;
const Join_JoinKind Join::LEFT_OUTER;
const Join_JoinKind Join::RIGHT_OUTER;
const Join_JoinKind Join::FULL_OUTER;
const Join_JoinKind Join::SEMI;
const Join_JoinKind Join::ANTI;
const Join_JoinKind Join::TIMES;
const Join_JoinKind Join::JoinKind_MIN;
const Join_JoinKind Join::JoinKind_MAX;
const int Join::JoinKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GroupBy_AggFunc_Aggregate_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[1];
}
bool GroupBy_AggFunc_Aggregate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::SUM;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::MIN;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::MAX;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::COUNT;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::COUNT_DISTINCT;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::TO_LIST;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::TO_SET;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::AVG;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::FIRST;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::Aggregate_MIN;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::Aggregate_MAX;
const int GroupBy_AggFunc::Aggregate_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OrderBy_OrderingPair_Order_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[2];
}
bool OrderBy_OrderingPair_Order_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OrderBy_OrderingPair_Order OrderBy_OrderingPair::SHUFFLE;
const OrderBy_OrderingPair_Order OrderBy_OrderingPair::ASC;
const OrderBy_OrderingPair_Order OrderBy_OrderingPair::DESC;
const OrderBy_OrderingPair_Order OrderBy_OrderingPair::Order_MIN;
const OrderBy_OrderingPair_Order OrderBy_OrderingPair::Order_MAX;
const int OrderBy_OrderingPair::Order_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Scan_ScanOpt_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[3];
}
bool Scan_ScanOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scan_ScanOpt Scan::VERTEX;
const Scan_ScanOpt Scan::EDGE;
const Scan_ScanOpt Scan::TABLE;
const Scan_ScanOpt Scan::ScanOpt_MIN;
const Scan_ScanOpt Scan::ScanOpt_MAX;
const int Scan::ScanOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetV_VOpt_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[4];
}
bool GetV_VOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetV_VOpt GetV::START;
const GetV_VOpt GetV::END;
const GetV_VOpt GetV::OTHER;
const GetV_VOpt GetV::BOTH;
const GetV_VOpt GetV::VOpt_MIN;
const GetV_VOpt GetV::VOpt_MAX;
const int GetV::VOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EdgeExpand_Direction_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[5];
}
bool EdgeExpand_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EdgeExpand_Direction EdgeExpand::OUT;
const EdgeExpand_Direction EdgeExpand::IN;
const EdgeExpand_Direction EdgeExpand::BOTH;
const EdgeExpand_Direction EdgeExpand::Direction_MIN;
const EdgeExpand_Direction EdgeExpand::Direction_MAX;
const int EdgeExpand::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EdgeExpand_ExpandOpt_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[6];
}
bool EdgeExpand_ExpandOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EdgeExpand_ExpandOpt EdgeExpand::VERTEX;
const EdgeExpand_ExpandOpt EdgeExpand::EDGE;
const EdgeExpand_ExpandOpt EdgeExpand::DEGREE;
const EdgeExpand_ExpandOpt EdgeExpand::ExpandOpt_MIN;
const EdgeExpand_ExpandOpt EdgeExpand::ExpandOpt_MAX;
const int EdgeExpand::ExpandOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PathExpand_PathOpt_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[7];
}
bool PathExpand_PathOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathExpand_PathOpt PathExpand::ARBITRARY;
const PathExpand_PathOpt PathExpand::SIMPLE;
const PathExpand_PathOpt PathExpand::PathOpt_MIN;
const PathExpand_PathOpt PathExpand::PathOpt_MAX;
const int PathExpand::PathOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PathExpand_ResultOpt_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[8];
}
bool PathExpand_ResultOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathExpand_ResultOpt PathExpand::END_V;
const PathExpand_ResultOpt PathExpand::ALL_V;
const PathExpand_ResultOpt PathExpand::ALL_V_E;
const PathExpand_ResultOpt PathExpand::ResultOpt_MIN;
const PathExpand_ResultOpt PathExpand::ResultOpt_MAX;
const int PathExpand::ResultOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SinkDefault_MetaType_descriptor() {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_algebra_2eproto::file_level_enum_descriptors[9];
}
bool SinkDefault_MetaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SinkDefault_MetaType SinkDefault::ENTITY;
const SinkDefault_MetaType SinkDefault::RELATION;
const SinkDefault_MetaType SinkDefault::COLUMN;
const SinkDefault_MetaType SinkDefault::TAG;
const SinkDefault_MetaType SinkDefault::MetaType_MIN;
const SinkDefault_MetaType SinkDefault::MetaType_MAX;
const int SinkDefault::MetaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MetaData::InitAsDefaultInstance() {
  ::algebra::_MetaData_default_instance_._instance.get_mutable()->type_ = const_cast< ::common::IrDataType*>(
      ::common::IrDataType::internal_default_instance());
}
void MetaData::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaData::kTypeFieldNumber;
const int MetaData::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaData::MetaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_MetaData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    type_ = new ::common::IrDataType(*from.type_);
  } else {
    type_ = NULL;
  }
  alias_ = from.alias_;
  // @@protoc_insertion_point(copy_constructor:algebra.MetaData)
}

void MetaData::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&type_)) + sizeof(alias_));
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:algebra.MetaData)
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (this != internal_default_instance()) delete type_;
}

void MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MetaData::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaData& MetaData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_MetaData.base);
  return *internal_default_instance();
}


void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
  alias_ = 0;
  _internal_metadata_.Clear();
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.MetaData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.IrDataType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.MetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.MetaData)
  return false;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.IrDataType type = 1;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_type(), output);
  }

  // int32 alias = 2;
  if (this->alias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.MetaData)
}

::google::protobuf::uint8* MetaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.IrDataType type = 1;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_type(), deterministic, target);
  }

  // int32 alias = 2;
  if (this->alias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alias(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.MetaData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.IrDataType type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // int32 alias = 2;
  if (this->alias() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alias());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.MetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.MetaData)
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    mutable_type()->::common::IrDataType::MergeFrom(from.type());
  }
  if (from.alias() != 0) {
    set_alias(from.alias());
  }
}

void MetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MetaData::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Project_ExprAlias::InitAsDefaultInstance() {
  ::algebra::_Project_ExprAlias_default_instance_._instance.get_mutable()->expr_ = const_cast< ::common::Expression*>(
      ::common::Expression::internal_default_instance());
  ::algebra::_Project_ExprAlias_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void Project_ExprAlias::clear_expr() {
  if (GetArenaNoVirtual() == NULL && expr_ != NULL) {
    delete expr_;
  }
  expr_ = NULL;
}
void Project_ExprAlias::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Project_ExprAlias::kExprFieldNumber;
const int Project_ExprAlias::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Project_ExprAlias::Project_ExprAlias()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Project_ExprAlias.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Project.ExprAlias)
}
Project_ExprAlias::Project_ExprAlias(const Project_ExprAlias& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expr()) {
    expr_ = new ::common::Expression(*from.expr_);
  } else {
    expr_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Project.ExprAlias)
}

void Project_ExprAlias::SharedCtor() {
  ::memset(&expr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&expr_)) + sizeof(alias_));
}

Project_ExprAlias::~Project_ExprAlias() {
  // @@protoc_insertion_point(destructor:algebra.Project.ExprAlias)
  SharedDtor();
}

void Project_ExprAlias::SharedDtor() {
  if (this != internal_default_instance()) delete expr_;
  if (this != internal_default_instance()) delete alias_;
}

void Project_ExprAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Project_ExprAlias::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Project_ExprAlias& Project_ExprAlias::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Project_ExprAlias.base);
  return *internal_default_instance();
}


void Project_ExprAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Project.ExprAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && expr_ != NULL) {
    delete expr_;
  }
  expr_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  _internal_metadata_.Clear();
}

bool Project_ExprAlias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Project.ExprAlias)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Expression expr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Project.ExprAlias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Project.ExprAlias)
  return false;
#undef DO_
}

void Project_ExprAlias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Project.ExprAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Expression expr = 1;
  if (this->has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_expr(), output);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Project.ExprAlias)
}

::google::protobuf::uint8* Project_ExprAlias::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Project.ExprAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Expression expr = 1;
  if (this->has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_expr(), deterministic, target);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Project.ExprAlias)
  return target;
}

size_t Project_ExprAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Project.ExprAlias)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Expression expr = 1;
  if (this->has_expr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Project_ExprAlias::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Project.ExprAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const Project_ExprAlias* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Project_ExprAlias>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Project.ExprAlias)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Project.ExprAlias)
    MergeFrom(*source);
  }
}

void Project_ExprAlias::MergeFrom(const Project_ExprAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Project.ExprAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expr()) {
    mutable_expr()->::common::Expression::MergeFrom(from.expr());
  }
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
}

void Project_ExprAlias::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Project.ExprAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project_ExprAlias::CopyFrom(const Project_ExprAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Project.ExprAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project_ExprAlias::IsInitialized() const {
  return true;
}

void Project_ExprAlias::Swap(Project_ExprAlias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project_ExprAlias::InternalSwap(Project_ExprAlias* other) {
  using std::swap;
  swap(expr_, other->expr_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Project_ExprAlias::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Project::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Project::kMappingsFieldNumber;
const int Project::kIsAppendFieldNumber;
const int Project::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Project::Project()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Project.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Project)
}
Project::Project(const Project& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mappings_(from.mappings_),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_append_ = from.is_append_;
  // @@protoc_insertion_point(copy_constructor:algebra.Project)
}

void Project::SharedCtor() {
  is_append_ = false;
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:algebra.Project)
  SharedDtor();
}

void Project::SharedDtor() {
}

void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Project::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Project& Project::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Project.base);
  return *internal_default_instance();
}


void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  meta_data_.Clear();
  is_append_ = false;
  _internal_metadata_.Clear();
}

bool Project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Project)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.Project.ExprAlias mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_append = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_append_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .algebra.MetaData meta_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Project)
  return false;
#undef DO_
}

void Project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.Project.ExprAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  // bool is_append = 2;
  if (this->is_append() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_append(), output);
  }

  // repeated .algebra.MetaData meta_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->meta_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Project)
}

::google::protobuf::uint8* Project::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.Project.ExprAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), deterministic, target);
  }

  // bool is_append = 2;
  if (this->is_append() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_append(), target);
  }

  // repeated .algebra.MetaData meta_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->meta_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Project)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.Project.ExprAlias mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  // repeated .algebra.MetaData meta_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->meta_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meta_data(static_cast<int>(i)));
    }
  }

  // bool is_append = 2;
  if (this->is_append() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Project::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Project)
  GOOGLE_DCHECK_NE(&from, this);
  const Project* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Project>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Project)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Project)
    MergeFrom(*source);
  }
}

void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Project)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
  meta_data_.MergeFrom(from.meta_data_);
  if (from.is_append() != 0) {
    set_is_append(from.is_append());
  }
}

void Project::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::Swap(Project* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project::InternalSwap(Project* other) {
  using std::swap;
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
  CastToBase(&meta_data_)->InternalSwap(CastToBase(&other->meta_data_));
  swap(is_append_, other->is_append_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Project::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Select::InitAsDefaultInstance() {
  ::algebra::_Select_default_instance_._instance.get_mutable()->predicate_ = const_cast< ::common::Expression*>(
      ::common::Expression::internal_default_instance());
}
void Select::clear_predicate() {
  if (GetArenaNoVirtual() == NULL && predicate_ != NULL) {
    delete predicate_;
  }
  predicate_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Select::kPredicateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Select::Select()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Select.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Select)
}
Select::Select(const Select& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_predicate()) {
    predicate_ = new ::common::Expression(*from.predicate_);
  } else {
    predicate_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Select)
}

void Select::SharedCtor() {
  predicate_ = NULL;
}

Select::~Select() {
  // @@protoc_insertion_point(destructor:algebra.Select)
  SharedDtor();
}

void Select::SharedDtor() {
  if (this != internal_default_instance()) delete predicate_;
}

void Select::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Select::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Select& Select::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Select.base);
  return *internal_default_instance();
}


void Select::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Select)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && predicate_ != NULL) {
    delete predicate_;
  }
  predicate_ = NULL;
  _internal_metadata_.Clear();
}

bool Select::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Select)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Expression predicate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_predicate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Select)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Select)
  return false;
#undef DO_
}

void Select::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Select)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Expression predicate = 1;
  if (this->has_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_predicate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Select)
}

::google::protobuf::uint8* Select::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Select)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Expression predicate = 1;
  if (this->has_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_predicate(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Select)
  return target;
}

size_t Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Select)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Expression predicate = 1;
  if (this->has_predicate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *predicate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Select::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Select)
  GOOGLE_DCHECK_NE(&from, this);
  const Select* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Select>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Select)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Select)
    MergeFrom(*source);
  }
}

void Select::MergeFrom(const Select& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Select)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_predicate()) {
    mutable_predicate()->::common::Expression::MergeFrom(from.predicate());
  }
}

void Select::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Select::CopyFrom(const Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Select::IsInitialized() const {
  return true;
}

void Select::Swap(Select* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Select::InternalSwap(Select* other) {
  using std::swap;
  swap(predicate_, other->predicate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Select::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Join::InitAsDefaultInstance() {
}
void Join::clear_left_keys() {
  left_keys_.Clear();
}
void Join::clear_right_keys() {
  right_keys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Join::kLeftKeysFieldNumber;
const int Join::kRightKeysFieldNumber;
const int Join::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Join::Join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Join)
}
Join::Join(const Join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      left_keys_(from.left_keys_),
      right_keys_(from.right_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:algebra.Join)
}

void Join::SharedCtor() {
  kind_ = 0;
}

Join::~Join() {
  // @@protoc_insertion_point(destructor:algebra.Join)
  SharedDtor();
}

void Join::SharedDtor() {
}

void Join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Join::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Join& Join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Join.base);
  return *internal_default_instance();
}


void Join::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_keys_.Clear();
  right_keys_.Clear();
  kind_ = 0;
  _internal_metadata_.Clear();
}

bool Join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.Variable left_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.Variable right_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Join.JoinKind kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::algebra::Join_JoinKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Join)
  return false;
#undef DO_
}

void Join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable left_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->left_keys(static_cast<int>(i)),
      output);
  }

  // repeated .common.Variable right_keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->right_keys(static_cast<int>(i)),
      output);
  }

  // .algebra.Join.JoinKind kind = 3;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Join)
}

::google::protobuf::uint8* Join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable left_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->left_keys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .common.Variable right_keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->right_keys(static_cast<int>(i)), deterministic, target);
  }

  // .algebra.Join.JoinKind kind = 3;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Join)
  return target;
}

size_t Join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Join)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.Variable left_keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->left_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_keys(static_cast<int>(i)));
    }
  }

  // repeated .common.Variable right_keys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->right_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_keys(static_cast<int>(i)));
    }
  }

  // .algebra.Join.JoinKind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Join)
  GOOGLE_DCHECK_NE(&from, this);
  const Join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Join)
    MergeFrom(*source);
  }
}

void Join::MergeFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_keys_.MergeFrom(from.left_keys_);
  right_keys_.MergeFrom(from.right_keys_);
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void Join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Join::CopyFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Join::IsInitialized() const {
  return true;
}

void Join::Swap(Join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Join::InternalSwap(Join* other) {
  using std::swap;
  CastToBase(&left_keys_)->InternalSwap(CastToBase(&other->left_keys_));
  CastToBase(&right_keys_)->InternalSwap(CastToBase(&other->right_keys_));
  swap(kind_, other->kind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Join::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Union::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Union::kParentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Union::Union()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Union.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Union)
}
Union::Union(const Union& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parents_(from.parents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.Union)
}

void Union::SharedCtor() {
}

Union::~Union() {
  // @@protoc_insertion_point(destructor:algebra.Union)
  SharedDtor();
}

void Union::SharedDtor() {
}

void Union::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Union::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Union& Union::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Union.base);
  return *internal_default_instance();
}


void Union::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parents_.Clear();
  _internal_metadata_.Clear();
}

bool Union::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Union)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 parents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_parents())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_parents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Union)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Union)
  return false;
#undef DO_
}

void Union::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 parents = 1;
  if (this->parents_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _parents_cached_byte_size_));
  }
  for (int i = 0, n = this->parents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->parents(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Union)
}

::google::protobuf::uint8* Union::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 parents = 1;
  if (this->parents_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _parents_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->parents_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Union)
  return target;
}

size_t Union::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Union)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 parents = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->parents_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _parents_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Union::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Union)
  GOOGLE_DCHECK_NE(&from, this);
  const Union* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Union>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Union)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Union)
    MergeFrom(*source);
  }
}

void Union::MergeFrom(const Union& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Union)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
}

void Union::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Union::CopyFrom(const Union& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Union::IsInitialized() const {
  return true;
}

void Union::Swap(Union* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Union::InternalSwap(Union* other) {
  using std::swap;
  parents_.InternalSwap(&other->parents_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Union::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Intersect::InitAsDefaultInstance() {
  ::algebra::_Intersect_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void Intersect::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intersect::kParentsFieldNumber;
const int Intersect::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intersect::Intersect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Intersect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Intersect)
}
Intersect::Intersect(const Intersect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parents_(from.parents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::NameOrId(*from.key_);
  } else {
    key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Intersect)
}

void Intersect::SharedCtor() {
  key_ = NULL;
}

Intersect::~Intersect() {
  // @@protoc_insertion_point(destructor:algebra.Intersect)
  SharedDtor();
}

void Intersect::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void Intersect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Intersect::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Intersect& Intersect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Intersect.base);
  return *internal_default_instance();
}


void Intersect::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Intersect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parents_.Clear();
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  _internal_metadata_.Clear();
}

bool Intersect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Intersect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 parents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_parents())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_parents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Intersect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Intersect)
  return false;
#undef DO_
}

void Intersect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Intersect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 parents = 1;
  if (this->parents_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _parents_cached_byte_size_));
  }
  for (int i = 0, n = this->parents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->parents(i), output);
  }

  // .common.NameOrId key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Intersect)
}

::google::protobuf::uint8* Intersect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Intersect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 parents = 1;
  if (this->parents_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _parents_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->parents_, target);
  }

  // .common.NameOrId key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_key(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Intersect)
  return target;
}

size_t Intersect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Intersect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 parents = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->parents_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _parents_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .common.NameOrId key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intersect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Intersect)
  GOOGLE_DCHECK_NE(&from, this);
  const Intersect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Intersect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Intersect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Intersect)
    MergeFrom(*source);
  }
}

void Intersect::MergeFrom(const Intersect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Intersect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
  if (from.has_key()) {
    mutable_key()->::common::NameOrId::MergeFrom(from.key());
  }
}

void Intersect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Intersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intersect::CopyFrom(const Intersect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Intersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersect::IsInitialized() const {
  return true;
}

void Intersect::Swap(Intersect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intersect::InternalSwap(Intersect* other) {
  using std::swap;
  parents_.InternalSwap(&other->parents_);
  swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Intersect::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupBy_AggFunc::InitAsDefaultInstance() {
  ::algebra::_GroupBy_AggFunc_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void GroupBy_AggFunc::clear_vars() {
  vars_.Clear();
}
void GroupBy_AggFunc::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBy_AggFunc::kVarsFieldNumber;
const int GroupBy_AggFunc::kAggregateFieldNumber;
const int GroupBy_AggFunc::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBy_AggFunc::GroupBy_AggFunc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_GroupBy_AggFunc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.GroupBy.AggFunc)
}
GroupBy_AggFunc::GroupBy_AggFunc(const GroupBy_AggFunc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vars_(from.vars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  aggregate_ = from.aggregate_;
  // @@protoc_insertion_point(copy_constructor:algebra.GroupBy.AggFunc)
}

void GroupBy_AggFunc::SharedCtor() {
  ::memset(&alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregate_) -
      reinterpret_cast<char*>(&alias_)) + sizeof(aggregate_));
}

GroupBy_AggFunc::~GroupBy_AggFunc() {
  // @@protoc_insertion_point(destructor:algebra.GroupBy.AggFunc)
  SharedDtor();
}

void GroupBy_AggFunc::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
}

void GroupBy_AggFunc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupBy_AggFunc::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupBy_AggFunc& GroupBy_AggFunc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_GroupBy_AggFunc.base);
  return *internal_default_instance();
}


void GroupBy_AggFunc::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.GroupBy.AggFunc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  aggregate_ = 0;
  _internal_metadata_.Clear();
}

bool GroupBy_AggFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.GroupBy.AggFunc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.Variable vars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.GroupBy.AggFunc.Aggregate aggregate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aggregate(static_cast< ::algebra::GroupBy_AggFunc_Aggregate >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.GroupBy.AggFunc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.GroupBy.AggFunc)
  return false;
#undef DO_
}

void GroupBy_AggFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.GroupBy.AggFunc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vars(static_cast<int>(i)),
      output);
  }

  // .algebra.GroupBy.AggFunc.Aggregate aggregate = 2;
  if (this->aggregate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->aggregate(), output);
  }

  // .common.NameOrId alias = 3;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.GroupBy.AggFunc)
}

::google::protobuf::uint8* GroupBy_AggFunc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.GroupBy.AggFunc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vars(static_cast<int>(i)), deterministic, target);
  }

  // .algebra.GroupBy.AggFunc.Aggregate aggregate = 2;
  if (this->aggregate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->aggregate(), target);
  }

  // .common.NameOrId alias = 3;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.GroupBy.AggFunc)
  return target;
}

size_t GroupBy_AggFunc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.GroupBy.AggFunc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.Variable vars = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vars(static_cast<int>(i)));
    }
  }

  // .common.NameOrId alias = 3;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.GroupBy.AggFunc.Aggregate aggregate = 2;
  if (this->aggregate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aggregate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBy_AggFunc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.GroupBy.AggFunc)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBy_AggFunc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupBy_AggFunc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.GroupBy.AggFunc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.GroupBy.AggFunc)
    MergeFrom(*source);
  }
}

void GroupBy_AggFunc::MergeFrom(const GroupBy_AggFunc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.GroupBy.AggFunc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.aggregate() != 0) {
    set_aggregate(from.aggregate());
  }
}

void GroupBy_AggFunc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.GroupBy.AggFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBy_AggFunc::CopyFrom(const GroupBy_AggFunc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.GroupBy.AggFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBy_AggFunc::IsInitialized() const {
  return true;
}

void GroupBy_AggFunc::Swap(GroupBy_AggFunc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBy_AggFunc::InternalSwap(GroupBy_AggFunc* other) {
  using std::swap;
  CastToBase(&vars_)->InternalSwap(CastToBase(&other->vars_));
  swap(alias_, other->alias_);
  swap(aggregate_, other->aggregate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupBy_AggFunc::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupBy_KeyAlias::InitAsDefaultInstance() {
  ::algebra::_GroupBy_KeyAlias_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::Variable*>(
      ::common::Variable::internal_default_instance());
  ::algebra::_GroupBy_KeyAlias_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void GroupBy_KeyAlias::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
void GroupBy_KeyAlias::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBy_KeyAlias::kKeyFieldNumber;
const int GroupBy_KeyAlias::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBy_KeyAlias::GroupBy_KeyAlias()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_GroupBy_KeyAlias.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.GroupBy.KeyAlias)
}
GroupBy_KeyAlias::GroupBy_KeyAlias(const GroupBy_KeyAlias& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::Variable(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.GroupBy.KeyAlias)
}

void GroupBy_KeyAlias::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&key_)) + sizeof(alias_));
}

GroupBy_KeyAlias::~GroupBy_KeyAlias() {
  // @@protoc_insertion_point(destructor:algebra.GroupBy.KeyAlias)
  SharedDtor();
}

void GroupBy_KeyAlias::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete alias_;
}

void GroupBy_KeyAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupBy_KeyAlias::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupBy_KeyAlias& GroupBy_KeyAlias::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_GroupBy_KeyAlias.base);
  return *internal_default_instance();
}


void GroupBy_KeyAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.GroupBy.KeyAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  _internal_metadata_.Clear();
}

bool GroupBy_KeyAlias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.GroupBy.KeyAlias)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Variable key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.GroupBy.KeyAlias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.GroupBy.KeyAlias)
  return false;
#undef DO_
}

void GroupBy_KeyAlias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.GroupBy.KeyAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Variable key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_key(), output);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.GroupBy.KeyAlias)
}

::google::protobuf::uint8* GroupBy_KeyAlias::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.GroupBy.KeyAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Variable key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_key(), deterministic, target);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.GroupBy.KeyAlias)
  return target;
}

size_t GroupBy_KeyAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.GroupBy.KeyAlias)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Variable key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBy_KeyAlias::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.GroupBy.KeyAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBy_KeyAlias* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupBy_KeyAlias>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.GroupBy.KeyAlias)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.GroupBy.KeyAlias)
    MergeFrom(*source);
  }
}

void GroupBy_KeyAlias::MergeFrom(const GroupBy_KeyAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.GroupBy.KeyAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::common::Variable::MergeFrom(from.key());
  }
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
}

void GroupBy_KeyAlias::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.GroupBy.KeyAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBy_KeyAlias::CopyFrom(const GroupBy_KeyAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.GroupBy.KeyAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBy_KeyAlias::IsInitialized() const {
  return true;
}

void GroupBy_KeyAlias::Swap(GroupBy_KeyAlias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBy_KeyAlias::InternalSwap(GroupBy_KeyAlias* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupBy_KeyAlias::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupBy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBy::kMappingsFieldNumber;
const int GroupBy::kFunctionsFieldNumber;
const int GroupBy::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBy::GroupBy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_GroupBy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.GroupBy)
}
GroupBy::GroupBy(const GroupBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mappings_(from.mappings_),
      functions_(from.functions_),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.GroupBy)
}

void GroupBy::SharedCtor() {
}

GroupBy::~GroupBy() {
  // @@protoc_insertion_point(destructor:algebra.GroupBy)
  SharedDtor();
}

void GroupBy::SharedDtor() {
}

void GroupBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupBy::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupBy& GroupBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_GroupBy.base);
  return *internal_default_instance();
}


void GroupBy::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.GroupBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  functions_.Clear();
  meta_data_.Clear();
  _internal_metadata_.Clear();
}

bool GroupBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.GroupBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.GroupBy.KeyAlias mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .algebra.GroupBy.AggFunc functions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .algebra.MetaData meta_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.GroupBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.GroupBy)
  return false;
#undef DO_
}

void GroupBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.GroupBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.GroupBy.KeyAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  // repeated .algebra.GroupBy.AggFunc functions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->functions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->functions(static_cast<int>(i)),
      output);
  }

  // repeated .algebra.MetaData meta_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->meta_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.GroupBy)
}

::google::protobuf::uint8* GroupBy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.GroupBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.GroupBy.KeyAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), deterministic, target);
  }

  // repeated .algebra.GroupBy.AggFunc functions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->functions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->functions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .algebra.MetaData meta_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->meta_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.GroupBy)
  return target;
}

size_t GroupBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.GroupBy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.GroupBy.KeyAlias mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  // repeated .algebra.GroupBy.AggFunc functions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->functions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->functions(static_cast<int>(i)));
    }
  }

  // repeated .algebra.MetaData meta_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->meta_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meta_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.GroupBy)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupBy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.GroupBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.GroupBy)
    MergeFrom(*source);
  }
}

void GroupBy::MergeFrom(const GroupBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.GroupBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
  functions_.MergeFrom(from.functions_);
  meta_data_.MergeFrom(from.meta_data_);
}

void GroupBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.GroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBy::CopyFrom(const GroupBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.GroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBy::IsInitialized() const {
  return true;
}

void GroupBy::Swap(GroupBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBy::InternalSwap(GroupBy* other) {
  using std::swap;
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
  CastToBase(&functions_)->InternalSwap(CastToBase(&other->functions_));
  CastToBase(&meta_data_)->InternalSwap(CastToBase(&other->meta_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupBy::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderBy_OrderingPair::InitAsDefaultInstance() {
  ::algebra::_OrderBy_OrderingPair_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::Variable*>(
      ::common::Variable::internal_default_instance());
}
void OrderBy_OrderingPair::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy_OrderingPair::kKeyFieldNumber;
const int OrderBy_OrderingPair::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy_OrderingPair::OrderBy_OrderingPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_OrderBy_OrderingPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.OrderBy.OrderingPair)
}
OrderBy_OrderingPair::OrderBy_OrderingPair(const OrderBy_OrderingPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::Variable(*from.key_);
  } else {
    key_ = NULL;
  }
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:algebra.OrderBy.OrderingPair)
}

void OrderBy_OrderingPair::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&key_)) + sizeof(order_));
}

OrderBy_OrderingPair::~OrderBy_OrderingPair() {
  // @@protoc_insertion_point(destructor:algebra.OrderBy.OrderingPair)
  SharedDtor();
}

void OrderBy_OrderingPair::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void OrderBy_OrderingPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderBy_OrderingPair::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderBy_OrderingPair& OrderBy_OrderingPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_OrderBy_OrderingPair.base);
  return *internal_default_instance();
}


void OrderBy_OrderingPair::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.OrderBy.OrderingPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  order_ = 0;
  _internal_metadata_.Clear();
}

bool OrderBy_OrderingPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.OrderBy.OrderingPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Variable key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.OrderBy.OrderingPair.Order order = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order(static_cast< ::algebra::OrderBy_OrderingPair_Order >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.OrderBy.OrderingPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.OrderBy.OrderingPair)
  return false;
#undef DO_
}

void OrderBy_OrderingPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.OrderBy.OrderingPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Variable key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_key(), output);
  }

  // .algebra.OrderBy.OrderingPair.Order order = 2;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->order(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.OrderBy.OrderingPair)
}

::google::protobuf::uint8* OrderBy_OrderingPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.OrderBy.OrderingPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Variable key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_key(), deterministic, target);
  }

  // .algebra.OrderBy.OrderingPair.Order order = 2;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->order(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.OrderBy.OrderingPair)
  return target;
}

size_t OrderBy_OrderingPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.OrderBy.OrderingPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Variable key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .algebra.OrderBy.OrderingPair.Order order = 2;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy_OrderingPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.OrderBy.OrderingPair)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy_OrderingPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderBy_OrderingPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.OrderBy.OrderingPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.OrderBy.OrderingPair)
    MergeFrom(*source);
  }
}

void OrderBy_OrderingPair::MergeFrom(const OrderBy_OrderingPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.OrderBy.OrderingPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::common::Variable::MergeFrom(from.key());
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
}

void OrderBy_OrderingPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.OrderBy.OrderingPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy_OrderingPair::CopyFrom(const OrderBy_OrderingPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.OrderBy.OrderingPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy_OrderingPair::IsInitialized() const {
  return true;
}

void OrderBy_OrderingPair::Swap(OrderBy_OrderingPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy_OrderingPair::InternalSwap(OrderBy_OrderingPair* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderBy_OrderingPair::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderBy::InitAsDefaultInstance() {
  ::algebra::_OrderBy_default_instance_._instance.get_mutable()->limit_ = const_cast< ::algebra::Range*>(
      ::algebra::Range::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy::kPairsFieldNumber;
const int OrderBy::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy::OrderBy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_OrderBy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.OrderBy)
}
OrderBy::OrderBy(const OrderBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limit()) {
    limit_ = new ::algebra::Range(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.OrderBy)
}

void OrderBy::SharedCtor() {
  limit_ = NULL;
}

OrderBy::~OrderBy() {
  // @@protoc_insertion_point(destructor:algebra.OrderBy)
  SharedDtor();
}

void OrderBy::SharedDtor() {
  if (this != internal_default_instance()) delete limit_;
}

void OrderBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderBy::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderBy& OrderBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_OrderBy.base);
  return *internal_default_instance();
}


void OrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.OrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.OrderBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.OrderBy.OrderingPair pairs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Range limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.OrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.OrderBy)
  return false;
#undef DO_
}

void OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.OrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.OrderBy.OrderingPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pairs(static_cast<int>(i)),
      output);
  }

  // .algebra.Range limit = 3;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.OrderBy)
}

::google::protobuf::uint8* OrderBy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.OrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.OrderBy.OrderingPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pairs(static_cast<int>(i)), deterministic, target);
  }

  // .algebra.Range limit = 3;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_limit(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.OrderBy)
  return target;
}

size_t OrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.OrderBy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.OrderBy.OrderingPair pairs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pairs(static_cast<int>(i)));
    }
  }

  // .algebra.Range limit = 3;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.OrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderBy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.OrderBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.OrderBy)
    MergeFrom(*source);
  }
}

void OrderBy::MergeFrom(const OrderBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.OrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (from.has_limit()) {
    mutable_limit()->::algebra::Range::MergeFrom(from.limit());
  }
}

void OrderBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy::CopyFrom(const OrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {
  return true;
}

void OrderBy::Swap(OrderBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy::InternalSwap(OrderBy* other) {
  using std::swap;
  CastToBase(&pairs_)->InternalSwap(CastToBase(&other->pairs_));
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderBy::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Dedup::InitAsDefaultInstance() {
}
void Dedup::clear_keys() {
  keys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dedup::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dedup::Dedup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Dedup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Dedup)
}
Dedup::Dedup(const Dedup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.Dedup)
}

void Dedup::SharedCtor() {
}

Dedup::~Dedup() {
  // @@protoc_insertion_point(destructor:algebra.Dedup)
  SharedDtor();
}

void Dedup::SharedDtor() {
}

void Dedup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Dedup::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dedup& Dedup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Dedup.base);
  return *internal_default_instance();
}


void Dedup::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Dedup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool Dedup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Dedup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.Variable keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Dedup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Dedup)
  return false;
#undef DO_
}

void Dedup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Dedup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keys(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Dedup)
}

::google::protobuf::uint8* Dedup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Dedup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keys(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Dedup)
  return target;
}

size_t Dedup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Dedup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.Variable keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dedup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Dedup)
  GOOGLE_DCHECK_NE(&from, this);
  const Dedup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dedup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Dedup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Dedup)
    MergeFrom(*source);
  }
}

void Dedup::MergeFrom(const Dedup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Dedup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void Dedup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Dedup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dedup::CopyFrom(const Dedup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Dedup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dedup::IsInitialized() const {
  return true;
}

void Dedup::Swap(Dedup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dedup::InternalSwap(Dedup* other) {
  using std::swap;
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Dedup::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unfold::InitAsDefaultInstance() {
  ::algebra::_Unfold_default_instance_._instance.get_mutable()->tag_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_Unfold_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_Unfold_default_instance_._instance.get_mutable()->meta_data_ = const_cast< ::algebra::MetaData*>(
      ::algebra::MetaData::internal_default_instance());
}
void Unfold::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
}
void Unfold::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unfold::kTagFieldNumber;
const int Unfold::kAliasFieldNumber;
const int Unfold::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unfold::Unfold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Unfold.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Unfold)
}
Unfold::Unfold(const Unfold& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::common::NameOrId(*from.tag_);
  } else {
    tag_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_meta_data()) {
    meta_data_ = new ::algebra::MetaData(*from.meta_data_);
  } else {
    meta_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Unfold)
}

void Unfold::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_data_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(meta_data_));
}

Unfold::~Unfold() {
  // @@protoc_insertion_point(destructor:algebra.Unfold)
  SharedDtor();
}

void Unfold::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete meta_data_;
}

void Unfold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unfold::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unfold& Unfold::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Unfold.base);
  return *internal_default_instance();
}


void Unfold::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Unfold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) {
    delete meta_data_;
  }
  meta_data_ = NULL;
  _internal_metadata_.Clear();
}

bool Unfold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Unfold)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.NameOrId tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.MetaData meta_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Unfold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Unfold)
  return false;
#undef DO_
}

void Unfold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Unfold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tag(), output);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  // .algebra.MetaData meta_data = 3;
  if (this->has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_meta_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Unfold)
}

::google::protobuf::uint8* Unfold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Unfold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tag(), deterministic, target);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  // .algebra.MetaData meta_data = 3;
  if (this->has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_meta_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Unfold)
  return target;
}

size_t Unfold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Unfold)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.NameOrId tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.MetaData meta_data = 3;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unfold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Unfold)
  GOOGLE_DCHECK_NE(&from, this);
  const Unfold* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unfold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Unfold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Unfold)
    MergeFrom(*source);
  }
}

void Unfold::MergeFrom(const Unfold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Unfold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::common::NameOrId::MergeFrom(from.tag());
  }
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.has_meta_data()) {
    mutable_meta_data()->::algebra::MetaData::MergeFrom(from.meta_data());
  }
}

void Unfold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Unfold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unfold::CopyFrom(const Unfold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Unfold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unfold::IsInitialized() const {
  return true;
}

void Unfold::Swap(Unfold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unfold::InternalSwap(Unfold* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(alias_, other->alias_);
  swap(meta_data_, other->meta_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unfold::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kLowerFieldNumber;
const int Range::kUpperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Range.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lower_, &from.lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_) -
    reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
  // @@protoc_insertion_point(copy_constructor:algebra.Range)
}

void Range::SharedCtor() {
  ::memset(&lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:algebra.Range)
  SharedDtor();
}

void Range::SharedDtor() {
}

void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Range& Range::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Range.base);
  return *internal_default_instance();
}


void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
  _internal_metadata_.Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lower = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 upper = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lower = 1;
  if (this->lower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lower(), output);
  }

  // int32 upper = 2;
  if (this->upper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upper(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lower = 1;
  if (this->lower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lower(), target);
  }

  // int32 upper = 2;
  if (this->upper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upper(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 lower = 1;
  if (this->lower() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lower());
  }

  // int32 upper = 2;
  if (this->upper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upper());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lower() != 0) {
    set_lower(from.lower());
  }
  if (from.upper() != 0) {
    set_upper(from.upper());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  using std::swap;
  swap(lower_, other->lower_);
  swap(upper_, other->upper_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Limit::InitAsDefaultInstance() {
  ::algebra::_Limit_default_instance_._instance.get_mutable()->range_ = const_cast< ::algebra::Range*>(
      ::algebra::Range::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Limit::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Limit::Limit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Limit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Limit)
}
Limit::Limit(const Limit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::algebra::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Limit)
}

void Limit::SharedCtor() {
  range_ = NULL;
}

Limit::~Limit() {
  // @@protoc_insertion_point(destructor:algebra.Limit)
  SharedDtor();
}

void Limit::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Limit::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Limit& Limit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Limit.base);
  return *internal_default_instance();
}


void Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  _internal_metadata_.Clear();
}

bool Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Limit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.Range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Limit)
  return false;
#undef DO_
}

void Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Range range = 1;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Limit)
}

::google::protobuf::uint8* Limit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Range range = 1;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_range(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Limit)
  return target;
}

size_t Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Limit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .algebra.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Limit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  const Limit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Limit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Limit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Limit)
    MergeFrom(*source);
  }
}

void Limit::MergeFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::algebra::Range::MergeFrom(from.range());
  }
}

void Limit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Limit::CopyFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  return true;
}

void Limit::Swap(Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Limit::InternalSwap(Limit* other) {
  using std::swap;
  swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Limit::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexPredicate_Triplet::InitAsDefaultInstance() {
  ::algebra::_IndexPredicate_Triplet_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::Property*>(
      ::common::Property::internal_default_instance());
  ::algebra::_IndexPredicate_Triplet_default_instance_._instance.get_mutable()->value_ = const_cast< ::common::Value*>(
      ::common::Value::internal_default_instance());
  ::algebra::_IndexPredicate_Triplet_default_instance_._instance.get_mutable()->cmp_ = const_cast< ::common::None*>(
      ::common::None::internal_default_instance());
}
void IndexPredicate_Triplet::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
void IndexPredicate_Triplet::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
void IndexPredicate_Triplet::clear_cmp() {
  if (GetArenaNoVirtual() == NULL && cmp_ != NULL) {
    delete cmp_;
  }
  cmp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexPredicate_Triplet::kKeyFieldNumber;
const int IndexPredicate_Triplet::kValueFieldNumber;
const int IndexPredicate_Triplet::kCmpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexPredicate_Triplet::IndexPredicate_Triplet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_IndexPredicate_Triplet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.IndexPredicate.Triplet)
}
IndexPredicate_Triplet::IndexPredicate_Triplet(const IndexPredicate_Triplet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::Property(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::common::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_cmp()) {
    cmp_ = new ::common::None(*from.cmp_);
  } else {
    cmp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.IndexPredicate.Triplet)
}

void IndexPredicate_Triplet::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmp_) -
      reinterpret_cast<char*>(&key_)) + sizeof(cmp_));
}

IndexPredicate_Triplet::~IndexPredicate_Triplet() {
  // @@protoc_insertion_point(destructor:algebra.IndexPredicate.Triplet)
  SharedDtor();
}

void IndexPredicate_Triplet::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete cmp_;
}

void IndexPredicate_Triplet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexPredicate_Triplet::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexPredicate_Triplet& IndexPredicate_Triplet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_IndexPredicate_Triplet.base);
  return *internal_default_instance();
}


void IndexPredicate_Triplet::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.IndexPredicate.Triplet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && cmp_ != NULL) {
    delete cmp_;
  }
  cmp_ = NULL;
  _internal_metadata_.Clear();
}

bool IndexPredicate_Triplet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.IndexPredicate.Triplet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Property key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Value value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.None cmp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.IndexPredicate.Triplet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.IndexPredicate.Triplet)
  return false;
#undef DO_
}

void IndexPredicate_Triplet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.IndexPredicate.Triplet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Property key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_key(), output);
  }

  // .common.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value(), output);
  }

  // .common.None cmp = 3;
  if (this->has_cmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_cmp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.IndexPredicate.Triplet)
}

::google::protobuf::uint8* IndexPredicate_Triplet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.IndexPredicate.Triplet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Property key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_key(), deterministic, target);
  }

  // .common.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value(), deterministic, target);
  }

  // .common.None cmp = 3;
  if (this->has_cmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_cmp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.IndexPredicate.Triplet)
  return target;
}

size_t IndexPredicate_Triplet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.IndexPredicate.Triplet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Property key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .common.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .common.None cmp = 3;
  if (this->has_cmp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cmp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexPredicate_Triplet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.IndexPredicate.Triplet)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexPredicate_Triplet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexPredicate_Triplet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.IndexPredicate.Triplet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.IndexPredicate.Triplet)
    MergeFrom(*source);
  }
}

void IndexPredicate_Triplet::MergeFrom(const IndexPredicate_Triplet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.IndexPredicate.Triplet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::common::Property::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::common::Value::MergeFrom(from.value());
  }
  if (from.has_cmp()) {
    mutable_cmp()->::common::None::MergeFrom(from.cmp());
  }
}

void IndexPredicate_Triplet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.IndexPredicate.Triplet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexPredicate_Triplet::CopyFrom(const IndexPredicate_Triplet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.IndexPredicate.Triplet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexPredicate_Triplet::IsInitialized() const {
  return true;
}

void IndexPredicate_Triplet::Swap(IndexPredicate_Triplet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexPredicate_Triplet::InternalSwap(IndexPredicate_Triplet* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  swap(cmp_, other->cmp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexPredicate_Triplet::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexPredicate_AndPredicate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexPredicate_AndPredicate::kPredicatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexPredicate_AndPredicate::IndexPredicate_AndPredicate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_IndexPredicate_AndPredicate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.IndexPredicate.AndPredicate)
}
IndexPredicate_AndPredicate::IndexPredicate_AndPredicate(const IndexPredicate_AndPredicate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      predicates_(from.predicates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.IndexPredicate.AndPredicate)
}

void IndexPredicate_AndPredicate::SharedCtor() {
}

IndexPredicate_AndPredicate::~IndexPredicate_AndPredicate() {
  // @@protoc_insertion_point(destructor:algebra.IndexPredicate.AndPredicate)
  SharedDtor();
}

void IndexPredicate_AndPredicate::SharedDtor() {
}

void IndexPredicate_AndPredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexPredicate_AndPredicate::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexPredicate_AndPredicate& IndexPredicate_AndPredicate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_IndexPredicate_AndPredicate.base);
  return *internal_default_instance();
}


void IndexPredicate_AndPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.IndexPredicate.AndPredicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicates_.Clear();
  _internal_metadata_.Clear();
}

bool IndexPredicate_AndPredicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.IndexPredicate.AndPredicate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.IndexPredicate.Triplet predicates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_predicates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.IndexPredicate.AndPredicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.IndexPredicate.AndPredicate)
  return false;
#undef DO_
}

void IndexPredicate_AndPredicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.IndexPredicate.AndPredicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.IndexPredicate.Triplet predicates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->predicates(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.IndexPredicate.AndPredicate)
}

::google::protobuf::uint8* IndexPredicate_AndPredicate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.IndexPredicate.AndPredicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.IndexPredicate.Triplet predicates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->predicates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.IndexPredicate.AndPredicate)
  return target;
}

size_t IndexPredicate_AndPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.IndexPredicate.AndPredicate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.IndexPredicate.Triplet predicates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->predicates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predicates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexPredicate_AndPredicate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.IndexPredicate.AndPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexPredicate_AndPredicate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexPredicate_AndPredicate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.IndexPredicate.AndPredicate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.IndexPredicate.AndPredicate)
    MergeFrom(*source);
  }
}

void IndexPredicate_AndPredicate::MergeFrom(const IndexPredicate_AndPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.IndexPredicate.AndPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predicates_.MergeFrom(from.predicates_);
}

void IndexPredicate_AndPredicate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.IndexPredicate.AndPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexPredicate_AndPredicate::CopyFrom(const IndexPredicate_AndPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.IndexPredicate.AndPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexPredicate_AndPredicate::IsInitialized() const {
  return true;
}

void IndexPredicate_AndPredicate::Swap(IndexPredicate_AndPredicate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexPredicate_AndPredicate::InternalSwap(IndexPredicate_AndPredicate* other) {
  using std::swap;
  CastToBase(&predicates_)->InternalSwap(CastToBase(&other->predicates_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexPredicate_AndPredicate::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexPredicate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexPredicate::kOrPredicatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexPredicate::IndexPredicate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_IndexPredicate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.IndexPredicate)
}
IndexPredicate::IndexPredicate(const IndexPredicate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      or_predicates_(from.or_predicates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.IndexPredicate)
}

void IndexPredicate::SharedCtor() {
}

IndexPredicate::~IndexPredicate() {
  // @@protoc_insertion_point(destructor:algebra.IndexPredicate)
  SharedDtor();
}

void IndexPredicate::SharedDtor() {
}

void IndexPredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexPredicate::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexPredicate& IndexPredicate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_IndexPredicate.base);
  return *internal_default_instance();
}


void IndexPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.IndexPredicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  or_predicates_.Clear();
  _internal_metadata_.Clear();
}

bool IndexPredicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.IndexPredicate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.IndexPredicate.AndPredicate or_predicates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_or_predicates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.IndexPredicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.IndexPredicate)
  return false;
#undef DO_
}

void IndexPredicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.IndexPredicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.IndexPredicate.AndPredicate or_predicates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->or_predicates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->or_predicates(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.IndexPredicate)
}

::google::protobuf::uint8* IndexPredicate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.IndexPredicate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.IndexPredicate.AndPredicate or_predicates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->or_predicates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->or_predicates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.IndexPredicate)
  return target;
}

size_t IndexPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.IndexPredicate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.IndexPredicate.AndPredicate or_predicates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->or_predicates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->or_predicates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexPredicate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.IndexPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexPredicate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexPredicate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.IndexPredicate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.IndexPredicate)
    MergeFrom(*source);
  }
}

void IndexPredicate::MergeFrom(const IndexPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.IndexPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  or_predicates_.MergeFrom(from.or_predicates_);
}

void IndexPredicate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.IndexPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexPredicate::CopyFrom(const IndexPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.IndexPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexPredicate::IsInitialized() const {
  return true;
}

void IndexPredicate::Swap(IndexPredicate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexPredicate::InternalSwap(IndexPredicate* other) {
  using std::swap;
  CastToBase(&or_predicates_)->InternalSwap(CastToBase(&other->or_predicates_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexPredicate::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

QueryParams_ExtraEntry_DoNotUse::QueryParams_ExtraEntry_DoNotUse() {}
QueryParams_ExtraEntry_DoNotUse::QueryParams_ExtraEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void QueryParams_ExtraEntry_DoNotUse::MergeFrom(const QueryParams_ExtraEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata QueryParams_ExtraEntry_DoNotUse::GetMetadata() const {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[19];
}
void QueryParams_ExtraEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void QueryParams::InitAsDefaultInstance() {
  ::algebra::_QueryParams_default_instance_._instance.get_mutable()->limit_ = const_cast< ::algebra::Range*>(
      ::algebra::Range::internal_default_instance());
  ::algebra::_QueryParams_default_instance_._instance.get_mutable()->predicate_ = const_cast< ::common::Expression*>(
      ::common::Expression::internal_default_instance());
}
void QueryParams::clear_tables() {
  tables_.Clear();
}
void QueryParams::clear_columns() {
  columns_.Clear();
}
void QueryParams::clear_predicate() {
  if (GetArenaNoVirtual() == NULL && predicate_ != NULL) {
    delete predicate_;
  }
  predicate_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryParams::kTablesFieldNumber;
const int QueryParams::kColumnsFieldNumber;
const int QueryParams::kIsAllColumnsFieldNumber;
const int QueryParams::kLimitFieldNumber;
const int QueryParams::kPredicateFieldNumber;
const int QueryParams::kSampleRatioFieldNumber;
const int QueryParams::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryParams::QueryParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_QueryParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.QueryParams)
}
QueryParams::QueryParams(const QueryParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tables_(from.tables_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_.MergeFrom(from.extra_);
  if (from.has_limit()) {
    limit_ = new ::algebra::Range(*from.limit_);
  } else {
    limit_ = NULL;
  }
  if (from.has_predicate()) {
    predicate_ = new ::common::Expression(*from.predicate_);
  } else {
    predicate_ = NULL;
  }
  ::memcpy(&sample_ratio_, &from.sample_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_all_columns_) -
    reinterpret_cast<char*>(&sample_ratio_)) + sizeof(is_all_columns_));
  // @@protoc_insertion_point(copy_constructor:algebra.QueryParams)
}

void QueryParams::SharedCtor() {
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_all_columns_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(is_all_columns_));
}

QueryParams::~QueryParams() {
  // @@protoc_insertion_point(destructor:algebra.QueryParams)
  SharedDtor();
}

void QueryParams::SharedDtor() {
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete predicate_;
}

void QueryParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueryParams::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryParams& QueryParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_QueryParams.base);
  return *internal_default_instance();
}


void QueryParams::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.QueryParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  columns_.Clear();
  extra_.Clear();
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && predicate_ != NULL) {
    delete predicate_;
  }
  predicate_ = NULL;
  ::memset(&sample_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_all_columns_) -
      reinterpret_cast<char*>(&sample_ratio_)) + sizeof(is_all_columns_));
  _internal_metadata_.Clear();
}

bool QueryParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.QueryParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.NameOrId tables = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.NameOrId columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_all_columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_all_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Range limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Expression predicate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_predicate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_ratio = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> extra = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          QueryParams_ExtraEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              QueryParams_ExtraEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&extra_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "algebra.QueryParams.ExtraEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "algebra.QueryParams.ExtraEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.QueryParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.QueryParams)
  return false;
#undef DO_
}

void QueryParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.QueryParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NameOrId tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tables(static_cast<int>(i)),
      output);
  }

  // repeated .common.NameOrId columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->columns(static_cast<int>(i)),
      output);
  }

  // bool is_all_columns = 3;
  if (this->is_all_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_all_columns(), output);
  }

  // .algebra.Range limit = 4;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_limit(), output);
  }

  // .common.Expression predicate = 5;
  if (this->has_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_predicate(), output);
  }

  // double sample_ratio = 6;
  if (this->sample_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sample_ratio(), output);
  }

  // map<string, string> extra = 7;
  if (!this->extra().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "algebra.QueryParams.ExtraEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "algebra.QueryParams.ExtraEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->extra().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extra().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extra().begin();
          it != this->extra().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<QueryParams_ExtraEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extra_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<QueryParams_ExtraEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extra().begin();
          it != this->extra().end(); ++it) {
        entry.reset(extra_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.QueryParams)
}

::google::protobuf::uint8* QueryParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.QueryParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NameOrId tables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tables(static_cast<int>(i)), deterministic, target);
  }

  // repeated .common.NameOrId columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  // bool is_all_columns = 3;
  if (this->is_all_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_all_columns(), target);
  }

  // .algebra.Range limit = 4;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_limit(), deterministic, target);
  }

  // .common.Expression predicate = 5;
  if (this->has_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_predicate(), deterministic, target);
  }

  // double sample_ratio = 6;
  if (this->sample_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sample_ratio(), target);
  }

  // map<string, string> extra = 7;
  if (!this->extra().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "algebra.QueryParams.ExtraEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "algebra.QueryParams.ExtraEntry.value");
      }
    };

    if (deterministic &&
        this->extra().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->extra().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extra().begin();
          it != this->extra().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<QueryParams_ExtraEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extra_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<QueryParams_ExtraEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extra().begin();
          it != this->extra().end(); ++it) {
        entry.reset(extra_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.QueryParams)
  return target;
}

size_t QueryParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.QueryParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.NameOrId tables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tables(static_cast<int>(i)));
    }
  }

  // repeated .common.NameOrId columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // map<string, string> extra = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extra_size());
  {
    ::std::unique_ptr<QueryParams_ExtraEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->extra().begin();
        it != this->extra().end(); ++it) {
      entry.reset(extra_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .algebra.Range limit = 4;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .common.Expression predicate = 5;
  if (this->has_predicate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *predicate_);
  }

  // double sample_ratio = 6;
  if (this->sample_ratio() != 0) {
    total_size += 1 + 8;
  }

  // bool is_all_columns = 3;
  if (this->is_all_columns() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.QueryParams)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.QueryParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.QueryParams)
    MergeFrom(*source);
  }
}

void QueryParams::MergeFrom(const QueryParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.QueryParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  columns_.MergeFrom(from.columns_);
  extra_.MergeFrom(from.extra_);
  if (from.has_limit()) {
    mutable_limit()->::algebra::Range::MergeFrom(from.limit());
  }
  if (from.has_predicate()) {
    mutable_predicate()->::common::Expression::MergeFrom(from.predicate());
  }
  if (from.sample_ratio() != 0) {
    set_sample_ratio(from.sample_ratio());
  }
  if (from.is_all_columns() != 0) {
    set_is_all_columns(from.is_all_columns());
  }
}

void QueryParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.QueryParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryParams::CopyFrom(const QueryParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.QueryParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParams::IsInitialized() const {
  return true;
}

void QueryParams::Swap(QueryParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryParams::InternalSwap(QueryParams* other) {
  using std::swap;
  CastToBase(&tables_)->InternalSwap(CastToBase(&other->tables_));
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  extra_.Swap(&other->extra_);
  swap(limit_, other->limit_);
  swap(predicate_, other->predicate_);
  swap(sample_ratio_, other->sample_ratio_);
  swap(is_all_columns_, other->is_all_columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueryParams::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scan::InitAsDefaultInstance() {
  ::algebra::_Scan_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_Scan_default_instance_._instance.get_mutable()->params_ = const_cast< ::algebra::QueryParams*>(
      ::algebra::QueryParams::internal_default_instance());
  ::algebra::_Scan_default_instance_._instance.get_mutable()->idx_predicate_ = const_cast< ::algebra::IndexPredicate*>(
      ::algebra::IndexPredicate::internal_default_instance());
  ::algebra::_Scan_default_instance_._instance.get_mutable()->meta_data_ = const_cast< ::algebra::MetaData*>(
      ::algebra::MetaData::internal_default_instance());
}
void Scan::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scan::kScanOptFieldNumber;
const int Scan::kAliasFieldNumber;
const int Scan::kParamsFieldNumber;
const int Scan::kIdxPredicateFieldNumber;
const int Scan::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scan::Scan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Scan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Scan)
}
Scan::Scan(const Scan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::algebra::QueryParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_idx_predicate()) {
    idx_predicate_ = new ::algebra::IndexPredicate(*from.idx_predicate_);
  } else {
    idx_predicate_ = NULL;
  }
  if (from.has_meta_data()) {
    meta_data_ = new ::algebra::MetaData(*from.meta_data_);
  } else {
    meta_data_ = NULL;
  }
  scan_opt_ = from.scan_opt_;
  // @@protoc_insertion_point(copy_constructor:algebra.Scan)
}

void Scan::SharedCtor() {
  ::memset(&alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scan_opt_) -
      reinterpret_cast<char*>(&alias_)) + sizeof(scan_opt_));
}

Scan::~Scan() {
  // @@protoc_insertion_point(destructor:algebra.Scan)
  SharedDtor();
}

void Scan::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete idx_predicate_;
  if (this != internal_default_instance()) delete meta_data_;
}

void Scan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scan::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scan& Scan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Scan.base);
  return *internal_default_instance();
}


void Scan::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && idx_predicate_ != NULL) {
    delete idx_predicate_;
  }
  idx_predicate_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) {
    delete meta_data_;
  }
  meta_data_ = NULL;
  scan_opt_ = 0;
  _internal_metadata_.Clear();
}

bool Scan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Scan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.Scan.ScanOpt scan_opt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scan_opt(static_cast< ::algebra::Scan_ScanOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.QueryParams params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.IndexPredicate idx_predicate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_idx_predicate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.MetaData meta_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Scan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Scan)
  return false;
#undef DO_
}

void Scan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Scan.ScanOpt scan_opt = 1;
  if (this->scan_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scan_opt(), output);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_params(), output);
  }

  // .algebra.IndexPredicate idx_predicate = 4;
  if (this->has_idx_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_idx_predicate(), output);
  }

  // .algebra.MetaData meta_data = 5;
  if (this->has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_meta_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Scan)
}

::google::protobuf::uint8* Scan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Scan.ScanOpt scan_opt = 1;
  if (this->scan_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scan_opt(), target);
  }

  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_params(), deterministic, target);
  }

  // .algebra.IndexPredicate idx_predicate = 4;
  if (this->has_idx_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_idx_predicate(), deterministic, target);
  }

  // .algebra.MetaData meta_data = 5;
  if (this->has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_meta_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Scan)
  return target;
}

size_t Scan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Scan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.NameOrId alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .algebra.IndexPredicate idx_predicate = 4;
  if (this->has_idx_predicate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *idx_predicate_);
  }

  // .algebra.MetaData meta_data = 5;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  // .algebra.Scan.ScanOpt scan_opt = 1;
  if (this->scan_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Scan)
  GOOGLE_DCHECK_NE(&from, this);
  const Scan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Scan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Scan)
    MergeFrom(*source);
  }
}

void Scan::MergeFrom(const Scan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Scan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.has_params()) {
    mutable_params()->::algebra::QueryParams::MergeFrom(from.params());
  }
  if (from.has_idx_predicate()) {
    mutable_idx_predicate()->::algebra::IndexPredicate::MergeFrom(from.idx_predicate());
  }
  if (from.has_meta_data()) {
    mutable_meta_data()->::algebra::MetaData::MergeFrom(from.meta_data());
  }
  if (from.scan_opt() != 0) {
    set_scan_opt(from.scan_opt());
  }
}

void Scan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scan::CopyFrom(const Scan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scan::IsInitialized() const {
  return true;
}

void Scan::Swap(Scan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scan::InternalSwap(Scan* other) {
  using std::swap;
  swap(alias_, other->alias_);
  swap(params_, other->params_);
  swap(idx_predicate_, other->idx_predicate_);
  swap(meta_data_, other->meta_data_);
  swap(scan_opt_, other->scan_opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scan::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetV::InitAsDefaultInstance() {
  ::algebra::_GetV_default_instance_._instance.get_mutable()->tag_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_GetV_default_instance_._instance.get_mutable()->params_ = const_cast< ::algebra::QueryParams*>(
      ::algebra::QueryParams::internal_default_instance());
  ::algebra::_GetV_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_GetV_default_instance_._instance.get_mutable()->meta_data_ = const_cast< ::algebra::MetaData*>(
      ::algebra::MetaData::internal_default_instance());
}
void GetV::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
}
void GetV::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetV::kTagFieldNumber;
const int GetV::kOptFieldNumber;
const int GetV::kParamsFieldNumber;
const int GetV::kAliasFieldNumber;
const int GetV::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetV::GetV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_GetV.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.GetV)
}
GetV::GetV(const GetV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::common::NameOrId(*from.tag_);
  } else {
    tag_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::algebra::QueryParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_meta_data()) {
    meta_data_ = new ::algebra::MetaData(*from.meta_data_);
  } else {
    meta_data_ = NULL;
  }
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:algebra.GetV)
}

void GetV::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(opt_));
}

GetV::~GetV() {
  // @@protoc_insertion_point(destructor:algebra.GetV)
  SharedDtor();
}

void GetV::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete meta_data_;
}

void GetV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetV::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetV& GetV::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_GetV.base);
  return *internal_default_instance();
}


void GetV::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) {
    delete meta_data_;
  }
  meta_data_ = NULL;
  opt_ = 0;
  _internal_metadata_.Clear();
}

bool GetV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.GetV)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.NameOrId tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.GetV.VOpt opt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opt(static_cast< ::algebra::GetV_VOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.QueryParams params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.MetaData meta_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.GetV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.GetV)
  return false;
#undef DO_
}

void GetV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tag(), output);
  }

  // .algebra.GetV.VOpt opt = 2;
  if (this->opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opt(), output);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_params(), output);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_alias(), output);
  }

  // .algebra.MetaData meta_data = 5;
  if (this->has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_meta_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.GetV)
}

::google::protobuf::uint8* GetV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tag(), deterministic, target);
  }

  // .algebra.GetV.VOpt opt = 2;
  if (this->opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opt(), target);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_params(), deterministic, target);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_alias(), deterministic, target);
  }

  // .algebra.MetaData meta_data = 5;
  if (this->has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_meta_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.GetV)
  return target;
}

size_t GetV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.GetV)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.NameOrId tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.MetaData meta_data = 5;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  // .algebra.GetV.VOpt opt = 2;
  if (this->opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.GetV)
  GOOGLE_DCHECK_NE(&from, this);
  const GetV* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.GetV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.GetV)
    MergeFrom(*source);
  }
}

void GetV::MergeFrom(const GetV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.GetV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::common::NameOrId::MergeFrom(from.tag());
  }
  if (from.has_params()) {
    mutable_params()->::algebra::QueryParams::MergeFrom(from.params());
  }
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.has_meta_data()) {
    mutable_meta_data()->::algebra::MetaData::MergeFrom(from.meta_data());
  }
  if (from.opt() != 0) {
    set_opt(from.opt());
  }
}

void GetV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.GetV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetV::CopyFrom(const GetV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.GetV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetV::IsInitialized() const {
  return true;
}

void GetV::Swap(GetV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetV::InternalSwap(GetV* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(params_, other->params_);
  swap(alias_, other->alias_);
  swap(meta_data_, other->meta_data_);
  swap(opt_, other->opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetV::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void As::InitAsDefaultInstance() {
  ::algebra::_As_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void As::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int As::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

As::As()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_As.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.As)
}
As::As(const As& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.As)
}

void As::SharedCtor() {
  alias_ = NULL;
}

As::~As() {
  // @@protoc_insertion_point(destructor:algebra.As)
  SharedDtor();
}

void As::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
}

void As::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* As::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const As& As::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_As.base);
  return *internal_default_instance();
}


void As::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.As)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  _internal_metadata_.Clear();
}

bool As::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.As)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.NameOrId alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.As)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.As)
  return false;
#undef DO_
}

void As::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.As)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId alias = 1;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.As)
}

::google::protobuf::uint8* As::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.As)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId alias = 1;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.As)
  return target;
}

size_t As::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.As)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.NameOrId alias = 1;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void As::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.As)
  GOOGLE_DCHECK_NE(&from, this);
  const As* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const As>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.As)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.As)
    MergeFrom(*source);
  }
}

void As::MergeFrom(const As& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.As)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
}

void As::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.As)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void As::CopyFrom(const As& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.As)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool As::IsInitialized() const {
  return true;
}

void As::Swap(As* other) {
  if (other == this) return;
  InternalSwap(other);
}
void As::InternalSwap(As* other) {
  using std::swap;
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata As::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EdgeExpand::InitAsDefaultInstance() {
  ::algebra::_EdgeExpand_default_instance_._instance.get_mutable()->v_tag_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_EdgeExpand_default_instance_._instance.get_mutable()->params_ = const_cast< ::algebra::QueryParams*>(
      ::algebra::QueryParams::internal_default_instance());
  ::algebra::_EdgeExpand_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_EdgeExpand_default_instance_._instance.get_mutable()->meta_data_ = const_cast< ::algebra::MetaData*>(
      ::algebra::MetaData::internal_default_instance());
}
void EdgeExpand::clear_v_tag() {
  if (GetArenaNoVirtual() == NULL && v_tag_ != NULL) {
    delete v_tag_;
  }
  v_tag_ = NULL;
}
void EdgeExpand::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeExpand::kVTagFieldNumber;
const int EdgeExpand::kDirectionFieldNumber;
const int EdgeExpand::kParamsFieldNumber;
const int EdgeExpand::kAliasFieldNumber;
const int EdgeExpand::kExpandOptFieldNumber;
const int EdgeExpand::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeExpand::EdgeExpand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_EdgeExpand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.EdgeExpand)
}
EdgeExpand::EdgeExpand(const EdgeExpand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_v_tag()) {
    v_tag_ = new ::common::NameOrId(*from.v_tag_);
  } else {
    v_tag_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::algebra::QueryParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_meta_data()) {
    meta_data_ = new ::algebra::MetaData(*from.meta_data_);
  } else {
    meta_data_ = NULL;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&expand_opt_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(expand_opt_));
  // @@protoc_insertion_point(copy_constructor:algebra.EdgeExpand)
}

void EdgeExpand::SharedCtor() {
  ::memset(&v_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_opt_) -
      reinterpret_cast<char*>(&v_tag_)) + sizeof(expand_opt_));
}

EdgeExpand::~EdgeExpand() {
  // @@protoc_insertion_point(destructor:algebra.EdgeExpand)
  SharedDtor();
}

void EdgeExpand::SharedDtor() {
  if (this != internal_default_instance()) delete v_tag_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete meta_data_;
}

void EdgeExpand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EdgeExpand::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgeExpand& EdgeExpand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_EdgeExpand.base);
  return *internal_default_instance();
}


void EdgeExpand::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.EdgeExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && v_tag_ != NULL) {
    delete v_tag_;
  }
  v_tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) {
    delete meta_data_;
  }
  meta_data_ = NULL;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_opt_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(expand_opt_));
  _internal_metadata_.Clear();
}

bool EdgeExpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.EdgeExpand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.NameOrId v_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.EdgeExpand.Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::algebra::EdgeExpand_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.QueryParams params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.EdgeExpand.ExpandOpt expand_opt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_expand_opt(static_cast< ::algebra::EdgeExpand_ExpandOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.MetaData meta_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.EdgeExpand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.EdgeExpand)
  return false;
#undef DO_
}

void EdgeExpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.EdgeExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId v_tag = 1;
  if (this->has_v_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_v_tag(), output);
  }

  // .algebra.EdgeExpand.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_params(), output);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_alias(), output);
  }

  // .algebra.EdgeExpand.ExpandOpt expand_opt = 5;
  if (this->expand_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->expand_opt(), output);
  }

  // .algebra.MetaData meta_data = 6;
  if (this->has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_meta_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.EdgeExpand)
}

::google::protobuf::uint8* EdgeExpand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.EdgeExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId v_tag = 1;
  if (this->has_v_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_v_tag(), deterministic, target);
  }

  // .algebra.EdgeExpand.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_params(), deterministic, target);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_alias(), deterministic, target);
  }

  // .algebra.EdgeExpand.ExpandOpt expand_opt = 5;
  if (this->expand_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->expand_opt(), target);
  }

  // .algebra.MetaData meta_data = 6;
  if (this->has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_meta_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.EdgeExpand)
  return target;
}

size_t EdgeExpand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.EdgeExpand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.NameOrId v_tag = 1;
  if (this->has_v_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *v_tag_);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.MetaData meta_data = 6;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  // .algebra.EdgeExpand.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .algebra.EdgeExpand.ExpandOpt expand_opt = 5;
  if (this->expand_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->expand_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeExpand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.EdgeExpand)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeExpand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeExpand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.EdgeExpand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.EdgeExpand)
    MergeFrom(*source);
  }
}

void EdgeExpand::MergeFrom(const EdgeExpand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.EdgeExpand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_v_tag()) {
    mutable_v_tag()->::common::NameOrId::MergeFrom(from.v_tag());
  }
  if (from.has_params()) {
    mutable_params()->::algebra::QueryParams::MergeFrom(from.params());
  }
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.has_meta_data()) {
    mutable_meta_data()->::algebra::MetaData::MergeFrom(from.meta_data());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.expand_opt() != 0) {
    set_expand_opt(from.expand_opt());
  }
}

void EdgeExpand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.EdgeExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeExpand::CopyFrom(const EdgeExpand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.EdgeExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeExpand::IsInitialized() const {
  return true;
}

void EdgeExpand::Swap(EdgeExpand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeExpand::InternalSwap(EdgeExpand* other) {
  using std::swap;
  swap(v_tag_, other->v_tag_);
  swap(params_, other->params_);
  swap(alias_, other->alias_);
  swap(meta_data_, other->meta_data_);
  swap(direction_, other->direction_);
  swap(expand_opt_, other->expand_opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EdgeExpand::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathExpand_ExpandBase::InitAsDefaultInstance() {
  ::algebra::_PathExpand_ExpandBase_default_instance_._instance.get_mutable()->edge_expand_ = const_cast< ::algebra::EdgeExpand*>(
      ::algebra::EdgeExpand::internal_default_instance());
  ::algebra::_PathExpand_ExpandBase_default_instance_._instance.get_mutable()->get_v_ = const_cast< ::algebra::GetV*>(
      ::algebra::GetV::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathExpand_ExpandBase::kEdgeExpandFieldNumber;
const int PathExpand_ExpandBase::kGetVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathExpand_ExpandBase::PathExpand_ExpandBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_PathExpand_ExpandBase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.PathExpand.ExpandBase)
}
PathExpand_ExpandBase::PathExpand_ExpandBase(const PathExpand_ExpandBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_edge_expand()) {
    edge_expand_ = new ::algebra::EdgeExpand(*from.edge_expand_);
  } else {
    edge_expand_ = NULL;
  }
  if (from.has_get_v()) {
    get_v_ = new ::algebra::GetV(*from.get_v_);
  } else {
    get_v_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.PathExpand.ExpandBase)
}

void PathExpand_ExpandBase::SharedCtor() {
  ::memset(&edge_expand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_v_) -
      reinterpret_cast<char*>(&edge_expand_)) + sizeof(get_v_));
}

PathExpand_ExpandBase::~PathExpand_ExpandBase() {
  // @@protoc_insertion_point(destructor:algebra.PathExpand.ExpandBase)
  SharedDtor();
}

void PathExpand_ExpandBase::SharedDtor() {
  if (this != internal_default_instance()) delete edge_expand_;
  if (this != internal_default_instance()) delete get_v_;
}

void PathExpand_ExpandBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathExpand_ExpandBase::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathExpand_ExpandBase& PathExpand_ExpandBase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_PathExpand_ExpandBase.base);
  return *internal_default_instance();
}


void PathExpand_ExpandBase::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.PathExpand.ExpandBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && edge_expand_ != NULL) {
    delete edge_expand_;
  }
  edge_expand_ = NULL;
  if (GetArenaNoVirtual() == NULL && get_v_ != NULL) {
    delete get_v_;
  }
  get_v_ = NULL;
  _internal_metadata_.Clear();
}

bool PathExpand_ExpandBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.PathExpand.ExpandBase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.EdgeExpand edge_expand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge_expand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.GetV get_V = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.PathExpand.ExpandBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.PathExpand.ExpandBase)
  return false;
#undef DO_
}

void PathExpand_ExpandBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.PathExpand.ExpandBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.EdgeExpand edge_expand = 1;
  if (this->has_edge_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_edge_expand(), output);
  }

  // .algebra.GetV get_V = 2;
  if (this->has_get_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_v(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.PathExpand.ExpandBase)
}

::google::protobuf::uint8* PathExpand_ExpandBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.PathExpand.ExpandBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.EdgeExpand edge_expand = 1;
  if (this->has_edge_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_edge_expand(), deterministic, target);
  }

  // .algebra.GetV get_V = 2;
  if (this->has_get_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_v(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.PathExpand.ExpandBase)
  return target;
}

size_t PathExpand_ExpandBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.PathExpand.ExpandBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .algebra.EdgeExpand edge_expand = 1;
  if (this->has_edge_expand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *edge_expand_);
  }

  // .algebra.GetV get_V = 2;
  if (this->has_get_v()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_v_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathExpand_ExpandBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.PathExpand.ExpandBase)
  GOOGLE_DCHECK_NE(&from, this);
  const PathExpand_ExpandBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathExpand_ExpandBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.PathExpand.ExpandBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.PathExpand.ExpandBase)
    MergeFrom(*source);
  }
}

void PathExpand_ExpandBase::MergeFrom(const PathExpand_ExpandBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.PathExpand.ExpandBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_edge_expand()) {
    mutable_edge_expand()->::algebra::EdgeExpand::MergeFrom(from.edge_expand());
  }
  if (from.has_get_v()) {
    mutable_get_v()->::algebra::GetV::MergeFrom(from.get_v());
  }
}

void PathExpand_ExpandBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.PathExpand.ExpandBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathExpand_ExpandBase::CopyFrom(const PathExpand_ExpandBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.PathExpand.ExpandBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathExpand_ExpandBase::IsInitialized() const {
  return true;
}

void PathExpand_ExpandBase::Swap(PathExpand_ExpandBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathExpand_ExpandBase::InternalSwap(PathExpand_ExpandBase* other) {
  using std::swap;
  swap(edge_expand_, other->edge_expand_);
  swap(get_v_, other->get_v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathExpand_ExpandBase::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathExpand::InitAsDefaultInstance() {
  ::algebra::_PathExpand_default_instance_._instance.get_mutable()->base_ = const_cast< ::algebra::PathExpand_ExpandBase*>(
      ::algebra::PathExpand_ExpandBase::internal_default_instance());
  ::algebra::_PathExpand_default_instance_._instance.get_mutable()->start_tag_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_PathExpand_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_PathExpand_default_instance_._instance.get_mutable()->hop_range_ = const_cast< ::algebra::Range*>(
      ::algebra::Range::internal_default_instance());
  ::algebra::_PathExpand_default_instance_._instance.get_mutable()->condition_ = const_cast< ::common::Expression*>(
      ::common::Expression::internal_default_instance());
}
void PathExpand::clear_start_tag() {
  if (GetArenaNoVirtual() == NULL && start_tag_ != NULL) {
    delete start_tag_;
  }
  start_tag_ = NULL;
}
void PathExpand::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
void PathExpand::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathExpand::kBaseFieldNumber;
const int PathExpand::kStartTagFieldNumber;
const int PathExpand::kAliasFieldNumber;
const int PathExpand::kHopRangeFieldNumber;
const int PathExpand::kPathOptFieldNumber;
const int PathExpand::kResultOptFieldNumber;
const int PathExpand::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathExpand::PathExpand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_PathExpand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.PathExpand)
}
PathExpand::PathExpand(const PathExpand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::algebra::PathExpand_ExpandBase(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_start_tag()) {
    start_tag_ = new ::common::NameOrId(*from.start_tag_);
  } else {
    start_tag_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_hop_range()) {
    hop_range_ = new ::algebra::Range(*from.hop_range_);
  } else {
    hop_range_ = NULL;
  }
  if (from.has_condition()) {
    condition_ = new ::common::Expression(*from.condition_);
  } else {
    condition_ = NULL;
  }
  ::memcpy(&path_opt_, &from.path_opt_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_opt_) -
    reinterpret_cast<char*>(&path_opt_)) + sizeof(result_opt_));
  // @@protoc_insertion_point(copy_constructor:algebra.PathExpand)
}

void PathExpand::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_opt_) -
      reinterpret_cast<char*>(&base_)) + sizeof(result_opt_));
}

PathExpand::~PathExpand() {
  // @@protoc_insertion_point(destructor:algebra.PathExpand)
  SharedDtor();
}

void PathExpand::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete start_tag_;
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete hop_range_;
  if (this != internal_default_instance()) delete condition_;
}

void PathExpand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathExpand::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathExpand& PathExpand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_PathExpand.base);
  return *internal_default_instance();
}


void PathExpand::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.PathExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_tag_ != NULL) {
    delete start_tag_;
  }
  start_tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && hop_range_ != NULL) {
    delete hop_range_;
  }
  hop_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  ::memset(&path_opt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_opt_) -
      reinterpret_cast<char*>(&path_opt_)) + sizeof(result_opt_));
  _internal_metadata_.Clear();
}

bool PathExpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.PathExpand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.PathExpand.ExpandBase base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId start_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Range hop_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hop_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.PathExpand.PathOpt path_opt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_path_opt(static_cast< ::algebra::PathExpand_PathOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.PathExpand.ResultOpt result_opt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_opt(static_cast< ::algebra::PathExpand_ResultOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Expression condition = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.PathExpand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.PathExpand)
  return false;
#undef DO_
}

void PathExpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.PathExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.PathExpand.ExpandBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_base(), output);
  }

  // .common.NameOrId start_tag = 2;
  if (this->has_start_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start_tag(), output);
  }

  // .common.NameOrId alias = 3;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_alias(), output);
  }

  // .algebra.Range hop_range = 4;
  if (this->has_hop_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_hop_range(), output);
  }

  // .algebra.PathExpand.PathOpt path_opt = 5;
  if (this->path_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->path_opt(), output);
  }

  // .algebra.PathExpand.ResultOpt result_opt = 6;
  if (this->result_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->result_opt(), output);
  }

  // .common.Expression condition = 7;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_condition(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.PathExpand)
}

::google::protobuf::uint8* PathExpand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.PathExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.PathExpand.ExpandBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_base(), deterministic, target);
  }

  // .common.NameOrId start_tag = 2;
  if (this->has_start_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start_tag(), deterministic, target);
  }

  // .common.NameOrId alias = 3;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_alias(), deterministic, target);
  }

  // .algebra.Range hop_range = 4;
  if (this->has_hop_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_hop_range(), deterministic, target);
  }

  // .algebra.PathExpand.PathOpt path_opt = 5;
  if (this->path_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->path_opt(), target);
  }

  // .algebra.PathExpand.ResultOpt result_opt = 6;
  if (this->result_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->result_opt(), target);
  }

  // .common.Expression condition = 7;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_condition(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.PathExpand)
  return target;
}

size_t PathExpand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.PathExpand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .algebra.PathExpand.ExpandBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .common.NameOrId start_tag = 2;
  if (this->has_start_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_tag_);
  }

  // .common.NameOrId alias = 3;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.Range hop_range = 4;
  if (this->has_hop_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hop_range_);
  }

  // .common.Expression condition = 7;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .algebra.PathExpand.PathOpt path_opt = 5;
  if (this->path_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->path_opt());
  }

  // .algebra.PathExpand.ResultOpt result_opt = 6;
  if (this->result_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathExpand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.PathExpand)
  GOOGLE_DCHECK_NE(&from, this);
  const PathExpand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathExpand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.PathExpand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.PathExpand)
    MergeFrom(*source);
  }
}

void PathExpand::MergeFrom(const PathExpand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.PathExpand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::algebra::PathExpand_ExpandBase::MergeFrom(from.base());
  }
  if (from.has_start_tag()) {
    mutable_start_tag()->::common::NameOrId::MergeFrom(from.start_tag());
  }
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.has_hop_range()) {
    mutable_hop_range()->::algebra::Range::MergeFrom(from.hop_range());
  }
  if (from.has_condition()) {
    mutable_condition()->::common::Expression::MergeFrom(from.condition());
  }
  if (from.path_opt() != 0) {
    set_path_opt(from.path_opt());
  }
  if (from.result_opt() != 0) {
    set_result_opt(from.result_opt());
  }
}

void PathExpand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.PathExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathExpand::CopyFrom(const PathExpand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.PathExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathExpand::IsInitialized() const {
  return true;
}

void PathExpand::Swap(PathExpand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathExpand::InternalSwap(PathExpand* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(start_tag_, other->start_tag_);
  swap(alias_, other->alias_);
  swap(hop_range_, other->hop_range_);
  swap(condition_, other->condition_);
  swap(path_opt_, other->path_opt_);
  swap(result_opt_, other->result_opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathExpand::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Apply::InitAsDefaultInstance() {
  ::algebra::_Apply_default_instance_._instance.get_mutable()->alias_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void Apply::clear_tags() {
  tags_.Clear();
}
void Apply::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Apply::kJoinKindFieldNumber;
const int Apply::kTagsFieldNumber;
const int Apply::kSubtaskFieldNumber;
const int Apply::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Apply::Apply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Apply)
}
Apply::Apply(const Apply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::common::NameOrId(*from.alias_);
  } else {
    alias_ = NULL;
  }
  ::memcpy(&join_kind_, &from.join_kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtask_) -
    reinterpret_cast<char*>(&join_kind_)) + sizeof(subtask_));
  // @@protoc_insertion_point(copy_constructor:algebra.Apply)
}

void Apply::SharedCtor() {
  ::memset(&alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtask_) -
      reinterpret_cast<char*>(&alias_)) + sizeof(subtask_));
}

Apply::~Apply() {
  // @@protoc_insertion_point(destructor:algebra.Apply)
  SharedDtor();
}

void Apply::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
}

void Apply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Apply::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Apply& Apply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void Apply::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  ::memset(&join_kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtask_) -
      reinterpret_cast<char*>(&join_kind_)) + sizeof(subtask_));
  _internal_metadata_.Clear();
}

bool Apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Apply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.Join.JoinKind join_kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join_kind(static_cast< ::algebra::Join_JoinKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.NameOrId tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subtask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId alias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Apply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Apply)
  return false;
#undef DO_
}

void Apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Join.JoinKind join_kind = 1;
  if (this->join_kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->join_kind(), output);
  }

  // repeated .common.NameOrId tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tags(static_cast<int>(i)),
      output);
  }

  // int32 subtask = 3;
  if (this->subtask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subtask(), output);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Apply)
}

::google::protobuf::uint8* Apply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Join.JoinKind join_kind = 1;
  if (this->join_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->join_kind(), target);
  }

  // repeated .common.NameOrId tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tags(static_cast<int>(i)), deterministic, target);
  }

  // int32 subtask = 3;
  if (this->subtask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subtask(), target);
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Apply)
  return target;
}

size_t Apply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Apply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.NameOrId tags = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // .common.NameOrId alias = 4;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.Join.JoinKind join_kind = 1;
  if (this->join_kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join_kind());
  }

  // int32 subtask = 3;
  if (this->subtask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subtask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Apply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Apply)
  GOOGLE_DCHECK_NE(&from, this);
  const Apply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Apply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Apply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Apply)
    MergeFrom(*source);
  }
}

void Apply::MergeFrom(const Apply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Apply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_alias()) {
    mutable_alias()->::common::NameOrId::MergeFrom(from.alias());
  }
  if (from.join_kind() != 0) {
    set_join_kind(from.join_kind());
  }
  if (from.subtask() != 0) {
    set_subtask(from.subtask());
  }
}

void Apply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Apply::CopyFrom(const Apply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Apply::IsInitialized() const {
  return true;
}

void Apply::Swap(Apply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Apply::InternalSwap(Apply* other) {
  using std::swap;
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  swap(alias_, other->alias_);
  swap(join_kind_, other->join_kind_);
  swap(subtask_, other->subtask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Apply::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SegmentApply::InitAsDefaultInstance() {
  ::algebra::_SegmentApply_default_instance_._instance.get_mutable()->apply_subtask_ = const_cast< ::algebra::Apply*>(
      ::algebra::Apply::internal_default_instance());
}
void SegmentApply::clear_keys() {
  keys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentApply::kKeysFieldNumber;
const int SegmentApply::kApplySubtaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentApply::SegmentApply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_SegmentApply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.SegmentApply)
}
SegmentApply::SegmentApply(const SegmentApply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_apply_subtask()) {
    apply_subtask_ = new ::algebra::Apply(*from.apply_subtask_);
  } else {
    apply_subtask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.SegmentApply)
}

void SegmentApply::SharedCtor() {
  apply_subtask_ = NULL;
}

SegmentApply::~SegmentApply() {
  // @@protoc_insertion_point(destructor:algebra.SegmentApply)
  SharedDtor();
}

void SegmentApply::SharedDtor() {
  if (this != internal_default_instance()) delete apply_subtask_;
}

void SegmentApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SegmentApply::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SegmentApply& SegmentApply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_SegmentApply.base);
  return *internal_default_instance();
}


void SegmentApply::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.SegmentApply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == NULL && apply_subtask_ != NULL) {
    delete apply_subtask_;
  }
  apply_subtask_ = NULL;
  _internal_metadata_.Clear();
}

bool SegmentApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.SegmentApply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.NameOrId keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Apply apply_subtask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_subtask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.SegmentApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.SegmentApply)
  return false;
#undef DO_
}

void SegmentApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.SegmentApply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NameOrId keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keys(static_cast<int>(i)),
      output);
  }

  // .algebra.Apply apply_subtask = 2;
  if (this->has_apply_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_apply_subtask(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.SegmentApply)
}

::google::protobuf::uint8* SegmentApply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.SegmentApply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NameOrId keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keys(static_cast<int>(i)), deterministic, target);
  }

  // .algebra.Apply apply_subtask = 2;
  if (this->has_apply_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_apply_subtask(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.SegmentApply)
  return target;
}

size_t SegmentApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.SegmentApply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.NameOrId keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  // .algebra.Apply apply_subtask = 2;
  if (this->has_apply_subtask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *apply_subtask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentApply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.SegmentApply)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentApply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SegmentApply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.SegmentApply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.SegmentApply)
    MergeFrom(*source);
  }
}

void SegmentApply::MergeFrom(const SegmentApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.SegmentApply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_apply_subtask()) {
    mutable_apply_subtask()->::algebra::Apply::MergeFrom(from.apply_subtask());
  }
}

void SegmentApply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.SegmentApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentApply::CopyFrom(const SegmentApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.SegmentApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentApply::IsInitialized() const {
  return true;
}

void SegmentApply::Swap(SegmentApply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentApply::InternalSwap(SegmentApply* other) {
  using std::swap;
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  swap(apply_subtask_, other->apply_subtask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SegmentApply::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pattern_Binder::InitAsDefaultInstance() {
  ::algebra::_Pattern_Binder_default_instance_.edge_ = const_cast< ::algebra::EdgeExpand*>(
      ::algebra::EdgeExpand::internal_default_instance());
  ::algebra::_Pattern_Binder_default_instance_.path_ = const_cast< ::algebra::PathExpand*>(
      ::algebra::PathExpand::internal_default_instance());
  ::algebra::_Pattern_Binder_default_instance_.vertex_ = const_cast< ::algebra::GetV*>(
      ::algebra::GetV::internal_default_instance());
  ::algebra::_Pattern_Binder_default_instance_.select_ = const_cast< ::algebra::Select*>(
      ::algebra::Select::internal_default_instance());
}
void Pattern_Binder::set_allocated_edge(::algebra::EdgeExpand* edge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (edge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      edge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    set_has_edge();
    item_.edge_ = edge;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Pattern.Binder.edge)
}
void Pattern_Binder::set_allocated_path(::algebra::PathExpand* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    set_has_path();
    item_.path_ = path;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Pattern.Binder.path)
}
void Pattern_Binder::set_allocated_vertex(::algebra::GetV* vertex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (vertex) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vertex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vertex, submessage_arena);
    }
    set_has_vertex();
    item_.vertex_ = vertex;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Pattern.Binder.vertex)
}
void Pattern_Binder::set_allocated_select(::algebra::Select* select) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (select) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    item_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Pattern.Binder.select)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pattern_Binder::kEdgeFieldNumber;
const int Pattern_Binder::kPathFieldNumber;
const int Pattern_Binder::kVertexFieldNumber;
const int Pattern_Binder::kSelectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pattern_Binder::Pattern_Binder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Pattern_Binder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Pattern.Binder)
}
Pattern_Binder::Pattern_Binder(const Pattern_Binder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kEdge: {
      mutable_edge()->::algebra::EdgeExpand::MergeFrom(from.edge());
      break;
    }
    case kPath: {
      mutable_path()->::algebra::PathExpand::MergeFrom(from.path());
      break;
    }
    case kVertex: {
      mutable_vertex()->::algebra::GetV::MergeFrom(from.vertex());
      break;
    }
    case kSelect: {
      mutable_select()->::algebra::Select::MergeFrom(from.select());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Pattern.Binder)
}

void Pattern_Binder::SharedCtor() {
  clear_has_item();
}

Pattern_Binder::~Pattern_Binder() {
  // @@protoc_insertion_point(destructor:algebra.Pattern.Binder)
  SharedDtor();
}

void Pattern_Binder::SharedDtor() {
  if (has_item()) {
    clear_item();
  }
}

void Pattern_Binder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pattern_Binder::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pattern_Binder& Pattern_Binder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Pattern_Binder.base);
  return *internal_default_instance();
}


void Pattern_Binder::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:algebra.Pattern.Binder)
  switch (item_case()) {
    case kEdge: {
      delete item_.edge_;
      break;
    }
    case kPath: {
      delete item_.path_;
      break;
    }
    case kVertex: {
      delete item_.vertex_;
      break;
    }
    case kSelect: {
      delete item_.select_;
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void Pattern_Binder::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Pattern.Binder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear();
}

bool Pattern_Binder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Pattern.Binder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.EdgeExpand edge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.PathExpand path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.GetV vertex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vertex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Select select = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Pattern.Binder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Pattern.Binder)
  return false;
#undef DO_
}

void Pattern_Binder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Pattern.Binder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.EdgeExpand edge = 1;
  if (has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_edge(), output);
  }

  // .algebra.PathExpand path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_path(), output);
  }

  // .algebra.GetV vertex = 3;
  if (has_vertex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_vertex(), output);
  }

  // .algebra.Select select = 4;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_select(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Pattern.Binder)
}

::google::protobuf::uint8* Pattern_Binder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Pattern.Binder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.EdgeExpand edge = 1;
  if (has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_edge(), deterministic, target);
  }

  // .algebra.PathExpand path = 2;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_path(), deterministic, target);
  }

  // .algebra.GetV vertex = 3;
  if (has_vertex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_vertex(), deterministic, target);
  }

  // .algebra.Select select = 4;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_select(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Pattern.Binder)
  return target;
}

size_t Pattern_Binder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Pattern.Binder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (item_case()) {
    // .algebra.EdgeExpand edge = 1;
    case kEdge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_.edge_);
      break;
    }
    // .algebra.PathExpand path = 2;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_.path_);
      break;
    }
    // .algebra.GetV vertex = 3;
    case kVertex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_.vertex_);
      break;
    }
    // .algebra.Select select = 4;
    case kSelect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_.select_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pattern_Binder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Pattern.Binder)
  GOOGLE_DCHECK_NE(&from, this);
  const Pattern_Binder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pattern_Binder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Pattern.Binder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Pattern.Binder)
    MergeFrom(*source);
  }
}

void Pattern_Binder::MergeFrom(const Pattern_Binder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Pattern.Binder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kEdge: {
      mutable_edge()->::algebra::EdgeExpand::MergeFrom(from.edge());
      break;
    }
    case kPath: {
      mutable_path()->::algebra::PathExpand::MergeFrom(from.path());
      break;
    }
    case kVertex: {
      mutable_vertex()->::algebra::GetV::MergeFrom(from.vertex());
      break;
    }
    case kSelect: {
      mutable_select()->::algebra::Select::MergeFrom(from.select());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
}

void Pattern_Binder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Pattern.Binder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pattern_Binder::CopyFrom(const Pattern_Binder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Pattern.Binder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pattern_Binder::IsInitialized() const {
  return true;
}

void Pattern_Binder::Swap(Pattern_Binder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pattern_Binder::InternalSwap(Pattern_Binder* other) {
  using std::swap;
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pattern_Binder::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pattern_Sentence::InitAsDefaultInstance() {
  ::algebra::_Pattern_Sentence_default_instance_._instance.get_mutable()->start_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
  ::algebra::_Pattern_Sentence_default_instance_._instance.get_mutable()->end_ = const_cast< ::common::NameOrId*>(
      ::common::NameOrId::internal_default_instance());
}
void Pattern_Sentence::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
void Pattern_Sentence::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pattern_Sentence::kStartFieldNumber;
const int Pattern_Sentence::kBindersFieldNumber;
const int Pattern_Sentence::kEndFieldNumber;
const int Pattern_Sentence::kJoinKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pattern_Sentence::Pattern_Sentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Pattern_Sentence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Pattern.Sentence)
}
Pattern_Sentence::Pattern_Sentence(const Pattern_Sentence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      binders_(from.binders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::common::NameOrId(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::common::NameOrId(*from.end_);
  } else {
    end_ = NULL;
  }
  join_kind_ = from.join_kind_;
  // @@protoc_insertion_point(copy_constructor:algebra.Pattern.Sentence)
}

void Pattern_Sentence::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_kind_) -
      reinterpret_cast<char*>(&start_)) + sizeof(join_kind_));
}

Pattern_Sentence::~Pattern_Sentence() {
  // @@protoc_insertion_point(destructor:algebra.Pattern.Sentence)
  SharedDtor();
}

void Pattern_Sentence::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void Pattern_Sentence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pattern_Sentence::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pattern_Sentence& Pattern_Sentence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Pattern_Sentence.base);
  return *internal_default_instance();
}


void Pattern_Sentence::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Pattern.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binders_.Clear();
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
  join_kind_ = 0;
  _internal_metadata_.Clear();
}

bool Pattern_Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Pattern.Sentence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.NameOrId start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .algebra.Pattern.Binder binders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_binders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.NameOrId end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Join.JoinKind join_kind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join_kind(static_cast< ::algebra::Join_JoinKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Pattern.Sentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Pattern.Sentence)
  return false;
#undef DO_
}

void Pattern_Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Pattern.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_start(), output);
  }

  // repeated .algebra.Pattern.Binder binders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->binders(static_cast<int>(i)),
      output);
  }

  // .common.NameOrId end = 3;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_end(), output);
  }

  // .algebra.Join.JoinKind join_kind = 4;
  if (this->join_kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->join_kind(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Pattern.Sentence)
}

::google::protobuf::uint8* Pattern_Sentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Pattern.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.NameOrId start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_start(), deterministic, target);
  }

  // repeated .algebra.Pattern.Binder binders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->binders(static_cast<int>(i)), deterministic, target);
  }

  // .common.NameOrId end = 3;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_end(), deterministic, target);
  }

  // .algebra.Join.JoinKind join_kind = 4;
  if (this->join_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->join_kind(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Pattern.Sentence)
  return target;
}

size_t Pattern_Sentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Pattern.Sentence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.Pattern.Binder binders = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->binders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->binders(static_cast<int>(i)));
    }
  }

  // .common.NameOrId start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .common.NameOrId end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .algebra.Join.JoinKind join_kind = 4;
  if (this->join_kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join_kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pattern_Sentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Pattern.Sentence)
  GOOGLE_DCHECK_NE(&from, this);
  const Pattern_Sentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pattern_Sentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Pattern.Sentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Pattern.Sentence)
    MergeFrom(*source);
  }
}

void Pattern_Sentence::MergeFrom(const Pattern_Sentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Pattern.Sentence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  binders_.MergeFrom(from.binders_);
  if (from.has_start()) {
    mutable_start()->::common::NameOrId::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::common::NameOrId::MergeFrom(from.end());
  }
  if (from.join_kind() != 0) {
    set_join_kind(from.join_kind());
  }
}

void Pattern_Sentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Pattern.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pattern_Sentence::CopyFrom(const Pattern_Sentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Pattern.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pattern_Sentence::IsInitialized() const {
  return true;
}

void Pattern_Sentence::Swap(Pattern_Sentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pattern_Sentence::InternalSwap(Pattern_Sentence* other) {
  using std::swap;
  CastToBase(&binders_)->InternalSwap(CastToBase(&other->binders_));
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(join_kind_, other->join_kind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pattern_Sentence::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pattern::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pattern::kSentencesFieldNumber;
const int Pattern::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pattern::Pattern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Pattern.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Pattern)
}
Pattern::Pattern(const Pattern& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sentences_(from.sentences_),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.Pattern)
}

void Pattern::SharedCtor() {
}

Pattern::~Pattern() {
  // @@protoc_insertion_point(destructor:algebra.Pattern)
  SharedDtor();
}

void Pattern::SharedDtor() {
}

void Pattern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pattern::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pattern& Pattern::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Pattern.base);
  return *internal_default_instance();
}


void Pattern::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Pattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sentences_.Clear();
  meta_data_.Clear();
  _internal_metadata_.Clear();
}

bool Pattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Pattern)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.Pattern.Sentence sentences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .algebra.MetaData meta_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Pattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Pattern)
  return false;
#undef DO_
}

void Pattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Pattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.Pattern.Sentence sentences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sentences(static_cast<int>(i)),
      output);
  }

  // repeated .algebra.MetaData meta_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->meta_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Pattern)
}

::google::protobuf::uint8* Pattern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Pattern)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.Pattern.Sentence sentences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sentences(static_cast<int>(i)), deterministic, target);
  }

  // repeated .algebra.MetaData meta_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->meta_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Pattern)
  return target;
}

size_t Pattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Pattern)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.Pattern.Sentence sentences = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sentences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sentences(static_cast<int>(i)));
    }
  }

  // repeated .algebra.MetaData meta_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->meta_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meta_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pattern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Pattern)
  GOOGLE_DCHECK_NE(&from, this);
  const Pattern* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pattern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Pattern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Pattern)
    MergeFrom(*source);
  }
}

void Pattern::MergeFrom(const Pattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Pattern)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
  meta_data_.MergeFrom(from.meta_data_);
}

void Pattern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Pattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pattern::CopyFrom(const Pattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Pattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pattern::IsInitialized() const {
  return true;
}

void Pattern::Swap(Pattern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pattern::InternalSwap(Pattern* other) {
  using std::swap;
  CastToBase(&sentences_)->InternalSwap(CastToBase(&other->sentences_));
  CastToBase(&meta_data_)->InternalSwap(CastToBase(&other->meta_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pattern::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sample_SampleByRatio::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample_SampleByRatio::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample_SampleByRatio::Sample_SampleByRatio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Sample_SampleByRatio.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Sample.SampleByRatio)
}
Sample_SampleByRatio::Sample_SampleByRatio(const Sample_SampleByRatio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:algebra.Sample.SampleByRatio)
}

void Sample_SampleByRatio::SharedCtor() {
  ratio_ = 0;
}

Sample_SampleByRatio::~Sample_SampleByRatio() {
  // @@protoc_insertion_point(destructor:algebra.Sample.SampleByRatio)
  SharedDtor();
}

void Sample_SampleByRatio::SharedDtor() {
}

void Sample_SampleByRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sample_SampleByRatio::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sample_SampleByRatio& Sample_SampleByRatio::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Sample_SampleByRatio.base);
  return *internal_default_instance();
}


void Sample_SampleByRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Sample.SampleByRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0;
  _internal_metadata_.Clear();
}

bool Sample_SampleByRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Sample.SampleByRatio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Sample.SampleByRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Sample.SampleByRatio)
  return false;
#undef DO_
}

void Sample_SampleByRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Sample.SampleByRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ratio = 1;
  if (this->ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Sample.SampleByRatio)
}

::google::protobuf::uint8* Sample_SampleByRatio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Sample.SampleByRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ratio = 1;
  if (this->ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Sample.SampleByRatio)
  return target;
}

size_t Sample_SampleByRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Sample.SampleByRatio)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample_SampleByRatio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Sample.SampleByRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample_SampleByRatio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sample_SampleByRatio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Sample.SampleByRatio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Sample.SampleByRatio)
    MergeFrom(*source);
  }
}

void Sample_SampleByRatio::MergeFrom(const Sample_SampleByRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Sample.SampleByRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
}

void Sample_SampleByRatio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Sample.SampleByRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample_SampleByRatio::CopyFrom(const Sample_SampleByRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Sample.SampleByRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample_SampleByRatio::IsInitialized() const {
  return true;
}

void Sample_SampleByRatio::Swap(Sample_SampleByRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample_SampleByRatio::InternalSwap(Sample_SampleByRatio* other) {
  using std::swap;
  swap(ratio_, other->ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sample_SampleByRatio::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sample_SampleByNum::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample_SampleByNum::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample_SampleByNum::Sample_SampleByNum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Sample_SampleByNum.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Sample.SampleByNum)
}
Sample_SampleByNum::Sample_SampleByNum(const Sample_SampleByNum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:algebra.Sample.SampleByNum)
}

void Sample_SampleByNum::SharedCtor() {
  num_ = 0;
}

Sample_SampleByNum::~Sample_SampleByNum() {
  // @@protoc_insertion_point(destructor:algebra.Sample.SampleByNum)
  SharedDtor();
}

void Sample_SampleByNum::SharedDtor() {
}

void Sample_SampleByNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sample_SampleByNum::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sample_SampleByNum& Sample_SampleByNum::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Sample_SampleByNum.base);
  return *internal_default_instance();
}


void Sample_SampleByNum::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Sample.SampleByNum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = 0;
  _internal_metadata_.Clear();
}

bool Sample_SampleByNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Sample.SampleByNum)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Sample.SampleByNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Sample.SampleByNum)
  return false;
#undef DO_
}

void Sample_SampleByNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Sample.SampleByNum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Sample.SampleByNum)
}

::google::protobuf::uint8* Sample_SampleByNum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Sample.SampleByNum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Sample.SampleByNum)
  return target;
}

size_t Sample_SampleByNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Sample.SampleByNum)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample_SampleByNum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Sample.SampleByNum)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample_SampleByNum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sample_SampleByNum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Sample.SampleByNum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Sample.SampleByNum)
    MergeFrom(*source);
  }
}

void Sample_SampleByNum::MergeFrom(const Sample_SampleByNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Sample.SampleByNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    set_num(from.num());
  }
}

void Sample_SampleByNum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Sample.SampleByNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample_SampleByNum::CopyFrom(const Sample_SampleByNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Sample.SampleByNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample_SampleByNum::IsInitialized() const {
  return true;
}

void Sample_SampleByNum::Swap(Sample_SampleByNum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample_SampleByNum::InternalSwap(Sample_SampleByNum* other) {
  using std::swap;
  swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sample_SampleByNum::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sample_SampleType::InitAsDefaultInstance() {
  ::algebra::_Sample_SampleType_default_instance_.sample_by_ratio_ = const_cast< ::algebra::Sample_SampleByRatio*>(
      ::algebra::Sample_SampleByRatio::internal_default_instance());
  ::algebra::_Sample_SampleType_default_instance_.sample_by_num_ = const_cast< ::algebra::Sample_SampleByNum*>(
      ::algebra::Sample_SampleByNum::internal_default_instance());
}
void Sample_SampleType::set_allocated_sample_by_ratio(::algebra::Sample_SampleByRatio* sample_by_ratio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_inner();
  if (sample_by_ratio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample_by_ratio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample_by_ratio, submessage_arena);
    }
    set_has_sample_by_ratio();
    inner_.sample_by_ratio_ = sample_by_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Sample.SampleType.sample_by_ratio)
}
void Sample_SampleType::set_allocated_sample_by_num(::algebra::Sample_SampleByNum* sample_by_num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_inner();
  if (sample_by_num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample_by_num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample_by_num, submessage_arena);
    }
    set_has_sample_by_num();
    inner_.sample_by_num_ = sample_by_num;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Sample.SampleType.sample_by_num)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample_SampleType::kSampleByRatioFieldNumber;
const int Sample_SampleType::kSampleByNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample_SampleType::Sample_SampleType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Sample_SampleType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Sample.SampleType)
}
Sample_SampleType::Sample_SampleType(const Sample_SampleType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kSampleByRatio: {
      mutable_sample_by_ratio()->::algebra::Sample_SampleByRatio::MergeFrom(from.sample_by_ratio());
      break;
    }
    case kSampleByNum: {
      mutable_sample_by_num()->::algebra::Sample_SampleByNum::MergeFrom(from.sample_by_num());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Sample.SampleType)
}

void Sample_SampleType::SharedCtor() {
  clear_has_inner();
}

Sample_SampleType::~Sample_SampleType() {
  // @@protoc_insertion_point(destructor:algebra.Sample.SampleType)
  SharedDtor();
}

void Sample_SampleType::SharedDtor() {
  if (has_inner()) {
    clear_inner();
  }
}

void Sample_SampleType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sample_SampleType::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sample_SampleType& Sample_SampleType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Sample_SampleType.base);
  return *internal_default_instance();
}


void Sample_SampleType::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:algebra.Sample.SampleType)
  switch (inner_case()) {
    case kSampleByRatio: {
      delete inner_.sample_by_ratio_;
      break;
    }
    case kSampleByNum: {
      delete inner_.sample_by_num_;
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void Sample_SampleType::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Sample.SampleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear();
}

bool Sample_SampleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Sample.SampleType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.Sample.SampleByRatio sample_by_ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_by_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Sample.SampleByNum sample_by_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_by_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Sample.SampleType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Sample.SampleType)
  return false;
#undef DO_
}

void Sample_SampleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Sample.SampleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Sample.SampleByRatio sample_by_ratio = 1;
  if (has_sample_by_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sample_by_ratio(), output);
  }

  // .algebra.Sample.SampleByNum sample_by_num = 2;
  if (has_sample_by_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sample_by_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Sample.SampleType)
}

::google::protobuf::uint8* Sample_SampleType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Sample.SampleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Sample.SampleByRatio sample_by_ratio = 1;
  if (has_sample_by_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sample_by_ratio(), deterministic, target);
  }

  // .algebra.Sample.SampleByNum sample_by_num = 2;
  if (has_sample_by_num()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sample_by_num(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Sample.SampleType)
  return target;
}

size_t Sample_SampleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Sample.SampleType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (inner_case()) {
    // .algebra.Sample.SampleByRatio sample_by_ratio = 1;
    case kSampleByRatio: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inner_.sample_by_ratio_);
      break;
    }
    // .algebra.Sample.SampleByNum sample_by_num = 2;
    case kSampleByNum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inner_.sample_by_num_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample_SampleType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Sample.SampleType)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample_SampleType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sample_SampleType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Sample.SampleType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Sample.SampleType)
    MergeFrom(*source);
  }
}

void Sample_SampleType::MergeFrom(const Sample_SampleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Sample.SampleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kSampleByRatio: {
      mutable_sample_by_ratio()->::algebra::Sample_SampleByRatio::MergeFrom(from.sample_by_ratio());
      break;
    }
    case kSampleByNum: {
      mutable_sample_by_num()->::algebra::Sample_SampleByNum::MergeFrom(from.sample_by_num());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void Sample_SampleType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Sample.SampleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample_SampleType::CopyFrom(const Sample_SampleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Sample.SampleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample_SampleType::IsInitialized() const {
  return true;
}

void Sample_SampleType::Swap(Sample_SampleType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample_SampleType::InternalSwap(Sample_SampleType* other) {
  using std::swap;
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sample_SampleType::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sample::InitAsDefaultInstance() {
  ::algebra::_Sample_default_instance_._instance.get_mutable()->sample_type_ = const_cast< ::algebra::Sample_SampleType*>(
      ::algebra::Sample_SampleType::internal_default_instance());
  ::algebra::_Sample_default_instance_._instance.get_mutable()->seed_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::algebra::_Sample_default_instance_._instance.get_mutable()->sample_weight_ = const_cast< ::common::Variable*>(
      ::common::Variable::internal_default_instance());
}
void Sample::clear_seed() {
  if (GetArenaNoVirtual() == NULL && seed_ != NULL) {
    delete seed_;
  }
  seed_ = NULL;
}
void Sample::clear_sample_weight() {
  if (GetArenaNoVirtual() == NULL && sample_weight_ != NULL) {
    delete sample_weight_;
  }
  sample_weight_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sample::kSampleTypeFieldNumber;
const int Sample::kSeedFieldNumber;
const int Sample::kSampleWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sample::Sample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Sample.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Sample)
}
Sample::Sample(const Sample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_type()) {
    sample_type_ = new ::algebra::Sample_SampleType(*from.sample_type_);
  } else {
    sample_type_ = NULL;
  }
  if (from.has_seed()) {
    seed_ = new ::google::protobuf::Int32Value(*from.seed_);
  } else {
    seed_ = NULL;
  }
  if (from.has_sample_weight()) {
    sample_weight_ = new ::common::Variable(*from.sample_weight_);
  } else {
    sample_weight_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Sample)
}

void Sample::SharedCtor() {
  ::memset(&sample_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_weight_) -
      reinterpret_cast<char*>(&sample_type_)) + sizeof(sample_weight_));
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:algebra.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
  if (this != internal_default_instance()) delete sample_type_;
  if (this != internal_default_instance()) delete seed_;
  if (this != internal_default_instance()) delete sample_weight_;
}

void Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sample& Sample::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Sample.base);
  return *internal_default_instance();
}


void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sample_type_ != NULL) {
    delete sample_type_;
  }
  sample_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && seed_ != NULL) {
    delete seed_;
  }
  seed_ = NULL;
  if (GetArenaNoVirtual() == NULL && sample_weight_ != NULL) {
    delete sample_weight_;
  }
  sample_weight_ = NULL;
  _internal_metadata_.Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Sample)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.Sample.SampleType sample_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value seed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_seed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Variable sample_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_weight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Sample)
  return false;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Sample.SampleType sample_type = 1;
  if (this->has_sample_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sample_type(), output);
  }

  // .google.protobuf.Int32Value seed = 2;
  if (this->has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_seed(), output);
  }

  // .common.Variable sample_weight = 3;
  if (this->has_sample_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sample_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Sample)
}

::google::protobuf::uint8* Sample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Sample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Sample.SampleType sample_type = 1;
  if (this->has_sample_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sample_type(), deterministic, target);
  }

  // .google.protobuf.Int32Value seed = 2;
  if (this->has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_seed(), deterministic, target);
  }

  // .common.Variable sample_weight = 3;
  if (this->has_sample_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sample_weight(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Sample)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .algebra.Sample.SampleType sample_type = 1;
  if (this->has_sample_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sample_type_);
  }

  // .google.protobuf.Int32Value seed = 2;
  if (this->has_seed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *seed_);
  }

  // .common.Variable sample_weight = 3;
  if (this->has_sample_weight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sample_weight_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  const Sample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Sample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Sample)
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sample_type()) {
    mutable_sample_type()->::algebra::Sample_SampleType::MergeFrom(from.sample_type());
  }
  if (from.has_seed()) {
    mutable_seed()->::google::protobuf::Int32Value::MergeFrom(from.seed());
  }
  if (from.has_sample_weight()) {
    mutable_sample_weight()->::common::Variable::MergeFrom(from.sample_weight());
  }
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::Swap(Sample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sample::InternalSwap(Sample* other) {
  using std::swap;
  swap(sample_type_, other->sample_type_);
  swap(seed_, other->seed_);
  swap(sample_weight_, other->sample_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sink_SinkTarget::InitAsDefaultInstance() {
  ::algebra::_Sink_SinkTarget_default_instance_.sink_default_ = const_cast< ::algebra::SinkDefault*>(
      ::algebra::SinkDefault::internal_default_instance());
  ::algebra::_Sink_SinkTarget_default_instance_.sink_vineyard_ = const_cast< ::algebra::SinkVineyard*>(
      ::algebra::SinkVineyard::internal_default_instance());
}
void Sink_SinkTarget::set_allocated_sink_default(::algebra::SinkDefault* sink_default) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_inner();
  if (sink_default) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sink_default = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sink_default, submessage_arena);
    }
    set_has_sink_default();
    inner_.sink_default_ = sink_default;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Sink.SinkTarget.sink_default)
}
void Sink_SinkTarget::set_allocated_sink_vineyard(::algebra::SinkVineyard* sink_vineyard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_inner();
  if (sink_vineyard) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sink_vineyard = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sink_vineyard, submessage_arena);
    }
    set_has_sink_vineyard();
    inner_.sink_vineyard_ = sink_vineyard;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.Sink.SinkTarget.sink_vineyard)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sink_SinkTarget::kSinkDefaultFieldNumber;
const int Sink_SinkTarget::kSinkVineyardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sink_SinkTarget::Sink_SinkTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Sink_SinkTarget.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Sink.SinkTarget)
}
Sink_SinkTarget::Sink_SinkTarget(const Sink_SinkTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_inner();
  switch (from.inner_case()) {
    case kSinkDefault: {
      mutable_sink_default()->::algebra::SinkDefault::MergeFrom(from.sink_default());
      break;
    }
    case kSinkVineyard: {
      mutable_sink_vineyard()->::algebra::SinkVineyard::MergeFrom(from.sink_vineyard());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Sink.SinkTarget)
}

void Sink_SinkTarget::SharedCtor() {
  clear_has_inner();
}

Sink_SinkTarget::~Sink_SinkTarget() {
  // @@protoc_insertion_point(destructor:algebra.Sink.SinkTarget)
  SharedDtor();
}

void Sink_SinkTarget::SharedDtor() {
  if (has_inner()) {
    clear_inner();
  }
}

void Sink_SinkTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sink_SinkTarget::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sink_SinkTarget& Sink_SinkTarget::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Sink_SinkTarget.base);
  return *internal_default_instance();
}


void Sink_SinkTarget::clear_inner() {
// @@protoc_insertion_point(one_of_clear_start:algebra.Sink.SinkTarget)
  switch (inner_case()) {
    case kSinkDefault: {
      delete inner_.sink_default_;
      break;
    }
    case kSinkVineyard: {
      delete inner_.sink_vineyard_;
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INNER_NOT_SET;
}


void Sink_SinkTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Sink.SinkTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_inner();
  _internal_metadata_.Clear();
}

bool Sink_SinkTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Sink.SinkTarget)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.SinkDefault sink_default = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sink_default()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.SinkVineyard sink_vineyard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sink_vineyard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Sink.SinkTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Sink.SinkTarget)
  return false;
#undef DO_
}

void Sink_SinkTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Sink.SinkTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.SinkDefault sink_default = 1;
  if (has_sink_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sink_default(), output);
  }

  // .algebra.SinkVineyard sink_vineyard = 2;
  if (has_sink_vineyard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sink_vineyard(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Sink.SinkTarget)
}

::google::protobuf::uint8* Sink_SinkTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Sink.SinkTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.SinkDefault sink_default = 1;
  if (has_sink_default()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sink_default(), deterministic, target);
  }

  // .algebra.SinkVineyard sink_vineyard = 2;
  if (has_sink_vineyard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sink_vineyard(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Sink.SinkTarget)
  return target;
}

size_t Sink_SinkTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Sink.SinkTarget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (inner_case()) {
    // .algebra.SinkDefault sink_default = 1;
    case kSinkDefault: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inner_.sink_default_);
      break;
    }
    // .algebra.SinkVineyard sink_vineyard = 2;
    case kSinkVineyard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inner_.sink_vineyard_);
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sink_SinkTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Sink.SinkTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const Sink_SinkTarget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sink_SinkTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Sink.SinkTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Sink.SinkTarget)
    MergeFrom(*source);
  }
}

void Sink_SinkTarget::MergeFrom(const Sink_SinkTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Sink.SinkTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.inner_case()) {
    case kSinkDefault: {
      mutable_sink_default()->::algebra::SinkDefault::MergeFrom(from.sink_default());
      break;
    }
    case kSinkVineyard: {
      mutable_sink_vineyard()->::algebra::SinkVineyard::MergeFrom(from.sink_vineyard());
      break;
    }
    case INNER_NOT_SET: {
      break;
    }
  }
}

void Sink_SinkTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Sink.SinkTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sink_SinkTarget::CopyFrom(const Sink_SinkTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Sink.SinkTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sink_SinkTarget::IsInitialized() const {
  return true;
}

void Sink_SinkTarget::Swap(Sink_SinkTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sink_SinkTarget::InternalSwap(Sink_SinkTarget* other) {
  using std::swap;
  swap(inner_, other->inner_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sink_SinkTarget::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sink::InitAsDefaultInstance() {
  ::algebra::_Sink_default_instance_._instance.get_mutable()->sink_target_ = const_cast< ::algebra::Sink_SinkTarget*>(
      ::algebra::Sink_SinkTarget::internal_default_instance());
}
void Sink::clear_tags() {
  tags_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sink::kTagsFieldNumber;
const int Sink::kSinkTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sink::Sink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Sink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Sink)
}
Sink::Sink(const Sink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sink_target()) {
    sink_target_ = new ::algebra::Sink_SinkTarget(*from.sink_target_);
  } else {
    sink_target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.Sink)
}

void Sink::SharedCtor() {
  sink_target_ = NULL;
}

Sink::~Sink() {
  // @@protoc_insertion_point(destructor:algebra.Sink)
  SharedDtor();
}

void Sink::SharedDtor() {
  if (this != internal_default_instance()) delete sink_target_;
}

void Sink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sink::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sink& Sink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Sink.base);
  return *internal_default_instance();
}


void Sink::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Sink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == NULL && sink_target_ != NULL) {
    delete sink_target_;
  }
  sink_target_ = NULL;
  _internal_metadata_.Clear();
}

bool Sink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Sink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.NameOrIdKey tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Sink.SinkTarget sink_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sink_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Sink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Sink)
  return false;
#undef DO_
}

void Sink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Sink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NameOrIdKey tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tags(static_cast<int>(i)),
      output);
  }

  // .algebra.Sink.SinkTarget sink_target = 2;
  if (this->has_sink_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sink_target(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Sink)
}

::google::protobuf::uint8* Sink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Sink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.NameOrIdKey tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tags(static_cast<int>(i)), deterministic, target);
  }

  // .algebra.Sink.SinkTarget sink_target = 2;
  if (this->has_sink_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sink_target(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Sink)
  return target;
}

size_t Sink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Sink)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.NameOrIdKey tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // .algebra.Sink.SinkTarget sink_target = 2;
  if (this->has_sink_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sink_target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Sink)
  GOOGLE_DCHECK_NE(&from, this);
  const Sink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Sink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Sink)
    MergeFrom(*source);
  }
}

void Sink::MergeFrom(const Sink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Sink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_sink_target()) {
    mutable_sink_target()->::algebra::Sink_SinkTarget::MergeFrom(from.sink_target());
  }
}

void Sink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Sink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sink::CopyFrom(const Sink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Sink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sink::IsInitialized() const {
  return true;
}

void Sink::Swap(Sink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sink::InternalSwap(Sink* other) {
  using std::swap;
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  swap(sink_target_, other->sink_target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sink::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SinkDefault_IdNameMapping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinkDefault_IdNameMapping::kIdFieldNumber;
const int SinkDefault_IdNameMapping::kNameFieldNumber;
const int SinkDefault_IdNameMapping::kMetaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinkDefault_IdNameMapping::SinkDefault_IdNameMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_SinkDefault_IdNameMapping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.SinkDefault.IdNameMapping)
}
SinkDefault_IdNameMapping::SinkDefault_IdNameMapping(const SinkDefault_IdNameMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&meta_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(meta_type_));
  // @@protoc_insertion_point(copy_constructor:algebra.SinkDefault.IdNameMapping)
}

void SinkDefault_IdNameMapping::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(meta_type_));
}

SinkDefault_IdNameMapping::~SinkDefault_IdNameMapping() {
  // @@protoc_insertion_point(destructor:algebra.SinkDefault.IdNameMapping)
  SharedDtor();
}

void SinkDefault_IdNameMapping::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SinkDefault_IdNameMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SinkDefault_IdNameMapping::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SinkDefault_IdNameMapping& SinkDefault_IdNameMapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_SinkDefault_IdNameMapping.base);
  return *internal_default_instance();
}


void SinkDefault_IdNameMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.SinkDefault.IdNameMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(meta_type_));
  _internal_metadata_.Clear();
}

bool SinkDefault_IdNameMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.SinkDefault.IdNameMapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "algebra.SinkDefault.IdNameMapping.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.SinkDefault.MetaType meta_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_meta_type(static_cast< ::algebra::SinkDefault_MetaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.SinkDefault.IdNameMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.SinkDefault.IdNameMapping)
  return false;
#undef DO_
}

void SinkDefault_IdNameMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.SinkDefault.IdNameMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "algebra.SinkDefault.IdNameMapping.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .algebra.SinkDefault.MetaType meta_type = 3;
  if (this->meta_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->meta_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.SinkDefault.IdNameMapping)
}

::google::protobuf::uint8* SinkDefault_IdNameMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.SinkDefault.IdNameMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "algebra.SinkDefault.IdNameMapping.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .algebra.SinkDefault.MetaType meta_type = 3;
  if (this->meta_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->meta_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.SinkDefault.IdNameMapping)
  return target;
}

size_t SinkDefault_IdNameMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.SinkDefault.IdNameMapping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .algebra.SinkDefault.MetaType meta_type = 3;
  if (this->meta_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->meta_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinkDefault_IdNameMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.SinkDefault.IdNameMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const SinkDefault_IdNameMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SinkDefault_IdNameMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.SinkDefault.IdNameMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.SinkDefault.IdNameMapping)
    MergeFrom(*source);
  }
}

void SinkDefault_IdNameMapping::MergeFrom(const SinkDefault_IdNameMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.SinkDefault.IdNameMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.meta_type() != 0) {
    set_meta_type(from.meta_type());
  }
}

void SinkDefault_IdNameMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.SinkDefault.IdNameMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinkDefault_IdNameMapping::CopyFrom(const SinkDefault_IdNameMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.SinkDefault.IdNameMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinkDefault_IdNameMapping::IsInitialized() const {
  return true;
}

void SinkDefault_IdNameMapping::Swap(SinkDefault_IdNameMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinkDefault_IdNameMapping::InternalSwap(SinkDefault_IdNameMapping* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(meta_type_, other->meta_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SinkDefault_IdNameMapping::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SinkDefault::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinkDefault::kIdNameMappingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinkDefault::SinkDefault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_SinkDefault.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.SinkDefault)
}
SinkDefault::SinkDefault(const SinkDefault& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      id_name_mappings_(from.id_name_mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.SinkDefault)
}

void SinkDefault::SharedCtor() {
}

SinkDefault::~SinkDefault() {
  // @@protoc_insertion_point(destructor:algebra.SinkDefault)
  SharedDtor();
}

void SinkDefault::SharedDtor() {
}

void SinkDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SinkDefault::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SinkDefault& SinkDefault::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_SinkDefault.base);
  return *internal_default_instance();
}


void SinkDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.SinkDefault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_name_mappings_.Clear();
  _internal_metadata_.Clear();
}

bool SinkDefault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.SinkDefault)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.SinkDefault.IdNameMapping id_name_mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_id_name_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.SinkDefault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.SinkDefault)
  return false;
#undef DO_
}

void SinkDefault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.SinkDefault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.SinkDefault.IdNameMapping id_name_mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->id_name_mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->id_name_mappings(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.SinkDefault)
}

::google::protobuf::uint8* SinkDefault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.SinkDefault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.SinkDefault.IdNameMapping id_name_mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->id_name_mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->id_name_mappings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.SinkDefault)
  return target;
}

size_t SinkDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.SinkDefault)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.SinkDefault.IdNameMapping id_name_mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->id_name_mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->id_name_mappings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinkDefault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.SinkDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const SinkDefault* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SinkDefault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.SinkDefault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.SinkDefault)
    MergeFrom(*source);
  }
}

void SinkDefault::MergeFrom(const SinkDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.SinkDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_name_mappings_.MergeFrom(from.id_name_mappings_);
}

void SinkDefault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.SinkDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinkDefault::CopyFrom(const SinkDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.SinkDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinkDefault::IsInitialized() const {
  return true;
}

void SinkDefault::Swap(SinkDefault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinkDefault::InternalSwap(SinkDefault* other) {
  using std::swap;
  CastToBase(&id_name_mappings_)->InternalSwap(CastToBase(&other->id_name_mappings_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SinkDefault::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SinkVineyard::InitAsDefaultInstance() {
  ::algebra::_SinkVineyard_default_instance_._instance.get_mutable()->graph_schema_ = const_cast< ::schema::Schema*>(
      ::schema::Schema::internal_default_instance());
}
void SinkVineyard::clear_graph_schema() {
  if (GetArenaNoVirtual() == NULL && graph_schema_ != NULL) {
    delete graph_schema_;
  }
  graph_schema_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinkVineyard::kGraphNameFieldNumber;
const int SinkVineyard::kGraphSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinkVineyard::SinkVineyard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_SinkVineyard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.SinkVineyard)
}
SinkVineyard::SinkVineyard(const SinkVineyard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph_name().size() > 0) {
    graph_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_name_);
  }
  if (from.has_graph_schema()) {
    graph_schema_ = new ::schema::Schema(*from.graph_schema_);
  } else {
    graph_schema_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.SinkVineyard)
}

void SinkVineyard::SharedCtor() {
  graph_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_schema_ = NULL;
}

SinkVineyard::~SinkVineyard() {
  // @@protoc_insertion_point(destructor:algebra.SinkVineyard)
  SharedDtor();
}

void SinkVineyard::SharedDtor() {
  graph_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete graph_schema_;
}

void SinkVineyard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SinkVineyard::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SinkVineyard& SinkVineyard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_SinkVineyard.base);
  return *internal_default_instance();
}


void SinkVineyard::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.SinkVineyard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && graph_schema_ != NULL) {
    delete graph_schema_;
  }
  graph_schema_ = NULL;
  _internal_metadata_.Clear();
}

bool SinkVineyard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.SinkVineyard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_name().data(), static_cast<int>(this->graph_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "algebra.SinkVineyard.graph_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.Schema graph_schema = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graph_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.SinkVineyard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.SinkVineyard)
  return false;
#undef DO_
}

void SinkVineyard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.SinkVineyard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_name = 1;
  if (this->graph_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_name().data(), static_cast<int>(this->graph_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "algebra.SinkVineyard.graph_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_name(), output);
  }

  // .schema.Schema graph_schema = 2;
  if (this->has_graph_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_graph_schema(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.SinkVineyard)
}

::google::protobuf::uint8* SinkVineyard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.SinkVineyard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_name = 1;
  if (this->graph_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_name().data(), static_cast<int>(this->graph_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "algebra.SinkVineyard.graph_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_name(), target);
  }

  // .schema.Schema graph_schema = 2;
  if (this->has_graph_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_graph_schema(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.SinkVineyard)
  return target;
}

size_t SinkVineyard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.SinkVineyard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string graph_name = 1;
  if (this->graph_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_name());
  }

  // .schema.Schema graph_schema = 2;
  if (this->has_graph_schema()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *graph_schema_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinkVineyard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.SinkVineyard)
  GOOGLE_DCHECK_NE(&from, this);
  const SinkVineyard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SinkVineyard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.SinkVineyard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.SinkVineyard)
    MergeFrom(*source);
  }
}

void SinkVineyard::MergeFrom(const SinkVineyard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.SinkVineyard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_name().size() > 0) {

    graph_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_name_);
  }
  if (from.has_graph_schema()) {
    mutable_graph_schema()->::schema::Schema::MergeFrom(from.graph_schema());
  }
}

void SinkVineyard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.SinkVineyard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinkVineyard::CopyFrom(const SinkVineyard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.SinkVineyard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinkVineyard::IsInitialized() const {
  return true;
}

void SinkVineyard::Swap(SinkVineyard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinkVineyard::InternalSwap(SinkVineyard* other) {
  using std::swap;
  graph_name_.Swap(&other->graph_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(graph_schema_, other->graph_schema_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SinkVineyard::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Root::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Root::Root()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Root.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Root)
}
Root::Root(const Root& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.Root)
}

void Root::SharedCtor() {
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:algebra.Root)
  SharedDtor();
}

void Root::SharedDtor() {
}

void Root::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Root::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Root& Root::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Root.base);
  return *internal_default_instance();
}


void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Root::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Root)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Root)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Root)
  return false;
#undef DO_
}

void Root::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Root)
}

::google::protobuf::uint8* Root::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Root)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Root::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Root)
  GOOGLE_DCHECK_NE(&from, this);
  const Root* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Root>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Root)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Root)
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Root)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Root::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  return true;
}

void Root::Swap(Root* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Root::InternalSwap(Root* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Root::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Branch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Branch::Branch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_Branch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.Branch)
}
Branch::Branch(const Branch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.Branch)
}

void Branch::SharedCtor() {
}

Branch::~Branch() {
  // @@protoc_insertion_point(destructor:algebra.Branch)
  SharedDtor();
}

void Branch::SharedDtor() {
}

void Branch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Branch::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Branch& Branch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_Branch.base);
  return *internal_default_instance();
}


void Branch::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.Branch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Branch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.Branch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.Branch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.Branch)
  return false;
#undef DO_
}

void Branch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.Branch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.Branch)
}

::google::protobuf::uint8* Branch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.Branch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.Branch)
  return target;
}

size_t Branch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.Branch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Branch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  const Branch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Branch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.Branch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.Branch)
    MergeFrom(*source);
  }
}

void Branch::MergeFrom(const Branch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Branch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Branch::CopyFrom(const Branch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Branch::IsInitialized() const {
  return true;
}

void Branch::Swap(Branch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Branch::InternalSwap(Branch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Branch::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogicalPlan_Operator::InitAsDefaultInstance() {
  ::algebra::_LogicalPlan_Operator_default_instance_.project_ = const_cast< ::algebra::Project*>(
      ::algebra::Project::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.select_ = const_cast< ::algebra::Select*>(
      ::algebra::Select::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.join_ = const_cast< ::algebra::Join*>(
      ::algebra::Join::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.union__ = const_cast< ::algebra::Union*>(
      ::algebra::Union::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.group_by_ = const_cast< ::algebra::GroupBy*>(
      ::algebra::GroupBy::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.order_by_ = const_cast< ::algebra::OrderBy*>(
      ::algebra::OrderBy::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.dedup_ = const_cast< ::algebra::Dedup*>(
      ::algebra::Dedup::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.unfold_ = const_cast< ::algebra::Unfold*>(
      ::algebra::Unfold::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.apply_ = const_cast< ::algebra::Apply*>(
      ::algebra::Apply::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.seg_apply_ = const_cast< ::algebra::SegmentApply*>(
      ::algebra::SegmentApply::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.scan_ = const_cast< ::algebra::Scan*>(
      ::algebra::Scan::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.limit_ = const_cast< ::algebra::Limit*>(
      ::algebra::Limit::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.as_ = const_cast< ::algebra::As*>(
      ::algebra::As::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.intersect_ = const_cast< ::algebra::Intersect*>(
      ::algebra::Intersect::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.sink_ = const_cast< ::algebra::Sink*>(
      ::algebra::Sink::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.root_ = const_cast< ::algebra::Root*>(
      ::algebra::Root::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.sample_ = const_cast< ::algebra::Sample*>(
      ::algebra::Sample::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.branch_ = const_cast< ::algebra::Branch*>(
      ::algebra::Branch::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.vertex_ = const_cast< ::algebra::GetV*>(
      ::algebra::GetV::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.edge_ = const_cast< ::algebra::EdgeExpand*>(
      ::algebra::EdgeExpand::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.path_ = const_cast< ::algebra::PathExpand*>(
      ::algebra::PathExpand::internal_default_instance());
  ::algebra::_LogicalPlan_Operator_default_instance_.pattern_ = const_cast< ::algebra::Pattern*>(
      ::algebra::Pattern::internal_default_instance());
}
void LogicalPlan_Operator::set_allocated_project(::algebra::Project* project) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (project) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      project = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    opr_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.project)
}
void LogicalPlan_Operator::set_allocated_select(::algebra::Select* select) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (select) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    opr_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.select)
}
void LogicalPlan_Operator::set_allocated_join(::algebra::Join* join) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (join) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    opr_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.join)
}
void LogicalPlan_Operator::set_allocated_union_(::algebra::Union* union_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (union_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      union_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, union_, submessage_arena);
    }
    set_has_union_();
    opr_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.union)
}
void LogicalPlan_Operator::set_allocated_group_by(::algebra::GroupBy* group_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (group_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_by, submessage_arena);
    }
    set_has_group_by();
    opr_.group_by_ = group_by;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.group_by)
}
void LogicalPlan_Operator::set_allocated_order_by(::algebra::OrderBy* order_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (order_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      order_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order_by, submessage_arena);
    }
    set_has_order_by();
    opr_.order_by_ = order_by;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.order_by)
}
void LogicalPlan_Operator::set_allocated_dedup(::algebra::Dedup* dedup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (dedup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dedup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dedup, submessage_arena);
    }
    set_has_dedup();
    opr_.dedup_ = dedup;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.dedup)
}
void LogicalPlan_Operator::set_allocated_unfold(::algebra::Unfold* unfold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (unfold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unfold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unfold, submessage_arena);
    }
    set_has_unfold();
    opr_.unfold_ = unfold;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.unfold)
}
void LogicalPlan_Operator::set_allocated_apply(::algebra::Apply* apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (apply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply, submessage_arena);
    }
    set_has_apply();
    opr_.apply_ = apply;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.apply)
}
void LogicalPlan_Operator::set_allocated_seg_apply(::algebra::SegmentApply* seg_apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (seg_apply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      seg_apply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, seg_apply, submessage_arena);
    }
    set_has_seg_apply();
    opr_.seg_apply_ = seg_apply;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.seg_apply)
}
void LogicalPlan_Operator::set_allocated_scan(::algebra::Scan* scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    set_has_scan();
    opr_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.scan)
}
void LogicalPlan_Operator::set_allocated_limit(::algebra::Limit* limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    set_has_limit();
    opr_.limit_ = limit;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.limit)
}
void LogicalPlan_Operator::set_allocated_as(::algebra::As* as) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (as) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      as = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as, submessage_arena);
    }
    set_has_as();
    opr_.as_ = as;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.as)
}
void LogicalPlan_Operator::set_allocated_intersect(::algebra::Intersect* intersect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (intersect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intersect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersect, submessage_arena);
    }
    set_has_intersect();
    opr_.intersect_ = intersect;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.intersect)
}
void LogicalPlan_Operator::set_allocated_sink(::algebra::Sink* sink) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (sink) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sink = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sink, submessage_arena);
    }
    set_has_sink();
    opr_.sink_ = sink;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.sink)
}
void LogicalPlan_Operator::set_allocated_root(::algebra::Root* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    set_has_root();
    opr_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.root)
}
void LogicalPlan_Operator::set_allocated_sample(::algebra::Sample* sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (sample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    set_has_sample();
    opr_.sample_ = sample;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.sample)
}
void LogicalPlan_Operator::set_allocated_branch(::algebra::Branch* branch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (branch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      branch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch, submessage_arena);
    }
    set_has_branch();
    opr_.branch_ = branch;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.branch)
}
void LogicalPlan_Operator::set_allocated_vertex(::algebra::GetV* vertex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (vertex) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vertex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vertex, submessage_arena);
    }
    set_has_vertex();
    opr_.vertex_ = vertex;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.vertex)
}
void LogicalPlan_Operator::set_allocated_edge(::algebra::EdgeExpand* edge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (edge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      edge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    set_has_edge();
    opr_.edge_ = edge;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.edge)
}
void LogicalPlan_Operator::set_allocated_path(::algebra::PathExpand* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    set_has_path();
    opr_.path_ = path;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.path)
}
void LogicalPlan_Operator::set_allocated_pattern(::algebra::Pattern* pattern) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_opr();
  if (pattern) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pattern = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pattern, submessage_arena);
    }
    set_has_pattern();
    opr_.pattern_ = pattern;
  }
  // @@protoc_insertion_point(field_set_allocated:algebra.LogicalPlan.Operator.pattern)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalPlan_Operator::kProjectFieldNumber;
const int LogicalPlan_Operator::kSelectFieldNumber;
const int LogicalPlan_Operator::kJoinFieldNumber;
const int LogicalPlan_Operator::kUnionFieldNumber;
const int LogicalPlan_Operator::kGroupByFieldNumber;
const int LogicalPlan_Operator::kOrderByFieldNumber;
const int LogicalPlan_Operator::kDedupFieldNumber;
const int LogicalPlan_Operator::kUnfoldFieldNumber;
const int LogicalPlan_Operator::kApplyFieldNumber;
const int LogicalPlan_Operator::kSegApplyFieldNumber;
const int LogicalPlan_Operator::kScanFieldNumber;
const int LogicalPlan_Operator::kLimitFieldNumber;
const int LogicalPlan_Operator::kAsFieldNumber;
const int LogicalPlan_Operator::kIntersectFieldNumber;
const int LogicalPlan_Operator::kSinkFieldNumber;
const int LogicalPlan_Operator::kRootFieldNumber;
const int LogicalPlan_Operator::kSampleFieldNumber;
const int LogicalPlan_Operator::kBranchFieldNumber;
const int LogicalPlan_Operator::kVertexFieldNumber;
const int LogicalPlan_Operator::kEdgeFieldNumber;
const int LogicalPlan_Operator::kPathFieldNumber;
const int LogicalPlan_Operator::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalPlan_Operator::LogicalPlan_Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_LogicalPlan_Operator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.LogicalPlan.Operator)
}
LogicalPlan_Operator::LogicalPlan_Operator(const LogicalPlan_Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_opr();
  switch (from.opr_case()) {
    case kProject: {
      mutable_project()->::algebra::Project::MergeFrom(from.project());
      break;
    }
    case kSelect: {
      mutable_select()->::algebra::Select::MergeFrom(from.select());
      break;
    }
    case kJoin: {
      mutable_join()->::algebra::Join::MergeFrom(from.join());
      break;
    }
    case kUnion: {
      mutable_union_()->::algebra::Union::MergeFrom(from.union_());
      break;
    }
    case kGroupBy: {
      mutable_group_by()->::algebra::GroupBy::MergeFrom(from.group_by());
      break;
    }
    case kOrderBy: {
      mutable_order_by()->::algebra::OrderBy::MergeFrom(from.order_by());
      break;
    }
    case kDedup: {
      mutable_dedup()->::algebra::Dedup::MergeFrom(from.dedup());
      break;
    }
    case kUnfold: {
      mutable_unfold()->::algebra::Unfold::MergeFrom(from.unfold());
      break;
    }
    case kApply: {
      mutable_apply()->::algebra::Apply::MergeFrom(from.apply());
      break;
    }
    case kSegApply: {
      mutable_seg_apply()->::algebra::SegmentApply::MergeFrom(from.seg_apply());
      break;
    }
    case kScan: {
      mutable_scan()->::algebra::Scan::MergeFrom(from.scan());
      break;
    }
    case kLimit: {
      mutable_limit()->::algebra::Limit::MergeFrom(from.limit());
      break;
    }
    case kAs: {
      mutable_as()->::algebra::As::MergeFrom(from.as());
      break;
    }
    case kIntersect: {
      mutable_intersect()->::algebra::Intersect::MergeFrom(from.intersect());
      break;
    }
    case kSink: {
      mutable_sink()->::algebra::Sink::MergeFrom(from.sink());
      break;
    }
    case kRoot: {
      mutable_root()->::algebra::Root::MergeFrom(from.root());
      break;
    }
    case kSample: {
      mutable_sample()->::algebra::Sample::MergeFrom(from.sample());
      break;
    }
    case kBranch: {
      mutable_branch()->::algebra::Branch::MergeFrom(from.branch());
      break;
    }
    case kVertex: {
      mutable_vertex()->::algebra::GetV::MergeFrom(from.vertex());
      break;
    }
    case kEdge: {
      mutable_edge()->::algebra::EdgeExpand::MergeFrom(from.edge());
      break;
    }
    case kPath: {
      mutable_path()->::algebra::PathExpand::MergeFrom(from.path());
      break;
    }
    case kPattern: {
      mutable_pattern()->::algebra::Pattern::MergeFrom(from.pattern());
      break;
    }
    case OPR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:algebra.LogicalPlan.Operator)
}

void LogicalPlan_Operator::SharedCtor() {
  clear_has_opr();
}

LogicalPlan_Operator::~LogicalPlan_Operator() {
  // @@protoc_insertion_point(destructor:algebra.LogicalPlan.Operator)
  SharedDtor();
}

void LogicalPlan_Operator::SharedDtor() {
  if (has_opr()) {
    clear_opr();
  }
}

void LogicalPlan_Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogicalPlan_Operator::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogicalPlan_Operator& LogicalPlan_Operator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_LogicalPlan_Operator.base);
  return *internal_default_instance();
}


void LogicalPlan_Operator::clear_opr() {
// @@protoc_insertion_point(one_of_clear_start:algebra.LogicalPlan.Operator)
  switch (opr_case()) {
    case kProject: {
      delete opr_.project_;
      break;
    }
    case kSelect: {
      delete opr_.select_;
      break;
    }
    case kJoin: {
      delete opr_.join_;
      break;
    }
    case kUnion: {
      delete opr_.union__;
      break;
    }
    case kGroupBy: {
      delete opr_.group_by_;
      break;
    }
    case kOrderBy: {
      delete opr_.order_by_;
      break;
    }
    case kDedup: {
      delete opr_.dedup_;
      break;
    }
    case kUnfold: {
      delete opr_.unfold_;
      break;
    }
    case kApply: {
      delete opr_.apply_;
      break;
    }
    case kSegApply: {
      delete opr_.seg_apply_;
      break;
    }
    case kScan: {
      delete opr_.scan_;
      break;
    }
    case kLimit: {
      delete opr_.limit_;
      break;
    }
    case kAs: {
      delete opr_.as_;
      break;
    }
    case kIntersect: {
      delete opr_.intersect_;
      break;
    }
    case kSink: {
      delete opr_.sink_;
      break;
    }
    case kRoot: {
      delete opr_.root_;
      break;
    }
    case kSample: {
      delete opr_.sample_;
      break;
    }
    case kBranch: {
      delete opr_.branch_;
      break;
    }
    case kVertex: {
      delete opr_.vertex_;
      break;
    }
    case kEdge: {
      delete opr_.edge_;
      break;
    }
    case kPath: {
      delete opr_.path_;
      break;
    }
    case kPattern: {
      delete opr_.pattern_;
      break;
    }
    case OPR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPR_NOT_SET;
}


void LogicalPlan_Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.LogicalPlan.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_opr();
  _internal_metadata_.Clear();
}

bool LogicalPlan_Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.LogicalPlan.Operator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.Project project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Select select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Join join = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Union union = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_union_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.GroupBy group_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.OrderBy order_by = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Dedup dedup = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dedup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Unfold unfold = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unfold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Apply apply = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.SegmentApply seg_apply = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_seg_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Scan scan = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Limit limit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.As as = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_as()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Intersect intersect = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Sink sink = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Root root = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Sample sample = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Branch branch = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_branch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.GetV vertex = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vertex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.EdgeExpand edge = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.PathExpand path = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Pattern pattern = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.LogicalPlan.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.LogicalPlan.Operator)
  return false;
#undef DO_
}

void LogicalPlan_Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.LogicalPlan.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Project project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_project(), output);
  }

  // .algebra.Select select = 2;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_select(), output);
  }

  // .algebra.Join join = 3;
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_join(), output);
  }

  // .algebra.Union union = 4;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_union_(), output);
  }

  // .algebra.GroupBy group_by = 5;
  if (has_group_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_group_by(), output);
  }

  // .algebra.OrderBy order_by = 6;
  if (has_order_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_order_by(), output);
  }

  // .algebra.Dedup dedup = 7;
  if (has_dedup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_dedup(), output);
  }

  // .algebra.Unfold unfold = 8;
  if (has_unfold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_unfold(), output);
  }

  // .algebra.Apply apply = 9;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_apply(), output);
  }

  // .algebra.SegmentApply seg_apply = 10;
  if (has_seg_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_seg_apply(), output);
  }

  // .algebra.Scan scan = 11;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_scan(), output);
  }

  // .algebra.Limit limit = 12;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_limit(), output);
  }

  // .algebra.As as = 14;
  if (has_as()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_as(), output);
  }

  // .algebra.Intersect intersect = 15;
  if (has_intersect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_intersect(), output);
  }

  // .algebra.Sink sink = 16;
  if (has_sink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_sink(), output);
  }

  // .algebra.Root root = 17;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_root(), output);
  }

  // .algebra.Sample sample = 18;
  if (has_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_sample(), output);
  }

  // .algebra.Branch branch = 19;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_branch(), output);
  }

  // .algebra.GetV vertex = 30;
  if (has_vertex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_vertex(), output);
  }

  // .algebra.EdgeExpand edge = 31;
  if (has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_edge(), output);
  }

  // .algebra.PathExpand path = 32;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_path(), output);
  }

  // .algebra.Pattern pattern = 35;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->_internal_pattern(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.LogicalPlan.Operator)
}

::google::protobuf::uint8* LogicalPlan_Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.LogicalPlan.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.Project project = 1;
  if (has_project()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_project(), deterministic, target);
  }

  // .algebra.Select select = 2;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_select(), deterministic, target);
  }

  // .algebra.Join join = 3;
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_join(), deterministic, target);
  }

  // .algebra.Union union = 4;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_union_(), deterministic, target);
  }

  // .algebra.GroupBy group_by = 5;
  if (has_group_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_group_by(), deterministic, target);
  }

  // .algebra.OrderBy order_by = 6;
  if (has_order_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_order_by(), deterministic, target);
  }

  // .algebra.Dedup dedup = 7;
  if (has_dedup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_dedup(), deterministic, target);
  }

  // .algebra.Unfold unfold = 8;
  if (has_unfold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_unfold(), deterministic, target);
  }

  // .algebra.Apply apply = 9;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_apply(), deterministic, target);
  }

  // .algebra.SegmentApply seg_apply = 10;
  if (has_seg_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_seg_apply(), deterministic, target);
  }

  // .algebra.Scan scan = 11;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_scan(), deterministic, target);
  }

  // .algebra.Limit limit = 12;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_limit(), deterministic, target);
  }

  // .algebra.As as = 14;
  if (has_as()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_as(), deterministic, target);
  }

  // .algebra.Intersect intersect = 15;
  if (has_intersect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_intersect(), deterministic, target);
  }

  // .algebra.Sink sink = 16;
  if (has_sink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_sink(), deterministic, target);
  }

  // .algebra.Root root = 17;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_root(), deterministic, target);
  }

  // .algebra.Sample sample = 18;
  if (has_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_sample(), deterministic, target);
  }

  // .algebra.Branch branch = 19;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_branch(), deterministic, target);
  }

  // .algebra.GetV vertex = 30;
  if (has_vertex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_vertex(), deterministic, target);
  }

  // .algebra.EdgeExpand edge = 31;
  if (has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_edge(), deterministic, target);
  }

  // .algebra.PathExpand path = 32;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_path(), deterministic, target);
  }

  // .algebra.Pattern pattern = 35;
  if (has_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, this->_internal_pattern(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.LogicalPlan.Operator)
  return target;
}

size_t LogicalPlan_Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.LogicalPlan.Operator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (opr_case()) {
    // .algebra.Project project = 1;
    case kProject: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.project_);
      break;
    }
    // .algebra.Select select = 2;
    case kSelect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.select_);
      break;
    }
    // .algebra.Join join = 3;
    case kJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.join_);
      break;
    }
    // .algebra.Union union = 4;
    case kUnion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.union__);
      break;
    }
    // .algebra.GroupBy group_by = 5;
    case kGroupBy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.group_by_);
      break;
    }
    // .algebra.OrderBy order_by = 6;
    case kOrderBy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.order_by_);
      break;
    }
    // .algebra.Dedup dedup = 7;
    case kDedup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.dedup_);
      break;
    }
    // .algebra.Unfold unfold = 8;
    case kUnfold: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.unfold_);
      break;
    }
    // .algebra.Apply apply = 9;
    case kApply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.apply_);
      break;
    }
    // .algebra.SegmentApply seg_apply = 10;
    case kSegApply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.seg_apply_);
      break;
    }
    // .algebra.Scan scan = 11;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.scan_);
      break;
    }
    // .algebra.Limit limit = 12;
    case kLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.limit_);
      break;
    }
    // .algebra.As as = 14;
    case kAs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.as_);
      break;
    }
    // .algebra.Intersect intersect = 15;
    case kIntersect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.intersect_);
      break;
    }
    // .algebra.Sink sink = 16;
    case kSink: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.sink_);
      break;
    }
    // .algebra.Root root = 17;
    case kRoot: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.root_);
      break;
    }
    // .algebra.Sample sample = 18;
    case kSample: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.sample_);
      break;
    }
    // .algebra.Branch branch = 19;
    case kBranch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.branch_);
      break;
    }
    // .algebra.GetV vertex = 30;
    case kVertex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.vertex_);
      break;
    }
    // .algebra.EdgeExpand edge = 31;
    case kEdge: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.edge_);
      break;
    }
    // .algebra.PathExpand path = 32;
    case kPath: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.path_);
      break;
    }
    // .algebra.Pattern pattern = 35;
    case kPattern: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *opr_.pattern_);
      break;
    }
    case OPR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalPlan_Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.LogicalPlan.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalPlan_Operator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicalPlan_Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.LogicalPlan.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.LogicalPlan.Operator)
    MergeFrom(*source);
  }
}

void LogicalPlan_Operator::MergeFrom(const LogicalPlan_Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.LogicalPlan.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.opr_case()) {
    case kProject: {
      mutable_project()->::algebra::Project::MergeFrom(from.project());
      break;
    }
    case kSelect: {
      mutable_select()->::algebra::Select::MergeFrom(from.select());
      break;
    }
    case kJoin: {
      mutable_join()->::algebra::Join::MergeFrom(from.join());
      break;
    }
    case kUnion: {
      mutable_union_()->::algebra::Union::MergeFrom(from.union_());
      break;
    }
    case kGroupBy: {
      mutable_group_by()->::algebra::GroupBy::MergeFrom(from.group_by());
      break;
    }
    case kOrderBy: {
      mutable_order_by()->::algebra::OrderBy::MergeFrom(from.order_by());
      break;
    }
    case kDedup: {
      mutable_dedup()->::algebra::Dedup::MergeFrom(from.dedup());
      break;
    }
    case kUnfold: {
      mutable_unfold()->::algebra::Unfold::MergeFrom(from.unfold());
      break;
    }
    case kApply: {
      mutable_apply()->::algebra::Apply::MergeFrom(from.apply());
      break;
    }
    case kSegApply: {
      mutable_seg_apply()->::algebra::SegmentApply::MergeFrom(from.seg_apply());
      break;
    }
    case kScan: {
      mutable_scan()->::algebra::Scan::MergeFrom(from.scan());
      break;
    }
    case kLimit: {
      mutable_limit()->::algebra::Limit::MergeFrom(from.limit());
      break;
    }
    case kAs: {
      mutable_as()->::algebra::As::MergeFrom(from.as());
      break;
    }
    case kIntersect: {
      mutable_intersect()->::algebra::Intersect::MergeFrom(from.intersect());
      break;
    }
    case kSink: {
      mutable_sink()->::algebra::Sink::MergeFrom(from.sink());
      break;
    }
    case kRoot: {
      mutable_root()->::algebra::Root::MergeFrom(from.root());
      break;
    }
    case kSample: {
      mutable_sample()->::algebra::Sample::MergeFrom(from.sample());
      break;
    }
    case kBranch: {
      mutable_branch()->::algebra::Branch::MergeFrom(from.branch());
      break;
    }
    case kVertex: {
      mutable_vertex()->::algebra::GetV::MergeFrom(from.vertex());
      break;
    }
    case kEdge: {
      mutable_edge()->::algebra::EdgeExpand::MergeFrom(from.edge());
      break;
    }
    case kPath: {
      mutable_path()->::algebra::PathExpand::MergeFrom(from.path());
      break;
    }
    case kPattern: {
      mutable_pattern()->::algebra::Pattern::MergeFrom(from.pattern());
      break;
    }
    case OPR_NOT_SET: {
      break;
    }
  }
}

void LogicalPlan_Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.LogicalPlan.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalPlan_Operator::CopyFrom(const LogicalPlan_Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.LogicalPlan.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalPlan_Operator::IsInitialized() const {
  return true;
}

void LogicalPlan_Operator::Swap(LogicalPlan_Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalPlan_Operator::InternalSwap(LogicalPlan_Operator* other) {
  using std::swap;
  swap(opr_, other->opr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogicalPlan_Operator::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogicalPlan_Node::InitAsDefaultInstance() {
  ::algebra::_LogicalPlan_Node_default_instance_._instance.get_mutable()->opr_ = const_cast< ::algebra::LogicalPlan_Operator*>(
      ::algebra::LogicalPlan_Operator::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalPlan_Node::kOprFieldNumber;
const int LogicalPlan_Node::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalPlan_Node::LogicalPlan_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_LogicalPlan_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.LogicalPlan.Node)
}
LogicalPlan_Node::LogicalPlan_Node(const LogicalPlan_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_opr()) {
    opr_ = new ::algebra::LogicalPlan_Operator(*from.opr_);
  } else {
    opr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:algebra.LogicalPlan.Node)
}

void LogicalPlan_Node::SharedCtor() {
  opr_ = NULL;
}

LogicalPlan_Node::~LogicalPlan_Node() {
  // @@protoc_insertion_point(destructor:algebra.LogicalPlan.Node)
  SharedDtor();
}

void LogicalPlan_Node::SharedDtor() {
  if (this != internal_default_instance()) delete opr_;
}

void LogicalPlan_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogicalPlan_Node::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogicalPlan_Node& LogicalPlan_Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_LogicalPlan_Node.base);
  return *internal_default_instance();
}


void LogicalPlan_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.LogicalPlan.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  if (GetArenaNoVirtual() == NULL && opr_ != NULL) {
    delete opr_;
  }
  opr_ = NULL;
  _internal_metadata_.Clear();
}

bool LogicalPlan_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.LogicalPlan.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .algebra.LogicalPlan.Operator opr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_opr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 children = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_children())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_children())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.LogicalPlan.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.LogicalPlan.Node)
  return false;
#undef DO_
}

void LogicalPlan_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.LogicalPlan.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.LogicalPlan.Operator opr = 1;
  if (this->has_opr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_opr(), output);
  }

  // repeated int32 children = 2;
  if (this->children_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _children_cached_byte_size_));
  }
  for (int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->children(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.LogicalPlan.Node)
}

::google::protobuf::uint8* LogicalPlan_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.LogicalPlan.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .algebra.LogicalPlan.Operator opr = 1;
  if (this->has_opr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_opr(), deterministic, target);
  }

  // repeated int32 children = 2;
  if (this->children_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _children_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->children_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.LogicalPlan.Node)
  return target;
}

size_t LogicalPlan_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.LogicalPlan.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 children = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->children_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _children_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .algebra.LogicalPlan.Operator opr = 1;
  if (this->has_opr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *opr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalPlan_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.LogicalPlan.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalPlan_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicalPlan_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.LogicalPlan.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.LogicalPlan.Node)
    MergeFrom(*source);
  }
}

void LogicalPlan_Node::MergeFrom(const LogicalPlan_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.LogicalPlan.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.has_opr()) {
    mutable_opr()->::algebra::LogicalPlan_Operator::MergeFrom(from.opr());
  }
}

void LogicalPlan_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.LogicalPlan.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalPlan_Node::CopyFrom(const LogicalPlan_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.LogicalPlan.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalPlan_Node::IsInitialized() const {
  return true;
}

void LogicalPlan_Node::Swap(LogicalPlan_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalPlan_Node::InternalSwap(LogicalPlan_Node* other) {
  using std::swap;
  children_.InternalSwap(&other->children_);
  swap(opr_, other->opr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogicalPlan_Node::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogicalPlan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalPlan::kNodesFieldNumber;
const int LogicalPlan::kRootsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalPlan::LogicalPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_algebra_2eproto::scc_info_LogicalPlan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:algebra.LogicalPlan)
}
LogicalPlan::LogicalPlan(const LogicalPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      roots_(from.roots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:algebra.LogicalPlan)
}

void LogicalPlan::SharedCtor() {
}

LogicalPlan::~LogicalPlan() {
  // @@protoc_insertion_point(destructor:algebra.LogicalPlan)
  SharedDtor();
}

void LogicalPlan::SharedDtor() {
}

void LogicalPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogicalPlan::descriptor() {
  ::protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogicalPlan& LogicalPlan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_algebra_2eproto::scc_info_LogicalPlan.base);
  return *internal_default_instance();
}


void LogicalPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:algebra.LogicalPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  roots_.Clear();
  _internal_metadata_.Clear();
}

bool LogicalPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algebra.LogicalPlan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .algebra.LogicalPlan.Node nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 roots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roots())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_roots())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algebra.LogicalPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algebra.LogicalPlan)
  return false;
#undef DO_
}

void LogicalPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algebra.LogicalPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.LogicalPlan.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated int32 roots = 2;
  if (this->roots_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _roots_cached_byte_size_));
  }
  for (int i = 0, n = this->roots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->roots(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algebra.LogicalPlan)
}

::google::protobuf::uint8* LogicalPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algebra.LogicalPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .algebra.LogicalPlan.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 roots = 2;
  if (this->roots_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _roots_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->roots_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algebra.LogicalPlan)
  return target;
}

size_t LogicalPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algebra.LogicalPlan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .algebra.LogicalPlan.Node nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated int32 roots = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->roots_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _roots_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algebra.LogicalPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogicalPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algebra.LogicalPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algebra.LogicalPlan)
    MergeFrom(*source);
  }
}

void LogicalPlan::MergeFrom(const LogicalPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algebra.LogicalPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  roots_.MergeFrom(from.roots_);
}

void LogicalPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algebra.LogicalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalPlan::CopyFrom(const LogicalPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algebra.LogicalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalPlan::IsInitialized() const {
  return true;
}

void LogicalPlan::Swap(LogicalPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalPlan::InternalSwap(LogicalPlan* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  roots_.InternalSwap(&other->roots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogicalPlan::GetMetadata() const {
  protobuf_algebra_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_algebra_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace algebra
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::MetaData* Arena::CreateMaybeMessage< ::algebra::MetaData >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::MetaData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Project_ExprAlias* Arena::CreateMaybeMessage< ::algebra::Project_ExprAlias >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Project_ExprAlias >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Project* Arena::CreateMaybeMessage< ::algebra::Project >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Project >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Select* Arena::CreateMaybeMessage< ::algebra::Select >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Select >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Join* Arena::CreateMaybeMessage< ::algebra::Join >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Union* Arena::CreateMaybeMessage< ::algebra::Union >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Union >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Intersect* Arena::CreateMaybeMessage< ::algebra::Intersect >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Intersect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::GroupBy_AggFunc* Arena::CreateMaybeMessage< ::algebra::GroupBy_AggFunc >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::GroupBy_AggFunc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::GroupBy_KeyAlias* Arena::CreateMaybeMessage< ::algebra::GroupBy_KeyAlias >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::GroupBy_KeyAlias >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::GroupBy* Arena::CreateMaybeMessage< ::algebra::GroupBy >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::GroupBy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::OrderBy_OrderingPair* Arena::CreateMaybeMessage< ::algebra::OrderBy_OrderingPair >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::OrderBy_OrderingPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::OrderBy* Arena::CreateMaybeMessage< ::algebra::OrderBy >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::OrderBy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Dedup* Arena::CreateMaybeMessage< ::algebra::Dedup >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Dedup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Unfold* Arena::CreateMaybeMessage< ::algebra::Unfold >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Unfold >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Range* Arena::CreateMaybeMessage< ::algebra::Range >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Range >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Limit* Arena::CreateMaybeMessage< ::algebra::Limit >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Limit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::IndexPredicate_Triplet* Arena::CreateMaybeMessage< ::algebra::IndexPredicate_Triplet >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::IndexPredicate_Triplet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::IndexPredicate_AndPredicate* Arena::CreateMaybeMessage< ::algebra::IndexPredicate_AndPredicate >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::IndexPredicate_AndPredicate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::IndexPredicate* Arena::CreateMaybeMessage< ::algebra::IndexPredicate >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::IndexPredicate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::QueryParams_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage< ::algebra::QueryParams_ExtraEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::QueryParams_ExtraEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::QueryParams* Arena::CreateMaybeMessage< ::algebra::QueryParams >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::QueryParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Scan* Arena::CreateMaybeMessage< ::algebra::Scan >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Scan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::GetV* Arena::CreateMaybeMessage< ::algebra::GetV >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::GetV >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::As* Arena::CreateMaybeMessage< ::algebra::As >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::As >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::EdgeExpand* Arena::CreateMaybeMessage< ::algebra::EdgeExpand >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::EdgeExpand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::PathExpand_ExpandBase* Arena::CreateMaybeMessage< ::algebra::PathExpand_ExpandBase >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::PathExpand_ExpandBase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::PathExpand* Arena::CreateMaybeMessage< ::algebra::PathExpand >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::PathExpand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Apply* Arena::CreateMaybeMessage< ::algebra::Apply >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Apply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::SegmentApply* Arena::CreateMaybeMessage< ::algebra::SegmentApply >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::SegmentApply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Pattern_Binder* Arena::CreateMaybeMessage< ::algebra::Pattern_Binder >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Pattern_Binder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Pattern_Sentence* Arena::CreateMaybeMessage< ::algebra::Pattern_Sentence >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Pattern_Sentence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Pattern* Arena::CreateMaybeMessage< ::algebra::Pattern >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Pattern >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Sample_SampleByRatio* Arena::CreateMaybeMessage< ::algebra::Sample_SampleByRatio >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Sample_SampleByRatio >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Sample_SampleByNum* Arena::CreateMaybeMessage< ::algebra::Sample_SampleByNum >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Sample_SampleByNum >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Sample_SampleType* Arena::CreateMaybeMessage< ::algebra::Sample_SampleType >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Sample_SampleType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Sample* Arena::CreateMaybeMessage< ::algebra::Sample >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Sample >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Sink_SinkTarget* Arena::CreateMaybeMessage< ::algebra::Sink_SinkTarget >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Sink_SinkTarget >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Sink* Arena::CreateMaybeMessage< ::algebra::Sink >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Sink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::SinkDefault_IdNameMapping* Arena::CreateMaybeMessage< ::algebra::SinkDefault_IdNameMapping >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::SinkDefault_IdNameMapping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::SinkDefault* Arena::CreateMaybeMessage< ::algebra::SinkDefault >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::SinkDefault >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::SinkVineyard* Arena::CreateMaybeMessage< ::algebra::SinkVineyard >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::SinkVineyard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Root* Arena::CreateMaybeMessage< ::algebra::Root >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Root >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::Branch* Arena::CreateMaybeMessage< ::algebra::Branch >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::Branch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::LogicalPlan_Operator* Arena::CreateMaybeMessage< ::algebra::LogicalPlan_Operator >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::LogicalPlan_Operator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::LogicalPlan_Node* Arena::CreateMaybeMessage< ::algebra::LogicalPlan_Node >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::LogicalPlan_Node >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::algebra::LogicalPlan* Arena::CreateMaybeMessage< ::algebra::LogicalPlan >(Arena* arena) {
  return Arena::CreateInternal< ::algebra::LogicalPlan >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
