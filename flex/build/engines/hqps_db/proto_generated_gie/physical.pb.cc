// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: physical.proto

#include "physical.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_algebra_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Range;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Dedup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IndexPredicate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Limit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Select;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_OrderBy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sink_SinkTarget;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Sample;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_algebra_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_QueryParams;
}  // namespace protobuf_algebra_2eproto
namespace protobuf_expr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_expr_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Variable;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_expr_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Case;
}  // namespace protobuf_expr_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_physical_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Repartition_Broadcast;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Root;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<18> scc_info_Apply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PhysicalOpr_MetaData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Project;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Repartition_Shuffle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Sink_OptTag;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Unfold;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EdgeExpand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetV;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_AggFunc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_KeyAlias;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PathExpand_ExpandBase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Project_ExprAlias;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Repartition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Scan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_physical_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_PathExpand;
}  // namespace protobuf_physical_2eproto
namespace protobuf_type_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_type_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IrDataType;
}  // namespace protobuf_type_2eproto
namespace physical {
class Project_ExprAliasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Project_ExprAlias>
      _instance;
} _Project_ExprAlias_default_instance_;
class ProjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Project>
      _instance;
} _Project_default_instance_;
class GroupBy_AggFuncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBy_AggFunc>
      _instance;
} _GroupBy_AggFunc_default_instance_;
class GroupBy_KeyAliasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBy_KeyAlias>
      _instance;
} _GroupBy_KeyAlias_default_instance_;
class GroupByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBy>
      _instance;
} _GroupBy_default_instance_;
class UnfoldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unfold>
      _instance;
} _Unfold_default_instance_;
class UnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Union>
      _instance;
} _Union_default_instance_;
class IntersectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Intersect>
      _instance;
} _Intersect_default_instance_;
class JoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Join>
      _instance;
} _Join_default_instance_;
class ApplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Apply>
      _instance;
} _Apply_default_instance_;
class ScanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scan>
      _instance;
} _Scan_default_instance_;
class GetVDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetV>
      _instance;
} _GetV_default_instance_;
class EdgeExpandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EdgeExpand>
      _instance;
} _EdgeExpand_default_instance_;
class PathExpand_ExpandBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathExpand_ExpandBase>
      _instance;
} _PathExpand_ExpandBase_default_instance_;
class PathExpandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathExpand>
      _instance;
} _PathExpand_default_instance_;
class Sink_OptTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sink_OptTag>
      _instance;
} _Sink_OptTag_default_instance_;
class SinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sink>
      _instance;
} _Sink_default_instance_;
class Repartition_ShuffleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Repartition_Shuffle>
      _instance;
} _Repartition_Shuffle_default_instance_;
class Repartition_BroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Repartition_Broadcast>
      _instance;
} _Repartition_Broadcast_default_instance_;
class RepartitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Repartition>
      _instance;
  const ::physical::Repartition_Shuffle* to_another_;
  const ::physical::Repartition_Broadcast* to_others_;
} _Repartition_default_instance_;
class RootDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Root>
      _instance;
} _Root_default_instance_;
class PhysicalOpr_OperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhysicalOpr_Operator>
      _instance;
  const ::physical::Project* project_;
  const ::algebra::Select* select_;
  const ::physical::GroupBy* group_by_;
  const ::algebra::OrderBy* order_by_;
  const ::algebra::Dedup* dedup_;
  const ::physical::Unfold* unfold_;
  const ::algebra::Limit* limit_;
  const ::physical::Scan* scan_;
  const ::physical::Sink* sink_;
  const ::physical::Apply* apply_;
  const ::physical::Join* join_;
  const ::physical::Union* union__;
  const ::physical::Intersect* intersect_;
  const ::physical::Repartition* repartition_;
  const ::physical::Root* root_;
  const ::algebra::Sample* sample_;
  const ::physical::GetV* vertex_;
  const ::physical::EdgeExpand* edge_;
  const ::physical::PathExpand* path_;
} _PhysicalOpr_Operator_default_instance_;
class PhysicalOpr_MetaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhysicalOpr_MetaData>
      _instance;
} _PhysicalOpr_MetaData_default_instance_;
class PhysicalOprDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhysicalOpr>
      _instance;
} _PhysicalOpr_default_instance_;
class PhysicalPlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhysicalPlan>
      _instance;
} _PhysicalPlan_default_instance_;
}  // namespace physical
namespace protobuf_physical_2eproto {
static void InitDefaultsProject_ExprAlias() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Project_ExprAlias_default_instance_;
    new (ptr) ::physical::Project_ExprAlias();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Project_ExprAlias::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Project_ExprAlias =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProject_ExprAlias}, {
      &protobuf_expr_2eproto::scc_info_Case.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsProject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Project_default_instance_;
    new (ptr) ::physical::Project();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Project::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Project =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProject}, {
      &protobuf_physical_2eproto::scc_info_Project_ExprAlias.base,}};

static void InitDefaultsGroupBy_AggFunc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_GroupBy_AggFunc_default_instance_;
    new (ptr) ::physical::GroupBy_AggFunc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::GroupBy_AggFunc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_AggFunc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroupBy_AggFunc}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsGroupBy_KeyAlias() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_GroupBy_KeyAlias_default_instance_;
    new (ptr) ::physical::GroupBy_KeyAlias();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::GroupBy_KeyAlias::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy_KeyAlias =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroupBy_KeyAlias}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsGroupBy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_GroupBy_default_instance_;
    new (ptr) ::physical::GroupBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::GroupBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GroupBy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGroupBy}, {
      &protobuf_physical_2eproto::scc_info_GroupBy_KeyAlias.base,
      &protobuf_physical_2eproto::scc_info_GroupBy_AggFunc.base,}};

static void InitDefaultsUnfold() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Unfold_default_instance_;
    new (ptr) ::physical::Unfold();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Unfold::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Unfold =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnfold}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsApply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Union_default_instance_;
    new (ptr) ::physical::Union();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::physical::_Intersect_default_instance_;
    new (ptr) ::physical::Intersect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::physical::_Join_default_instance_;
    new (ptr) ::physical::Join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::physical::_Apply_default_instance_;
    new (ptr) ::physical::Apply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::physical::_PhysicalOpr_Operator_default_instance_;
    new (ptr) ::physical::PhysicalOpr_Operator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::physical::_PhysicalOpr_default_instance_;
    new (ptr) ::physical::PhysicalOpr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::physical::_PhysicalPlan_default_instance_;
    new (ptr) ::physical::PhysicalPlan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Union::InitAsDefaultInstance();
  ::physical::Intersect::InitAsDefaultInstance();
  ::physical::Join::InitAsDefaultInstance();
  ::physical::Apply::InitAsDefaultInstance();
  ::physical::PhysicalOpr_Operator::InitAsDefaultInstance();
  ::physical::PhysicalOpr::InitAsDefaultInstance();
  ::physical::PhysicalPlan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<18> scc_info_Apply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 18, InitDefaultsApply}, {
      &protobuf_expr_2eproto::scc_info_Variable.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_physical_2eproto::scc_info_PhysicalOpr_MetaData.base,
      &protobuf_physical_2eproto::scc_info_Project.base,
      &protobuf_algebra_2eproto::scc_info_Select.base,
      &protobuf_physical_2eproto::scc_info_GroupBy.base,
      &protobuf_algebra_2eproto::scc_info_OrderBy.base,
      &protobuf_algebra_2eproto::scc_info_Dedup.base,
      &protobuf_physical_2eproto::scc_info_Unfold.base,
      &protobuf_algebra_2eproto::scc_info_Limit.base,
      &protobuf_physical_2eproto::scc_info_Scan.base,
      &protobuf_physical_2eproto::scc_info_Sink.base,
      &protobuf_physical_2eproto::scc_info_Repartition.base,
      &protobuf_physical_2eproto::scc_info_Root.base,
      &protobuf_algebra_2eproto::scc_info_Sample.base,
      &protobuf_physical_2eproto::scc_info_GetV.base,
      &protobuf_physical_2eproto::scc_info_EdgeExpand.base,
      &protobuf_physical_2eproto::scc_info_PathExpand.base,}};

static void InitDefaultsScan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Scan_default_instance_;
    new (ptr) ::physical::Scan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Scan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Scan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsScan}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams.base,
      &protobuf_algebra_2eproto::scc_info_IndexPredicate.base,}};

static void InitDefaultsGetV() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_GetV_default_instance_;
    new (ptr) ::physical::GetV();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::GetV::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetV =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetV}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams.base,}};

static void InitDefaultsEdgeExpand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_EdgeExpand_default_instance_;
    new (ptr) ::physical::EdgeExpand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::EdgeExpand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EdgeExpand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEdgeExpand}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_algebra_2eproto::scc_info_QueryParams.base,}};

static void InitDefaultsPathExpand_ExpandBase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_PathExpand_ExpandBase_default_instance_;
    new (ptr) ::physical::PathExpand_ExpandBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::PathExpand_ExpandBase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PathExpand_ExpandBase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPathExpand_ExpandBase}, {
      &protobuf_physical_2eproto::scc_info_EdgeExpand.base,
      &protobuf_physical_2eproto::scc_info_GetV.base,}};

static void InitDefaultsPathExpand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_PathExpand_default_instance_;
    new (ptr) ::physical::PathExpand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::PathExpand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PathExpand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPathExpand}, {
      &protobuf_physical_2eproto::scc_info_PathExpand_ExpandBase.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_algebra_2eproto::scc_info_Range.base,
      &protobuf_expr_2eproto::scc_info_Case.base,}};

static void InitDefaultsSink_OptTag() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Sink_OptTag_default_instance_;
    new (ptr) ::physical::Sink_OptTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Sink_OptTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Sink_OptTag =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSink_OptTag}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsSink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Sink_default_instance_;
    new (ptr) ::physical::Sink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Sink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSink}, {
      &protobuf_physical_2eproto::scc_info_Sink_OptTag.base,
      &protobuf_algebra_2eproto::scc_info_Sink_SinkTarget.base,}};

static void InitDefaultsRepartition_Shuffle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Repartition_Shuffle_default_instance_;
    new (ptr) ::physical::Repartition_Shuffle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Repartition_Shuffle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Repartition_Shuffle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRepartition_Shuffle}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsRepartition_Broadcast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Repartition_Broadcast_default_instance_;
    new (ptr) ::physical::Repartition_Broadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Repartition_Broadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Repartition_Broadcast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRepartition_Broadcast}, {}};

static void InitDefaultsRepartition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Repartition_default_instance_;
    new (ptr) ::physical::Repartition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Repartition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Repartition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRepartition}, {
      &protobuf_physical_2eproto::scc_info_Repartition_Shuffle.base,
      &protobuf_physical_2eproto::scc_info_Repartition_Broadcast.base,}};

static void InitDefaultsRoot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_Root_default_instance_;
    new (ptr) ::physical::Root();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::Root::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Root =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoot}, {}};

static void InitDefaultsPhysicalOpr_MetaData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::physical::_PhysicalOpr_MetaData_default_instance_;
    new (ptr) ::physical::PhysicalOpr_MetaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::physical::PhysicalOpr_MetaData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PhysicalOpr_MetaData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPhysicalOpr_MetaData}, {
      &protobuf_type_2eproto::scc_info_IrDataType.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Project_ExprAlias.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Project.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBy_AggFunc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBy_KeyAlias.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unfold.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Apply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetV.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EdgeExpand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathExpand_ExpandBase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathExpand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sink_OptTag.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Repartition_Shuffle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Repartition_Broadcast.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Repartition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Root.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PhysicalOpr_MetaData.base);
}

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Project_ExprAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Project_ExprAlias, expr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Project_ExprAlias, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Project, mappings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Project, is_append_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_AggFunc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_AggFunc, vars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_AggFunc, aggregate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_AggFunc, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_KeyAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_KeyAlias, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy_KeyAlias, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy, mappings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GroupBy, functions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Unfold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Unfold, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Unfold, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Union, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Union, sub_plans_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Intersect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Intersect, sub_plans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Intersect, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Join, left_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Join, right_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Join, join_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Join, left_plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Join, right_plan_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Apply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Apply, join_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Apply, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Apply, sub_plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Apply, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Scan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Scan, scan_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Scan, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Scan, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Scan, idx_predicate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GetV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GetV, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GetV, opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GetV, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::GetV, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::EdgeExpand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::EdgeExpand, v_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::EdgeExpand, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::EdgeExpand, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::EdgeExpand, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::EdgeExpand, expand_opt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand_ExpandBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand_ExpandBase, edge_expand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand_ExpandBase, get_v_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, start_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, hop_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, path_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, result_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PathExpand, condition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Sink_OptTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Sink_OptTag, tag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Sink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Sink, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Sink, sink_target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Repartition_Shuffle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Repartition_Shuffle, shuffle_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Repartition_Broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Repartition, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Repartition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::physical::RepartitionDefaultTypeInternal, to_another_),
  offsetof(::physical::RepartitionDefaultTypeInternal, to_others_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Repartition, Strategy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::Root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr_Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr_Operator, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, project_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, select_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, group_by_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, order_by_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, dedup_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, unfold_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, limit_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, scan_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, sink_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, apply_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, join_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, union__),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, intersect_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, repartition_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, root_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, sample_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, vertex_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, edge_),
  offsetof(::physical::PhysicalOpr_OperatorDefaultTypeInternal, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr_Operator, op_kind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr_MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr_MetaData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr_MetaData, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr, opr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalOpr, meta_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::physical::PhysicalPlan, plan_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::physical::Project_ExprAlias)},
  { 7, -1, sizeof(::physical::Project)},
  { 14, -1, sizeof(::physical::GroupBy_AggFunc)},
  { 22, -1, sizeof(::physical::GroupBy_KeyAlias)},
  { 29, -1, sizeof(::physical::GroupBy)},
  { 36, -1, sizeof(::physical::Unfold)},
  { 43, -1, sizeof(::physical::Union)},
  { 49, -1, sizeof(::physical::Intersect)},
  { 56, -1, sizeof(::physical::Join)},
  { 66, -1, sizeof(::physical::Apply)},
  { 75, -1, sizeof(::physical::Scan)},
  { 84, -1, sizeof(::physical::GetV)},
  { 93, -1, sizeof(::physical::EdgeExpand)},
  { 103, -1, sizeof(::physical::PathExpand_ExpandBase)},
  { 110, -1, sizeof(::physical::PathExpand)},
  { 122, -1, sizeof(::physical::Sink_OptTag)},
  { 128, -1, sizeof(::physical::Sink)},
  { 135, -1, sizeof(::physical::Repartition_Shuffle)},
  { 141, -1, sizeof(::physical::Repartition_Broadcast)},
  { 146, -1, sizeof(::physical::Repartition)},
  { 154, -1, sizeof(::physical::Root)},
  { 159, -1, sizeof(::physical::PhysicalOpr_Operator)},
  { 184, -1, sizeof(::physical::PhysicalOpr_MetaData)},
  { 191, -1, sizeof(::physical::PhysicalOpr)},
  { 198, -1, sizeof(::physical::PhysicalPlan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Project_ExprAlias_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Project_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_GroupBy_AggFunc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_GroupBy_KeyAlias_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_GroupBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Unfold_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Union_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Intersect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Apply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Scan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_GetV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_EdgeExpand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_PathExpand_ExpandBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_PathExpand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Sink_OptTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Sink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Repartition_Shuffle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Repartition_Broadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Repartition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_Root_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_PhysicalOpr_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_PhysicalOpr_MetaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_PhysicalOpr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::physical::_PhysicalPlan_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "physical.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016physical.proto\022\010physical\032\014common.proto"
      "\032\nexpr.proto\032\014schema.proto\032\ntype.proto\032\r"
      "algebra.proto\032\036google/protobuf/wrappers."
      "proto\"\246\001\n\007Project\022-\n\010mappings\030\001 \003(\0132\033.ph"
      "ysical.Project.ExprAlias\022\021\n\tis_append\030\002 "
      "\001(\010\032Y\n\tExprAlias\022 \n\004expr\030\001 \001(\0132\022.common."
      "Expression\022*\n\005alias\030\002 \001(\0132\033.google.proto"
      "buf.Int32Value\"\300\003\n\007GroupBy\022,\n\010mappings\030\001"
      " \003(\0132\032.physical.GroupBy.KeyAlias\022,\n\tfunc"
      "tions\030\002 \003(\0132\031.physical.GroupBy.AggFunc\032\201"
      "\002\n\007AggFunc\022\036\n\004vars\030\001 \003(\0132\020.common.Variab"
      "le\0226\n\taggregate\030\002 \001(\0162#.physical.GroupBy"
      ".AggFunc.Aggregate\022*\n\005alias\030\003 \001(\0132\033.goog"
      "le.protobuf.Int32Value\"r\n\tAggregate\022\007\n\003S"
      "UM\020\000\022\007\n\003MIN\020\001\022\007\n\003MAX\020\002\022\t\n\005COUNT\020\003\022\022\n\016COU"
      "NT_DISTINCT\020\004\022\013\n\007TO_LIST\020\005\022\n\n\006TO_SET\020\006\022\007"
      "\n\003AVG\020\007\022\t\n\005FIRST\020\010\032U\n\010KeyAlias\022\035\n\003key\030\001 "
      "\001(\0132\020.common.Variable\022*\n\005alias\030\002 \001(\0132\033.g"
      "oogle.protobuf.Int32Value\"^\n\006Unfold\022(\n\003t"
      "ag\030\001 \001(\0132\033.google.protobuf.Int32Value\022*\n"
      "\005alias\030\002 \001(\0132\033.google.protobuf.Int32Valu"
      "e\"2\n\005Union\022)\n\tsub_plans\030\001 \003(\0132\026.physical"
      ".PhysicalPlan\"C\n\tIntersect\022)\n\tsub_plans\030"
      "\001 \003(\0132\026.physical.PhysicalPlan\022\013\n\003key\030\002 \001"
      "(\005\"\273\002\n\004Join\022#\n\tleft_keys\030\001 \003(\0132\020.common."
      "Variable\022$\n\nright_keys\030\002 \003(\0132\020.common.Va"
      "riable\022*\n\tjoin_kind\030\003 \001(\0162\027.physical.Joi"
      "n.JoinKind\022)\n\tleft_plan\030\004 \001(\0132\026.physical"
      ".PhysicalPlan\022*\n\nright_plan\030\005 \001(\0132\026.phys"
      "ical.PhysicalPlan\"e\n\010JoinKind\022\t\n\005INNER\020\000"
      "\022\016\n\nLEFT_OUTER\020\001\022\017\n\013RIGHT_OUTER\020\002\022\016\n\nFUL"
      "L_OUTER\020\003\022\010\n\004SEMI\020\004\022\010\n\004ANTI\020\005\022\t\n\005TIMES\020\006"
      "\"\251\001\n\005Apply\022*\n\tjoin_kind\030\001 \001(\0162\027.physical"
      ".Join.JoinKind\022\036\n\004keys\030\002 \003(\0132\020.common.Va"
      "riable\022(\n\010sub_plan\030\003 \001(\0132\026.physical.Phys"
      "icalPlan\022*\n\005alias\030\004 \001(\0132\033.google.protobu"
      "f.Int32Value\"\336\001\n\004Scan\022(\n\010scan_opt\030\001 \001(\0162"
      "\026.physical.Scan.ScanOpt\022*\n\005alias\030\002 \001(\0132\033"
      ".google.protobuf.Int32Value\022$\n\006params\030\003 "
      "\001(\0132\024.algebra.QueryParams\022.\n\ridx_predica"
      "te\030\004 \001(\0132\027.algebra.IndexPredicate\"*\n\007Sca"
      "nOpt\022\n\n\006VERTEX\020\000\022\010\n\004EDGE\020\001\022\t\n\005TABLE\020\002\"\341\001"
      "\n\004GetV\022(\n\003tag\030\001 \001(\0132\033.google.protobuf.In"
      "t32Value\022 \n\003opt\030\002 \001(\0162\023.physical.GetV.VO"
      "pt\022$\n\006params\030\003 \001(\0132\024.algebra.QueryParams"
      "\022*\n\005alias\030\004 \001(\0132\033.google.protobuf.Int32V"
      "alue\";\n\004VOpt\022\t\n\005START\020\000\022\007\n\003END\020\001\022\t\n\005OTHE"
      "R\020\002\022\010\n\004BOTH\020\003\022\n\n\006ITSELF\020\004\"\310\002\n\nEdgeExpand"
      "\022*\n\005v_tag\030\001 \001(\0132\033.google.protobuf.Int32V"
      "alue\0221\n\tdirection\030\002 \001(\0162\036.physical.EdgeE"
      "xpand.Direction\022$\n\006params\030\003 \001(\0132\024.algebr"
      "a.QueryParams\022*\n\005alias\030\004 \001(\0132\033.google.pr"
      "otobuf.Int32Value\0222\n\nexpand_opt\030\005 \001(\0162\036."
      "physical.EdgeExpand.ExpandOpt\"&\n\tDirecti"
      "on\022\007\n\003OUT\020\000\022\006\n\002IN\020\001\022\010\n\004BOTH\020\002\"-\n\tExpandO"
      "pt\022\n\n\006VERTEX\020\000\022\010\n\004EDGE\020\001\022\n\n\006DEGREE\020\002\"\363\003\n"
      "\nPathExpand\022-\n\004base\030\001 \001(\0132\037.physical.Pat"
      "hExpand.ExpandBase\022.\n\tstart_tag\030\002 \001(\0132\033."
      "google.protobuf.Int32Value\022*\n\005alias\030\003 \001("
      "\0132\033.google.protobuf.Int32Value\022!\n\thop_ra"
      "nge\030\004 \001(\0132\016.algebra.Range\022.\n\010path_opt\030\005 "
      "\001(\0162\034.physical.PathExpand.PathOpt\0222\n\nres"
      "ult_opt\030\006 \001(\0162\036.physical.PathExpand.Resu"
      "ltOpt\022%\n\tcondition\030\007 \001(\0132\022.common.Expres"
      "sion\032V\n\nExpandBase\022)\n\013edge_expand\030\001 \001(\0132"
      "\024.physical.EdgeExpand\022\035\n\005get_V\030\002 \001(\0132\016.p"
      "hysical.GetV\"$\n\007PathOpt\022\r\n\tARBITRARY\020\000\022\n"
      "\n\006SIMPLE\020\001\".\n\tResultOpt\022\t\n\005END_V\020\000\022\t\n\005AL"
      "L_V\020\001\022\013\n\007ALL_V_E\020\002\"\216\001\n\004Sink\022#\n\004tags\030\001 \003("
      "\0132\025.physical.Sink.OptTag\022-\n\013sink_target\030"
      "\002 \001(\0132\030.algebra.Sink.SinkTarget\0322\n\006OptTa"
      "g\022(\n\003tag\030\001 \001(\0132\033.google.protobuf.Int32Va"
      "lue\"\316\001\n\013Repartition\0223\n\nto_another\030\001 \001(\0132"
      "\035.physical.Repartition.ShuffleH\000\0224\n\tto_o"
      "thers\030\002 \001(\0132\037.physical.Repartition.Broad"
      "castH\000\032;\n\007Shuffle\0220\n\013shuffle_key\030\001 \001(\0132\033"
      ".google.protobuf.Int32Value\032\013\n\tBroadcast"
      "B\n\n\010Strategy\"\006\n\004Root\"\353\006\n\013PhysicalOpr\022+\n\003"
      "opr\030\001 \001(\0132\036.physical.PhysicalOpr.Operato"
      "r\0221\n\tmeta_data\030\002 \003(\0132\036.physical.Physical"
      "Opr.MetaData\032\276\005\n\010Operator\022$\n\007project\030\001 \001"
      "(\0132\021.physical.ProjectH\000\022!\n\006select\030\002 \001(\0132"
      "\017.algebra.SelectH\000\022%\n\010group_by\030\003 \001(\0132\021.p"
      "hysical.GroupByH\000\022$\n\010order_by\030\004 \001(\0132\020.al"
      "gebra.OrderByH\000\022\037\n\005dedup\030\005 \001(\0132\016.algebra"
      ".DedupH\000\022\"\n\006unfold\030\006 \001(\0132\020.physical.Unfo"
      "ldH\000\022\037\n\005limit\030\007 \001(\0132\016.algebra.LimitH\000\022\036\n"
      "\004scan\030\010 \001(\0132\016.physical.ScanH\000\022\036\n\004sink\030\t "
      "\001(\0132\016.physical.SinkH\000\022 \n\005apply\030\n \001(\0132\017.p"
      "hysical.ApplyH\000\022\036\n\004join\030\013 \001(\0132\016.physical"
      ".JoinH\000\022 \n\005union\030\014 \001(\0132\017.physical.UnionH"
      "\000\022(\n\tintersect\030\r \001(\0132\023.physical.Intersec"
      "tH\000\022,\n\013repartition\030\016 \001(\0132\025.physical.Repa"
      "rtitionH\000\022\036\n\004root\030\020 \001(\0132\016.physical.RootH"
      "\000\022!\n\006sample\030\021 \001(\0132\017.algebra.SampleH\000\022 \n\006"
      "vertex\030\036 \001(\0132\016.physical.GetVH\000\022$\n\004edge\030\037"
      " \001(\0132\024.physical.EdgeExpandH\000\022$\n\004path\030  \001"
      "(\0132\024.physical.PathExpandH\000B\t\n\007op_kind\032;\n"
      "\010MetaData\022 \n\004type\030\001 \001(\0132\022.common.IrDataT"
      "ype\022\r\n\005alias\030\002 \001(\005\"3\n\014PhysicalPlan\022#\n\004pl"
      "an\030\001 \003(\0132\025.physical.PhysicalOprB9\n!com.a"
      "libaba.graphscope.gaia.protoB\024GraphAlgeb"
      "raPhysicalb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4098);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "physical.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_expr_2eproto::AddDescriptors();
  ::protobuf_schema_2eproto::AddDescriptors();
  ::protobuf_type_2eproto::AddDescriptors();
  ::protobuf_algebra_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_physical_2eproto
namespace physical {
const ::google::protobuf::EnumDescriptor* GroupBy_AggFunc_Aggregate_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[0];
}
bool GroupBy_AggFunc_Aggregate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::SUM;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::MIN;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::MAX;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::COUNT;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::COUNT_DISTINCT;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::TO_LIST;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::TO_SET;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::AVG;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::FIRST;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::Aggregate_MIN;
const GroupBy_AggFunc_Aggregate GroupBy_AggFunc::Aggregate_MAX;
const int GroupBy_AggFunc::Aggregate_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Join_JoinKind_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[1];
}
bool Join_JoinKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Join_JoinKind Join::INNER;
const Join_JoinKind Join::LEFT_OUTER;
const Join_JoinKind Join::RIGHT_OUTER;
const Join_JoinKind Join::FULL_OUTER;
const Join_JoinKind Join::SEMI;
const Join_JoinKind Join::ANTI;
const Join_JoinKind Join::TIMES;
const Join_JoinKind Join::JoinKind_MIN;
const Join_JoinKind Join::JoinKind_MAX;
const int Join::JoinKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Scan_ScanOpt_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[2];
}
bool Scan_ScanOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scan_ScanOpt Scan::VERTEX;
const Scan_ScanOpt Scan::EDGE;
const Scan_ScanOpt Scan::TABLE;
const Scan_ScanOpt Scan::ScanOpt_MIN;
const Scan_ScanOpt Scan::ScanOpt_MAX;
const int Scan::ScanOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetV_VOpt_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[3];
}
bool GetV_VOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetV_VOpt GetV::START;
const GetV_VOpt GetV::END;
const GetV_VOpt GetV::OTHER;
const GetV_VOpt GetV::BOTH;
const GetV_VOpt GetV::ITSELF;
const GetV_VOpt GetV::VOpt_MIN;
const GetV_VOpt GetV::VOpt_MAX;
const int GetV::VOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EdgeExpand_Direction_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[4];
}
bool EdgeExpand_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EdgeExpand_Direction EdgeExpand::OUT;
const EdgeExpand_Direction EdgeExpand::IN;
const EdgeExpand_Direction EdgeExpand::BOTH;
const EdgeExpand_Direction EdgeExpand::Direction_MIN;
const EdgeExpand_Direction EdgeExpand::Direction_MAX;
const int EdgeExpand::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EdgeExpand_ExpandOpt_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[5];
}
bool EdgeExpand_ExpandOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EdgeExpand_ExpandOpt EdgeExpand::VERTEX;
const EdgeExpand_ExpandOpt EdgeExpand::EDGE;
const EdgeExpand_ExpandOpt EdgeExpand::DEGREE;
const EdgeExpand_ExpandOpt EdgeExpand::ExpandOpt_MIN;
const EdgeExpand_ExpandOpt EdgeExpand::ExpandOpt_MAX;
const int EdgeExpand::ExpandOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PathExpand_PathOpt_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[6];
}
bool PathExpand_PathOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathExpand_PathOpt PathExpand::ARBITRARY;
const PathExpand_PathOpt PathExpand::SIMPLE;
const PathExpand_PathOpt PathExpand::PathOpt_MIN;
const PathExpand_PathOpt PathExpand::PathOpt_MAX;
const int PathExpand::PathOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PathExpand_ResultOpt_descriptor() {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_physical_2eproto::file_level_enum_descriptors[7];
}
bool PathExpand_ResultOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathExpand_ResultOpt PathExpand::END_V;
const PathExpand_ResultOpt PathExpand::ALL_V;
const PathExpand_ResultOpt PathExpand::ALL_V_E;
const PathExpand_ResultOpt PathExpand::ResultOpt_MIN;
const PathExpand_ResultOpt PathExpand::ResultOpt_MAX;
const int PathExpand::ResultOpt_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Project_ExprAlias::InitAsDefaultInstance() {
  ::physical::_Project_ExprAlias_default_instance_._instance.get_mutable()->expr_ = const_cast< ::common::Expression*>(
      ::common::Expression::internal_default_instance());
  ::physical::_Project_ExprAlias_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Project_ExprAlias::clear_expr() {
  if (GetArenaNoVirtual() == NULL && expr_ != NULL) {
    delete expr_;
  }
  expr_ = NULL;
}
void Project_ExprAlias::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Project_ExprAlias::kExprFieldNumber;
const int Project_ExprAlias::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Project_ExprAlias::Project_ExprAlias()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Project_ExprAlias.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Project.ExprAlias)
}
Project_ExprAlias::Project_ExprAlias(const Project_ExprAlias& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expr()) {
    expr_ = new ::common::Expression(*from.expr_);
  } else {
    expr_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.Project.ExprAlias)
}

void Project_ExprAlias::SharedCtor() {
  ::memset(&expr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&expr_)) + sizeof(alias_));
}

Project_ExprAlias::~Project_ExprAlias() {
  // @@protoc_insertion_point(destructor:physical.Project.ExprAlias)
  SharedDtor();
}

void Project_ExprAlias::SharedDtor() {
  if (this != internal_default_instance()) delete expr_;
  if (this != internal_default_instance()) delete alias_;
}

void Project_ExprAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Project_ExprAlias::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Project_ExprAlias& Project_ExprAlias::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Project_ExprAlias.base);
  return *internal_default_instance();
}


void Project_ExprAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Project.ExprAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && expr_ != NULL) {
    delete expr_;
  }
  expr_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  _internal_metadata_.Clear();
}

bool Project_ExprAlias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Project.ExprAlias)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Expression expr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Project.ExprAlias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Project.ExprAlias)
  return false;
#undef DO_
}

void Project_ExprAlias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Project.ExprAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Expression expr = 1;
  if (this->has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_expr(), output);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Project.ExprAlias)
}

::google::protobuf::uint8* Project_ExprAlias::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Project.ExprAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Expression expr = 1;
  if (this->has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_expr(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Project.ExprAlias)
  return target;
}

size_t Project_ExprAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Project.ExprAlias)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Expression expr = 1;
  if (this->has_expr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Project_ExprAlias::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Project.ExprAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const Project_ExprAlias* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Project_ExprAlias>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Project.ExprAlias)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Project.ExprAlias)
    MergeFrom(*source);
  }
}

void Project_ExprAlias::MergeFrom(const Project_ExprAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Project.ExprAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expr()) {
    mutable_expr()->::common::Expression::MergeFrom(from.expr());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
}

void Project_ExprAlias::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Project.ExprAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project_ExprAlias::CopyFrom(const Project_ExprAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Project.ExprAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project_ExprAlias::IsInitialized() const {
  return true;
}

void Project_ExprAlias::Swap(Project_ExprAlias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project_ExprAlias::InternalSwap(Project_ExprAlias* other) {
  using std::swap;
  swap(expr_, other->expr_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Project_ExprAlias::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Project::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Project::kMappingsFieldNumber;
const int Project::kIsAppendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Project::Project()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Project.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Project)
}
Project::Project(const Project& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_append_ = from.is_append_;
  // @@protoc_insertion_point(copy_constructor:physical.Project)
}

void Project::SharedCtor() {
  is_append_ = false;
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:physical.Project)
  SharedDtor();
}

void Project::SharedDtor() {
}

void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Project::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Project& Project::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Project.base);
  return *internal_default_instance();
}


void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  is_append_ = false;
  _internal_metadata_.Clear();
}

bool Project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Project)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .physical.Project.ExprAlias mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_append = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_append_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Project)
  return false;
#undef DO_
}

void Project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.Project.ExprAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  // bool is_append = 2;
  if (this->is_append() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_append(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Project)
}

::google::protobuf::uint8* Project::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.Project.ExprAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), deterministic, target);
  }

  // bool is_append = 2;
  if (this->is_append() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_append(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Project)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.Project.ExprAlias mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  // bool is_append = 2;
  if (this->is_append() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Project::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Project)
  GOOGLE_DCHECK_NE(&from, this);
  const Project* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Project>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Project)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Project)
    MergeFrom(*source);
  }
}

void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Project)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
  if (from.is_append() != 0) {
    set_is_append(from.is_append());
  }
}

void Project::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::Swap(Project* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project::InternalSwap(Project* other) {
  using std::swap;
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
  swap(is_append_, other->is_append_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Project::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupBy_AggFunc::InitAsDefaultInstance() {
  ::physical::_GroupBy_AggFunc_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void GroupBy_AggFunc::clear_vars() {
  vars_.Clear();
}
void GroupBy_AggFunc::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBy_AggFunc::kVarsFieldNumber;
const int GroupBy_AggFunc::kAggregateFieldNumber;
const int GroupBy_AggFunc::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBy_AggFunc::GroupBy_AggFunc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_GroupBy_AggFunc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.GroupBy.AggFunc)
}
GroupBy_AggFunc::GroupBy_AggFunc(const GroupBy_AggFunc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vars_(from.vars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  aggregate_ = from.aggregate_;
  // @@protoc_insertion_point(copy_constructor:physical.GroupBy.AggFunc)
}

void GroupBy_AggFunc::SharedCtor() {
  ::memset(&alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregate_) -
      reinterpret_cast<char*>(&alias_)) + sizeof(aggregate_));
}

GroupBy_AggFunc::~GroupBy_AggFunc() {
  // @@protoc_insertion_point(destructor:physical.GroupBy.AggFunc)
  SharedDtor();
}

void GroupBy_AggFunc::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
}

void GroupBy_AggFunc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupBy_AggFunc::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupBy_AggFunc& GroupBy_AggFunc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_GroupBy_AggFunc.base);
  return *internal_default_instance();
}


void GroupBy_AggFunc::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.GroupBy.AggFunc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  aggregate_ = 0;
  _internal_metadata_.Clear();
}

bool GroupBy_AggFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.GroupBy.AggFunc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.Variable vars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.GroupBy.AggFunc.Aggregate aggregate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aggregate(static_cast< ::physical::GroupBy_AggFunc_Aggregate >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.GroupBy.AggFunc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.GroupBy.AggFunc)
  return false;
#undef DO_
}

void GroupBy_AggFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.GroupBy.AggFunc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vars(static_cast<int>(i)),
      output);
  }

  // .physical.GroupBy.AggFunc.Aggregate aggregate = 2;
  if (this->aggregate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->aggregate(), output);
  }

  // .google.protobuf.Int32Value alias = 3;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.GroupBy.AggFunc)
}

::google::protobuf::uint8* GroupBy_AggFunc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.GroupBy.AggFunc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vars(static_cast<int>(i)), deterministic, target);
  }

  // .physical.GroupBy.AggFunc.Aggregate aggregate = 2;
  if (this->aggregate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->aggregate(), target);
  }

  // .google.protobuf.Int32Value alias = 3;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.GroupBy.AggFunc)
  return target;
}

size_t GroupBy_AggFunc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.GroupBy.AggFunc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.Variable vars = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vars(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Int32Value alias = 3;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .physical.GroupBy.AggFunc.Aggregate aggregate = 2;
  if (this->aggregate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aggregate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBy_AggFunc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.GroupBy.AggFunc)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBy_AggFunc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupBy_AggFunc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.GroupBy.AggFunc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.GroupBy.AggFunc)
    MergeFrom(*source);
  }
}

void GroupBy_AggFunc::MergeFrom(const GroupBy_AggFunc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.GroupBy.AggFunc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
  if (from.aggregate() != 0) {
    set_aggregate(from.aggregate());
  }
}

void GroupBy_AggFunc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.GroupBy.AggFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBy_AggFunc::CopyFrom(const GroupBy_AggFunc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.GroupBy.AggFunc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBy_AggFunc::IsInitialized() const {
  return true;
}

void GroupBy_AggFunc::Swap(GroupBy_AggFunc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBy_AggFunc::InternalSwap(GroupBy_AggFunc* other) {
  using std::swap;
  CastToBase(&vars_)->InternalSwap(CastToBase(&other->vars_));
  swap(alias_, other->alias_);
  swap(aggregate_, other->aggregate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupBy_AggFunc::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupBy_KeyAlias::InitAsDefaultInstance() {
  ::physical::_GroupBy_KeyAlias_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::Variable*>(
      ::common::Variable::internal_default_instance());
  ::physical::_GroupBy_KeyAlias_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void GroupBy_KeyAlias::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
void GroupBy_KeyAlias::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBy_KeyAlias::kKeyFieldNumber;
const int GroupBy_KeyAlias::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBy_KeyAlias::GroupBy_KeyAlias()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_GroupBy_KeyAlias.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.GroupBy.KeyAlias)
}
GroupBy_KeyAlias::GroupBy_KeyAlias(const GroupBy_KeyAlias& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::Variable(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.GroupBy.KeyAlias)
}

void GroupBy_KeyAlias::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&key_)) + sizeof(alias_));
}

GroupBy_KeyAlias::~GroupBy_KeyAlias() {
  // @@protoc_insertion_point(destructor:physical.GroupBy.KeyAlias)
  SharedDtor();
}

void GroupBy_KeyAlias::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete alias_;
}

void GroupBy_KeyAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupBy_KeyAlias::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupBy_KeyAlias& GroupBy_KeyAlias::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_GroupBy_KeyAlias.base);
  return *internal_default_instance();
}


void GroupBy_KeyAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.GroupBy.KeyAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  _internal_metadata_.Clear();
}

bool GroupBy_KeyAlias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.GroupBy.KeyAlias)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Variable key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.GroupBy.KeyAlias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.GroupBy.KeyAlias)
  return false;
#undef DO_
}

void GroupBy_KeyAlias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.GroupBy.KeyAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Variable key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_key(), output);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.GroupBy.KeyAlias)
}

::google::protobuf::uint8* GroupBy_KeyAlias::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.GroupBy.KeyAlias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Variable key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_key(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.GroupBy.KeyAlias)
  return target;
}

size_t GroupBy_KeyAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.GroupBy.KeyAlias)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Variable key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBy_KeyAlias::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.GroupBy.KeyAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBy_KeyAlias* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupBy_KeyAlias>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.GroupBy.KeyAlias)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.GroupBy.KeyAlias)
    MergeFrom(*source);
  }
}

void GroupBy_KeyAlias::MergeFrom(const GroupBy_KeyAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.GroupBy.KeyAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::common::Variable::MergeFrom(from.key());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
}

void GroupBy_KeyAlias::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.GroupBy.KeyAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBy_KeyAlias::CopyFrom(const GroupBy_KeyAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.GroupBy.KeyAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBy_KeyAlias::IsInitialized() const {
  return true;
}

void GroupBy_KeyAlias::Swap(GroupBy_KeyAlias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBy_KeyAlias::InternalSwap(GroupBy_KeyAlias* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupBy_KeyAlias::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupBy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBy::kMappingsFieldNumber;
const int GroupBy::kFunctionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBy::GroupBy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_GroupBy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.GroupBy)
}
GroupBy::GroupBy(const GroupBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mappings_(from.mappings_),
      functions_(from.functions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:physical.GroupBy)
}

void GroupBy::SharedCtor() {
}

GroupBy::~GroupBy() {
  // @@protoc_insertion_point(destructor:physical.GroupBy)
  SharedDtor();
}

void GroupBy::SharedDtor() {
}

void GroupBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupBy::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupBy& GroupBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_GroupBy.base);
  return *internal_default_instance();
}


void GroupBy::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.GroupBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  functions_.Clear();
  _internal_metadata_.Clear();
}

bool GroupBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.GroupBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .physical.GroupBy.KeyAlias mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .physical.GroupBy.AggFunc functions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.GroupBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.GroupBy)
  return false;
#undef DO_
}

void GroupBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.GroupBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.GroupBy.KeyAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mappings(static_cast<int>(i)),
      output);
  }

  // repeated .physical.GroupBy.AggFunc functions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->functions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->functions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.GroupBy)
}

::google::protobuf::uint8* GroupBy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.GroupBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.GroupBy.KeyAlias mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mappings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mappings(static_cast<int>(i)), deterministic, target);
  }

  // repeated .physical.GroupBy.AggFunc functions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->functions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->functions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.GroupBy)
  return target;
}

size_t GroupBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.GroupBy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.GroupBy.KeyAlias mappings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mappings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mappings(static_cast<int>(i)));
    }
  }

  // repeated .physical.GroupBy.AggFunc functions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->functions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->functions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.GroupBy)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupBy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupBy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.GroupBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.GroupBy)
    MergeFrom(*source);
  }
}

void GroupBy::MergeFrom(const GroupBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.GroupBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
  functions_.MergeFrom(from.functions_);
}

void GroupBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.GroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBy::CopyFrom(const GroupBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.GroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBy::IsInitialized() const {
  return true;
}

void GroupBy::Swap(GroupBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBy::InternalSwap(GroupBy* other) {
  using std::swap;
  CastToBase(&mappings_)->InternalSwap(CastToBase(&other->mappings_));
  CastToBase(&functions_)->InternalSwap(CastToBase(&other->functions_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupBy::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unfold::InitAsDefaultInstance() {
  ::physical::_Unfold_default_instance_._instance.get_mutable()->tag_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::physical::_Unfold_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Unfold::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
}
void Unfold::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unfold::kTagFieldNumber;
const int Unfold::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unfold::Unfold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Unfold.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Unfold)
}
Unfold::Unfold(const Unfold& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::google::protobuf::Int32Value(*from.tag_);
  } else {
    tag_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.Unfold)
}

void Unfold::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(alias_));
}

Unfold::~Unfold() {
  // @@protoc_insertion_point(destructor:physical.Unfold)
  SharedDtor();
}

void Unfold::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete alias_;
}

void Unfold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unfold::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unfold& Unfold::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Unfold.base);
  return *internal_default_instance();
}


void Unfold::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Unfold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  _internal_metadata_.Clear();
}

bool Unfold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Unfold)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Unfold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Unfold)
  return false;
#undef DO_
}

void Unfold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Unfold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tag(), output);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Unfold)
}

::google::protobuf::uint8* Unfold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Unfold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tag(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Unfold)
  return target;
}

size_t Unfold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Unfold)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unfold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Unfold)
  GOOGLE_DCHECK_NE(&from, this);
  const Unfold* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unfold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Unfold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Unfold)
    MergeFrom(*source);
  }
}

void Unfold::MergeFrom(const Unfold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Unfold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::google::protobuf::Int32Value::MergeFrom(from.tag());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
}

void Unfold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Unfold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unfold::CopyFrom(const Unfold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Unfold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unfold::IsInitialized() const {
  return true;
}

void Unfold::Swap(Unfold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unfold::InternalSwap(Unfold* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unfold::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Union::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Union::kSubPlansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Union::Union()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Union)
}
Union::Union(const Union& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sub_plans_(from.sub_plans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:physical.Union)
}

void Union::SharedCtor() {
}

Union::~Union() {
  // @@protoc_insertion_point(destructor:physical.Union)
  SharedDtor();
}

void Union::SharedDtor() {
}

void Union::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Union::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Union& Union::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void Union::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_plans_.Clear();
  _internal_metadata_.Clear();
}

bool Union::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Union)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .physical.PhysicalPlan sub_plans = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sub_plans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Union)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Union)
  return false;
#undef DO_
}

void Union::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.PhysicalPlan sub_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_plans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sub_plans(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Union)
}

::google::protobuf::uint8* Union::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.PhysicalPlan sub_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_plans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sub_plans(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Union)
  return target;
}

size_t Union::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Union)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.PhysicalPlan sub_plans = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_plans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sub_plans(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Union::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Union)
  GOOGLE_DCHECK_NE(&from, this);
  const Union* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Union>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Union)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Union)
    MergeFrom(*source);
  }
}

void Union::MergeFrom(const Union& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Union)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_plans_.MergeFrom(from.sub_plans_);
}

void Union::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Union::CopyFrom(const Union& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Union::IsInitialized() const {
  return true;
}

void Union::Swap(Union* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Union::InternalSwap(Union* other) {
  using std::swap;
  CastToBase(&sub_plans_)->InternalSwap(CastToBase(&other->sub_plans_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Union::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Intersect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intersect::kSubPlansFieldNumber;
const int Intersect::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intersect::Intersect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Intersect)
}
Intersect::Intersect(const Intersect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sub_plans_(from.sub_plans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:physical.Intersect)
}

void Intersect::SharedCtor() {
  key_ = 0;
}

Intersect::~Intersect() {
  // @@protoc_insertion_point(destructor:physical.Intersect)
  SharedDtor();
}

void Intersect::SharedDtor() {
}

void Intersect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Intersect::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Intersect& Intersect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void Intersect::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Intersect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_plans_.Clear();
  key_ = 0;
  _internal_metadata_.Clear();
}

bool Intersect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Intersect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .physical.PhysicalPlan sub_plans = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sub_plans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Intersect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Intersect)
  return false;
#undef DO_
}

void Intersect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Intersect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.PhysicalPlan sub_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_plans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sub_plans(static_cast<int>(i)),
      output);
  }

  // int32 key = 2;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Intersect)
}

::google::protobuf::uint8* Intersect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Intersect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.PhysicalPlan sub_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_plans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sub_plans(static_cast<int>(i)), deterministic, target);
  }

  // int32 key = 2;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Intersect)
  return target;
}

size_t Intersect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Intersect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.PhysicalPlan sub_plans = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_plans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sub_plans(static_cast<int>(i)));
    }
  }

  // int32 key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intersect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Intersect)
  GOOGLE_DCHECK_NE(&from, this);
  const Intersect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Intersect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Intersect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Intersect)
    MergeFrom(*source);
  }
}

void Intersect::MergeFrom(const Intersect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Intersect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_plans_.MergeFrom(from.sub_plans_);
  if (from.key() != 0) {
    set_key(from.key());
  }
}

void Intersect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Intersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intersect::CopyFrom(const Intersect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Intersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersect::IsInitialized() const {
  return true;
}

void Intersect::Swap(Intersect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intersect::InternalSwap(Intersect* other) {
  using std::swap;
  CastToBase(&sub_plans_)->InternalSwap(CastToBase(&other->sub_plans_));
  swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Intersect::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Join::InitAsDefaultInstance() {
  ::physical::_Join_default_instance_._instance.get_mutable()->left_plan_ = const_cast< ::physical::PhysicalPlan*>(
      ::physical::PhysicalPlan::internal_default_instance());
  ::physical::_Join_default_instance_._instance.get_mutable()->right_plan_ = const_cast< ::physical::PhysicalPlan*>(
      ::physical::PhysicalPlan::internal_default_instance());
}
void Join::clear_left_keys() {
  left_keys_.Clear();
}
void Join::clear_right_keys() {
  right_keys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Join::kLeftKeysFieldNumber;
const int Join::kRightKeysFieldNumber;
const int Join::kJoinKindFieldNumber;
const int Join::kLeftPlanFieldNumber;
const int Join::kRightPlanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Join::Join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Join)
}
Join::Join(const Join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      left_keys_(from.left_keys_),
      right_keys_(from.right_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_plan()) {
    left_plan_ = new ::physical::PhysicalPlan(*from.left_plan_);
  } else {
    left_plan_ = NULL;
  }
  if (from.has_right_plan()) {
    right_plan_ = new ::physical::PhysicalPlan(*from.right_plan_);
  } else {
    right_plan_ = NULL;
  }
  join_kind_ = from.join_kind_;
  // @@protoc_insertion_point(copy_constructor:physical.Join)
}

void Join::SharedCtor() {
  ::memset(&left_plan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_kind_) -
      reinterpret_cast<char*>(&left_plan_)) + sizeof(join_kind_));
}

Join::~Join() {
  // @@protoc_insertion_point(destructor:physical.Join)
  SharedDtor();
}

void Join::SharedDtor() {
  if (this != internal_default_instance()) delete left_plan_;
  if (this != internal_default_instance()) delete right_plan_;
}

void Join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Join::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Join& Join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void Join::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_keys_.Clear();
  right_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && left_plan_ != NULL) {
    delete left_plan_;
  }
  left_plan_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_plan_ != NULL) {
    delete right_plan_;
  }
  right_plan_ = NULL;
  join_kind_ = 0;
  _internal_metadata_.Clear();
}

bool Join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.Variable left_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.Variable right_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Join.JoinKind join_kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join_kind(static_cast< ::physical::Join_JoinKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.PhysicalPlan left_plan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.PhysicalPlan right_plan = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Join)
  return false;
#undef DO_
}

void Join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable left_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->left_keys(static_cast<int>(i)),
      output);
  }

  // repeated .common.Variable right_keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->right_keys(static_cast<int>(i)),
      output);
  }

  // .physical.Join.JoinKind join_kind = 3;
  if (this->join_kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->join_kind(), output);
  }

  // .physical.PhysicalPlan left_plan = 4;
  if (this->has_left_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_left_plan(), output);
  }

  // .physical.PhysicalPlan right_plan = 5;
  if (this->has_right_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_right_plan(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Join)
}

::google::protobuf::uint8* Join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .common.Variable left_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->left_keys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .common.Variable right_keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->right_keys(static_cast<int>(i)), deterministic, target);
  }

  // .physical.Join.JoinKind join_kind = 3;
  if (this->join_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->join_kind(), target);
  }

  // .physical.PhysicalPlan left_plan = 4;
  if (this->has_left_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_left_plan(), deterministic, target);
  }

  // .physical.PhysicalPlan right_plan = 5;
  if (this->has_right_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_right_plan(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Join)
  return target;
}

size_t Join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Join)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.Variable left_keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->left_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_keys(static_cast<int>(i)));
    }
  }

  // repeated .common.Variable right_keys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->right_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_keys(static_cast<int>(i)));
    }
  }

  // .physical.PhysicalPlan left_plan = 4;
  if (this->has_left_plan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_plan_);
  }

  // .physical.PhysicalPlan right_plan = 5;
  if (this->has_right_plan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_plan_);
  }

  // .physical.Join.JoinKind join_kind = 3;
  if (this->join_kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join_kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Join)
  GOOGLE_DCHECK_NE(&from, this);
  const Join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Join)
    MergeFrom(*source);
  }
}

void Join::MergeFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_keys_.MergeFrom(from.left_keys_);
  right_keys_.MergeFrom(from.right_keys_);
  if (from.has_left_plan()) {
    mutable_left_plan()->::physical::PhysicalPlan::MergeFrom(from.left_plan());
  }
  if (from.has_right_plan()) {
    mutable_right_plan()->::physical::PhysicalPlan::MergeFrom(from.right_plan());
  }
  if (from.join_kind() != 0) {
    set_join_kind(from.join_kind());
  }
}

void Join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Join::CopyFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Join::IsInitialized() const {
  return true;
}

void Join::Swap(Join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Join::InternalSwap(Join* other) {
  using std::swap;
  CastToBase(&left_keys_)->InternalSwap(CastToBase(&other->left_keys_));
  CastToBase(&right_keys_)->InternalSwap(CastToBase(&other->right_keys_));
  swap(left_plan_, other->left_plan_);
  swap(right_plan_, other->right_plan_);
  swap(join_kind_, other->join_kind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Join::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Apply::InitAsDefaultInstance() {
  ::physical::_Apply_default_instance_._instance.get_mutable()->sub_plan_ = const_cast< ::physical::PhysicalPlan*>(
      ::physical::PhysicalPlan::internal_default_instance());
  ::physical::_Apply_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Apply::clear_keys() {
  keys_.Clear();
}
void Apply::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Apply::kJoinKindFieldNumber;
const int Apply::kKeysFieldNumber;
const int Apply::kSubPlanFieldNumber;
const int Apply::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Apply::Apply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Apply)
}
Apply::Apply(const Apply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sub_plan()) {
    sub_plan_ = new ::physical::PhysicalPlan(*from.sub_plan_);
  } else {
    sub_plan_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  join_kind_ = from.join_kind_;
  // @@protoc_insertion_point(copy_constructor:physical.Apply)
}

void Apply::SharedCtor() {
  ::memset(&sub_plan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_kind_) -
      reinterpret_cast<char*>(&sub_plan_)) + sizeof(join_kind_));
}

Apply::~Apply() {
  // @@protoc_insertion_point(destructor:physical.Apply)
  SharedDtor();
}

void Apply::SharedDtor() {
  if (this != internal_default_instance()) delete sub_plan_;
  if (this != internal_default_instance()) delete alias_;
}

void Apply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Apply::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Apply& Apply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void Apply::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == NULL && sub_plan_ != NULL) {
    delete sub_plan_;
  }
  sub_plan_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  join_kind_ = 0;
  _internal_metadata_.Clear();
}

bool Apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Apply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.Join.JoinKind join_kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_join_kind(static_cast< ::physical::Join_JoinKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.Variable keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.PhysicalPlan sub_plan = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sub_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Apply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Apply)
  return false;
#undef DO_
}

void Apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Join.JoinKind join_kind = 1;
  if (this->join_kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->join_kind(), output);
  }

  // repeated .common.Variable keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->keys(static_cast<int>(i)),
      output);
  }

  // .physical.PhysicalPlan sub_plan = 3;
  if (this->has_sub_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sub_plan(), output);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Apply)
}

::google::protobuf::uint8* Apply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Join.JoinKind join_kind = 1;
  if (this->join_kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->join_kind(), target);
  }

  // repeated .common.Variable keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->keys(static_cast<int>(i)), deterministic, target);
  }

  // .physical.PhysicalPlan sub_plan = 3;
  if (this->has_sub_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sub_plan(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Apply)
  return target;
}

size_t Apply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Apply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.Variable keys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  // .physical.PhysicalPlan sub_plan = 3;
  if (this->has_sub_plan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sub_plan_);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .physical.Join.JoinKind join_kind = 1;
  if (this->join_kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->join_kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Apply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Apply)
  GOOGLE_DCHECK_NE(&from, this);
  const Apply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Apply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Apply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Apply)
    MergeFrom(*source);
  }
}

void Apply::MergeFrom(const Apply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Apply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_sub_plan()) {
    mutable_sub_plan()->::physical::PhysicalPlan::MergeFrom(from.sub_plan());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
  if (from.join_kind() != 0) {
    set_join_kind(from.join_kind());
  }
}

void Apply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Apply::CopyFrom(const Apply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Apply::IsInitialized() const {
  return true;
}

void Apply::Swap(Apply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Apply::InternalSwap(Apply* other) {
  using std::swap;
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  swap(sub_plan_, other->sub_plan_);
  swap(alias_, other->alias_);
  swap(join_kind_, other->join_kind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Apply::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Scan::InitAsDefaultInstance() {
  ::physical::_Scan_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::physical::_Scan_default_instance_._instance.get_mutable()->params_ = const_cast< ::algebra::QueryParams*>(
      ::algebra::QueryParams::internal_default_instance());
  ::physical::_Scan_default_instance_._instance.get_mutable()->idx_predicate_ = const_cast< ::algebra::IndexPredicate*>(
      ::algebra::IndexPredicate::internal_default_instance());
}
void Scan::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
void Scan::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
void Scan::clear_idx_predicate() {
  if (GetArenaNoVirtual() == NULL && idx_predicate_ != NULL) {
    delete idx_predicate_;
  }
  idx_predicate_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scan::kScanOptFieldNumber;
const int Scan::kAliasFieldNumber;
const int Scan::kParamsFieldNumber;
const int Scan::kIdxPredicateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scan::Scan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Scan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Scan)
}
Scan::Scan(const Scan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::algebra::QueryParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_idx_predicate()) {
    idx_predicate_ = new ::algebra::IndexPredicate(*from.idx_predicate_);
  } else {
    idx_predicate_ = NULL;
  }
  scan_opt_ = from.scan_opt_;
  // @@protoc_insertion_point(copy_constructor:physical.Scan)
}

void Scan::SharedCtor() {
  ::memset(&alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scan_opt_) -
      reinterpret_cast<char*>(&alias_)) + sizeof(scan_opt_));
}

Scan::~Scan() {
  // @@protoc_insertion_point(destructor:physical.Scan)
  SharedDtor();
}

void Scan::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete idx_predicate_;
}

void Scan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scan::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scan& Scan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Scan.base);
  return *internal_default_instance();
}


void Scan::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && idx_predicate_ != NULL) {
    delete idx_predicate_;
  }
  idx_predicate_ = NULL;
  scan_opt_ = 0;
  _internal_metadata_.Clear();
}

bool Scan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Scan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.Scan.ScanOpt scan_opt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scan_opt(static_cast< ::physical::Scan_ScanOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.QueryParams params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.IndexPredicate idx_predicate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_idx_predicate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Scan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Scan)
  return false;
#undef DO_
}

void Scan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Scan.ScanOpt scan_opt = 1;
  if (this->scan_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scan_opt(), output);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_params(), output);
  }

  // .algebra.IndexPredicate idx_predicate = 4;
  if (this->has_idx_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_idx_predicate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Scan)
}

::google::protobuf::uint8* Scan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Scan.ScanOpt scan_opt = 1;
  if (this->scan_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scan_opt(), target);
  }

  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_params(), deterministic, target);
  }

  // .algebra.IndexPredicate idx_predicate = 4;
  if (this->has_idx_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_idx_predicate(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Scan)
  return target;
}

size_t Scan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Scan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .algebra.IndexPredicate idx_predicate = 4;
  if (this->has_idx_predicate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *idx_predicate_);
  }

  // .physical.Scan.ScanOpt scan_opt = 1;
  if (this->scan_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scan_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Scan)
  GOOGLE_DCHECK_NE(&from, this);
  const Scan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Scan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Scan)
    MergeFrom(*source);
  }
}

void Scan::MergeFrom(const Scan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Scan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
  if (from.has_params()) {
    mutable_params()->::algebra::QueryParams::MergeFrom(from.params());
  }
  if (from.has_idx_predicate()) {
    mutable_idx_predicate()->::algebra::IndexPredicate::MergeFrom(from.idx_predicate());
  }
  if (from.scan_opt() != 0) {
    set_scan_opt(from.scan_opt());
  }
}

void Scan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scan::CopyFrom(const Scan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scan::IsInitialized() const {
  return true;
}

void Scan::Swap(Scan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scan::InternalSwap(Scan* other) {
  using std::swap;
  swap(alias_, other->alias_);
  swap(params_, other->params_);
  swap(idx_predicate_, other->idx_predicate_);
  swap(scan_opt_, other->scan_opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scan::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetV::InitAsDefaultInstance() {
  ::physical::_GetV_default_instance_._instance.get_mutable()->tag_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::physical::_GetV_default_instance_._instance.get_mutable()->params_ = const_cast< ::algebra::QueryParams*>(
      ::algebra::QueryParams::internal_default_instance());
  ::physical::_GetV_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void GetV::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
}
void GetV::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
void GetV::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetV::kTagFieldNumber;
const int GetV::kOptFieldNumber;
const int GetV::kParamsFieldNumber;
const int GetV::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetV::GetV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_GetV.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.GetV)
}
GetV::GetV(const GetV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::google::protobuf::Int32Value(*from.tag_);
  } else {
    tag_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::algebra::QueryParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  opt_ = from.opt_;
  // @@protoc_insertion_point(copy_constructor:physical.GetV)
}

void GetV::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(opt_));
}

GetV::~GetV() {
  // @@protoc_insertion_point(destructor:physical.GetV)
  SharedDtor();
}

void GetV::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete alias_;
}

void GetV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetV::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetV& GetV::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_GetV.base);
  return *internal_default_instance();
}


void GetV::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  opt_ = 0;
  _internal_metadata_.Clear();
}

bool GetV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.GetV)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.GetV.VOpt opt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opt(static_cast< ::physical::GetV_VOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.QueryParams params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.GetV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.GetV)
  return false;
#undef DO_
}

void GetV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tag(), output);
  }

  // .physical.GetV.VOpt opt = 2;
  if (this->opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opt(), output);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_params(), output);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.GetV)
}

::google::protobuf::uint8* GetV::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tag(), deterministic, target);
  }

  // .physical.GetV.VOpt opt = 2;
  if (this->opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opt(), target);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_params(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_alias(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.GetV)
  return target;
}

size_t GetV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.GetV)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .physical.GetV.VOpt opt = 2;
  if (this->opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.GetV)
  GOOGLE_DCHECK_NE(&from, this);
  const GetV* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetV>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.GetV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.GetV)
    MergeFrom(*source);
  }
}

void GetV::MergeFrom(const GetV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.GetV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::google::protobuf::Int32Value::MergeFrom(from.tag());
  }
  if (from.has_params()) {
    mutable_params()->::algebra::QueryParams::MergeFrom(from.params());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
  if (from.opt() != 0) {
    set_opt(from.opt());
  }
}

void GetV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.GetV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetV::CopyFrom(const GetV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.GetV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetV::IsInitialized() const {
  return true;
}

void GetV::Swap(GetV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetV::InternalSwap(GetV* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(params_, other->params_);
  swap(alias_, other->alias_);
  swap(opt_, other->opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetV::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EdgeExpand::InitAsDefaultInstance() {
  ::physical::_EdgeExpand_default_instance_._instance.get_mutable()->v_tag_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::physical::_EdgeExpand_default_instance_._instance.get_mutable()->params_ = const_cast< ::algebra::QueryParams*>(
      ::algebra::QueryParams::internal_default_instance());
  ::physical::_EdgeExpand_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void EdgeExpand::clear_v_tag() {
  if (GetArenaNoVirtual() == NULL && v_tag_ != NULL) {
    delete v_tag_;
  }
  v_tag_ = NULL;
}
void EdgeExpand::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
void EdgeExpand::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeExpand::kVTagFieldNumber;
const int EdgeExpand::kDirectionFieldNumber;
const int EdgeExpand::kParamsFieldNumber;
const int EdgeExpand::kAliasFieldNumber;
const int EdgeExpand::kExpandOptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeExpand::EdgeExpand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_EdgeExpand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.EdgeExpand)
}
EdgeExpand::EdgeExpand(const EdgeExpand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_v_tag()) {
    v_tag_ = new ::google::protobuf::Int32Value(*from.v_tag_);
  } else {
    v_tag_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::algebra::QueryParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&expand_opt_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(expand_opt_));
  // @@protoc_insertion_point(copy_constructor:physical.EdgeExpand)
}

void EdgeExpand::SharedCtor() {
  ::memset(&v_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_opt_) -
      reinterpret_cast<char*>(&v_tag_)) + sizeof(expand_opt_));
}

EdgeExpand::~EdgeExpand() {
  // @@protoc_insertion_point(destructor:physical.EdgeExpand)
  SharedDtor();
}

void EdgeExpand::SharedDtor() {
  if (this != internal_default_instance()) delete v_tag_;
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete alias_;
}

void EdgeExpand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EdgeExpand::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgeExpand& EdgeExpand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_EdgeExpand.base);
  return *internal_default_instance();
}


void EdgeExpand::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.EdgeExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && v_tag_ != NULL) {
    delete v_tag_;
  }
  v_tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_opt_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(expand_opt_));
  _internal_metadata_.Clear();
}

bool EdgeExpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.EdgeExpand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value v_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.EdgeExpand.Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::physical::EdgeExpand_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.QueryParams params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.EdgeExpand.ExpandOpt expand_opt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_expand_opt(static_cast< ::physical::EdgeExpand_ExpandOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.EdgeExpand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.EdgeExpand)
  return false;
#undef DO_
}

void EdgeExpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.EdgeExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value v_tag = 1;
  if (this->has_v_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_v_tag(), output);
  }

  // .physical.EdgeExpand.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_params(), output);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_alias(), output);
  }

  // .physical.EdgeExpand.ExpandOpt expand_opt = 5;
  if (this->expand_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->expand_opt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.EdgeExpand)
}

::google::protobuf::uint8* EdgeExpand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.EdgeExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value v_tag = 1;
  if (this->has_v_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_v_tag(), deterministic, target);
  }

  // .physical.EdgeExpand.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_params(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_alias(), deterministic, target);
  }

  // .physical.EdgeExpand.ExpandOpt expand_opt = 5;
  if (this->expand_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->expand_opt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.EdgeExpand)
  return target;
}

size_t EdgeExpand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.EdgeExpand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value v_tag = 1;
  if (this->has_v_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *v_tag_);
  }

  // .algebra.QueryParams params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .google.protobuf.Int32Value alias = 4;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .physical.EdgeExpand.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .physical.EdgeExpand.ExpandOpt expand_opt = 5;
  if (this->expand_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->expand_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeExpand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.EdgeExpand)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeExpand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeExpand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.EdgeExpand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.EdgeExpand)
    MergeFrom(*source);
  }
}

void EdgeExpand::MergeFrom(const EdgeExpand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.EdgeExpand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_v_tag()) {
    mutable_v_tag()->::google::protobuf::Int32Value::MergeFrom(from.v_tag());
  }
  if (from.has_params()) {
    mutable_params()->::algebra::QueryParams::MergeFrom(from.params());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.expand_opt() != 0) {
    set_expand_opt(from.expand_opt());
  }
}

void EdgeExpand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.EdgeExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeExpand::CopyFrom(const EdgeExpand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.EdgeExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeExpand::IsInitialized() const {
  return true;
}

void EdgeExpand::Swap(EdgeExpand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeExpand::InternalSwap(EdgeExpand* other) {
  using std::swap;
  swap(v_tag_, other->v_tag_);
  swap(params_, other->params_);
  swap(alias_, other->alias_);
  swap(direction_, other->direction_);
  swap(expand_opt_, other->expand_opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EdgeExpand::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathExpand_ExpandBase::InitAsDefaultInstance() {
  ::physical::_PathExpand_ExpandBase_default_instance_._instance.get_mutable()->edge_expand_ = const_cast< ::physical::EdgeExpand*>(
      ::physical::EdgeExpand::internal_default_instance());
  ::physical::_PathExpand_ExpandBase_default_instance_._instance.get_mutable()->get_v_ = const_cast< ::physical::GetV*>(
      ::physical::GetV::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathExpand_ExpandBase::kEdgeExpandFieldNumber;
const int PathExpand_ExpandBase::kGetVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathExpand_ExpandBase::PathExpand_ExpandBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_PathExpand_ExpandBase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.PathExpand.ExpandBase)
}
PathExpand_ExpandBase::PathExpand_ExpandBase(const PathExpand_ExpandBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_edge_expand()) {
    edge_expand_ = new ::physical::EdgeExpand(*from.edge_expand_);
  } else {
    edge_expand_ = NULL;
  }
  if (from.has_get_v()) {
    get_v_ = new ::physical::GetV(*from.get_v_);
  } else {
    get_v_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.PathExpand.ExpandBase)
}

void PathExpand_ExpandBase::SharedCtor() {
  ::memset(&edge_expand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_v_) -
      reinterpret_cast<char*>(&edge_expand_)) + sizeof(get_v_));
}

PathExpand_ExpandBase::~PathExpand_ExpandBase() {
  // @@protoc_insertion_point(destructor:physical.PathExpand.ExpandBase)
  SharedDtor();
}

void PathExpand_ExpandBase::SharedDtor() {
  if (this != internal_default_instance()) delete edge_expand_;
  if (this != internal_default_instance()) delete get_v_;
}

void PathExpand_ExpandBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathExpand_ExpandBase::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathExpand_ExpandBase& PathExpand_ExpandBase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_PathExpand_ExpandBase.base);
  return *internal_default_instance();
}


void PathExpand_ExpandBase::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.PathExpand.ExpandBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && edge_expand_ != NULL) {
    delete edge_expand_;
  }
  edge_expand_ = NULL;
  if (GetArenaNoVirtual() == NULL && get_v_ != NULL) {
    delete get_v_;
  }
  get_v_ = NULL;
  _internal_metadata_.Clear();
}

bool PathExpand_ExpandBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.PathExpand.ExpandBase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.EdgeExpand edge_expand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge_expand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.GetV get_V = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.PathExpand.ExpandBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.PathExpand.ExpandBase)
  return false;
#undef DO_
}

void PathExpand_ExpandBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.PathExpand.ExpandBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.EdgeExpand edge_expand = 1;
  if (this->has_edge_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_edge_expand(), output);
  }

  // .physical.GetV get_V = 2;
  if (this->has_get_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_v(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.PathExpand.ExpandBase)
}

::google::protobuf::uint8* PathExpand_ExpandBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.PathExpand.ExpandBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.EdgeExpand edge_expand = 1;
  if (this->has_edge_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_edge_expand(), deterministic, target);
  }

  // .physical.GetV get_V = 2;
  if (this->has_get_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_v(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.PathExpand.ExpandBase)
  return target;
}

size_t PathExpand_ExpandBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.PathExpand.ExpandBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .physical.EdgeExpand edge_expand = 1;
  if (this->has_edge_expand()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *edge_expand_);
  }

  // .physical.GetV get_V = 2;
  if (this->has_get_v()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_v_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathExpand_ExpandBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.PathExpand.ExpandBase)
  GOOGLE_DCHECK_NE(&from, this);
  const PathExpand_ExpandBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathExpand_ExpandBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.PathExpand.ExpandBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.PathExpand.ExpandBase)
    MergeFrom(*source);
  }
}

void PathExpand_ExpandBase::MergeFrom(const PathExpand_ExpandBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.PathExpand.ExpandBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_edge_expand()) {
    mutable_edge_expand()->::physical::EdgeExpand::MergeFrom(from.edge_expand());
  }
  if (from.has_get_v()) {
    mutable_get_v()->::physical::GetV::MergeFrom(from.get_v());
  }
}

void PathExpand_ExpandBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.PathExpand.ExpandBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathExpand_ExpandBase::CopyFrom(const PathExpand_ExpandBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.PathExpand.ExpandBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathExpand_ExpandBase::IsInitialized() const {
  return true;
}

void PathExpand_ExpandBase::Swap(PathExpand_ExpandBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathExpand_ExpandBase::InternalSwap(PathExpand_ExpandBase* other) {
  using std::swap;
  swap(edge_expand_, other->edge_expand_);
  swap(get_v_, other->get_v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathExpand_ExpandBase::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathExpand::InitAsDefaultInstance() {
  ::physical::_PathExpand_default_instance_._instance.get_mutable()->base_ = const_cast< ::physical::PathExpand_ExpandBase*>(
      ::physical::PathExpand_ExpandBase::internal_default_instance());
  ::physical::_PathExpand_default_instance_._instance.get_mutable()->start_tag_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::physical::_PathExpand_default_instance_._instance.get_mutable()->alias_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::physical::_PathExpand_default_instance_._instance.get_mutable()->hop_range_ = const_cast< ::algebra::Range*>(
      ::algebra::Range::internal_default_instance());
  ::physical::_PathExpand_default_instance_._instance.get_mutable()->condition_ = const_cast< ::common::Expression*>(
      ::common::Expression::internal_default_instance());
}
void PathExpand::clear_start_tag() {
  if (GetArenaNoVirtual() == NULL && start_tag_ != NULL) {
    delete start_tag_;
  }
  start_tag_ = NULL;
}
void PathExpand::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
void PathExpand::clear_hop_range() {
  if (GetArenaNoVirtual() == NULL && hop_range_ != NULL) {
    delete hop_range_;
  }
  hop_range_ = NULL;
}
void PathExpand::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathExpand::kBaseFieldNumber;
const int PathExpand::kStartTagFieldNumber;
const int PathExpand::kAliasFieldNumber;
const int PathExpand::kHopRangeFieldNumber;
const int PathExpand::kPathOptFieldNumber;
const int PathExpand::kResultOptFieldNumber;
const int PathExpand::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathExpand::PathExpand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_PathExpand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.PathExpand)
}
PathExpand::PathExpand(const PathExpand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::physical::PathExpand_ExpandBase(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_start_tag()) {
    start_tag_ = new ::google::protobuf::Int32Value(*from.start_tag_);
  } else {
    start_tag_ = NULL;
  }
  if (from.has_alias()) {
    alias_ = new ::google::protobuf::Int32Value(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_hop_range()) {
    hop_range_ = new ::algebra::Range(*from.hop_range_);
  } else {
    hop_range_ = NULL;
  }
  if (from.has_condition()) {
    condition_ = new ::common::Expression(*from.condition_);
  } else {
    condition_ = NULL;
  }
  ::memcpy(&path_opt_, &from.path_opt_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_opt_) -
    reinterpret_cast<char*>(&path_opt_)) + sizeof(result_opt_));
  // @@protoc_insertion_point(copy_constructor:physical.PathExpand)
}

void PathExpand::SharedCtor() {
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_opt_) -
      reinterpret_cast<char*>(&base_)) + sizeof(result_opt_));
}

PathExpand::~PathExpand() {
  // @@protoc_insertion_point(destructor:physical.PathExpand)
  SharedDtor();
}

void PathExpand::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete start_tag_;
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete hop_range_;
  if (this != internal_default_instance()) delete condition_;
}

void PathExpand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathExpand::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathExpand& PathExpand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_PathExpand.base);
  return *internal_default_instance();
}


void PathExpand::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.PathExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_tag_ != NULL) {
    delete start_tag_;
  }
  start_tag_ = NULL;
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && hop_range_ != NULL) {
    delete hop_range_;
  }
  hop_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  ::memset(&path_opt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_opt_) -
      reinterpret_cast<char*>(&path_opt_)) + sizeof(result_opt_));
  _internal_metadata_.Clear();
}

bool PathExpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.PathExpand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.PathExpand.ExpandBase base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value start_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value alias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Range hop_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hop_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.PathExpand.PathOpt path_opt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_path_opt(static_cast< ::physical::PathExpand_PathOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.PathExpand.ResultOpt result_opt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_opt(static_cast< ::physical::PathExpand_ResultOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Expression condition = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.PathExpand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.PathExpand)
  return false;
#undef DO_
}

void PathExpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.PathExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.PathExpand.ExpandBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_base(), output);
  }

  // .google.protobuf.Int32Value start_tag = 2;
  if (this->has_start_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start_tag(), output);
  }

  // .google.protobuf.Int32Value alias = 3;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_alias(), output);
  }

  // .algebra.Range hop_range = 4;
  if (this->has_hop_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_hop_range(), output);
  }

  // .physical.PathExpand.PathOpt path_opt = 5;
  if (this->path_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->path_opt(), output);
  }

  // .physical.PathExpand.ResultOpt result_opt = 6;
  if (this->result_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->result_opt(), output);
  }

  // .common.Expression condition = 7;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_condition(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.PathExpand)
}

::google::protobuf::uint8* PathExpand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.PathExpand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.PathExpand.ExpandBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_base(), deterministic, target);
  }

  // .google.protobuf.Int32Value start_tag = 2;
  if (this->has_start_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start_tag(), deterministic, target);
  }

  // .google.protobuf.Int32Value alias = 3;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_alias(), deterministic, target);
  }

  // .algebra.Range hop_range = 4;
  if (this->has_hop_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_hop_range(), deterministic, target);
  }

  // .physical.PathExpand.PathOpt path_opt = 5;
  if (this->path_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->path_opt(), target);
  }

  // .physical.PathExpand.ResultOpt result_opt = 6;
  if (this->result_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->result_opt(), target);
  }

  // .common.Expression condition = 7;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_condition(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.PathExpand)
  return target;
}

size_t PathExpand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.PathExpand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .physical.PathExpand.ExpandBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .google.protobuf.Int32Value start_tag = 2;
  if (this->has_start_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_tag_);
  }

  // .google.protobuf.Int32Value alias = 3;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .algebra.Range hop_range = 4;
  if (this->has_hop_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hop_range_);
  }

  // .common.Expression condition = 7;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .physical.PathExpand.PathOpt path_opt = 5;
  if (this->path_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->path_opt());
  }

  // .physical.PathExpand.ResultOpt result_opt = 6;
  if (this->result_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathExpand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.PathExpand)
  GOOGLE_DCHECK_NE(&from, this);
  const PathExpand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathExpand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.PathExpand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.PathExpand)
    MergeFrom(*source);
  }
}

void PathExpand::MergeFrom(const PathExpand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.PathExpand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::physical::PathExpand_ExpandBase::MergeFrom(from.base());
  }
  if (from.has_start_tag()) {
    mutable_start_tag()->::google::protobuf::Int32Value::MergeFrom(from.start_tag());
  }
  if (from.has_alias()) {
    mutable_alias()->::google::protobuf::Int32Value::MergeFrom(from.alias());
  }
  if (from.has_hop_range()) {
    mutable_hop_range()->::algebra::Range::MergeFrom(from.hop_range());
  }
  if (from.has_condition()) {
    mutable_condition()->::common::Expression::MergeFrom(from.condition());
  }
  if (from.path_opt() != 0) {
    set_path_opt(from.path_opt());
  }
  if (from.result_opt() != 0) {
    set_result_opt(from.result_opt());
  }
}

void PathExpand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.PathExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathExpand::CopyFrom(const PathExpand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.PathExpand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathExpand::IsInitialized() const {
  return true;
}

void PathExpand::Swap(PathExpand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathExpand::InternalSwap(PathExpand* other) {
  using std::swap;
  swap(base_, other->base_);
  swap(start_tag_, other->start_tag_);
  swap(alias_, other->alias_);
  swap(hop_range_, other->hop_range_);
  swap(condition_, other->condition_);
  swap(path_opt_, other->path_opt_);
  swap(result_opt_, other->result_opt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathExpand::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sink_OptTag::InitAsDefaultInstance() {
  ::physical::_Sink_OptTag_default_instance_._instance.get_mutable()->tag_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Sink_OptTag::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sink_OptTag::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sink_OptTag::Sink_OptTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Sink_OptTag.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Sink.OptTag)
}
Sink_OptTag::Sink_OptTag(const Sink_OptTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::google::protobuf::Int32Value(*from.tag_);
  } else {
    tag_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.Sink.OptTag)
}

void Sink_OptTag::SharedCtor() {
  tag_ = NULL;
}

Sink_OptTag::~Sink_OptTag() {
  // @@protoc_insertion_point(destructor:physical.Sink.OptTag)
  SharedDtor();
}

void Sink_OptTag::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
}

void Sink_OptTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sink_OptTag::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sink_OptTag& Sink_OptTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Sink_OptTag.base);
  return *internal_default_instance();
}


void Sink_OptTag::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Sink.OptTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  _internal_metadata_.Clear();
}

bool Sink_OptTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Sink.OptTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Sink.OptTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Sink.OptTag)
  return false;
#undef DO_
}

void Sink_OptTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Sink.OptTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Sink.OptTag)
}

::google::protobuf::uint8* Sink_OptTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Sink.OptTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tag(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Sink.OptTag)
  return target;
}

size_t Sink_OptTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Sink.OptTag)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sink_OptTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Sink.OptTag)
  GOOGLE_DCHECK_NE(&from, this);
  const Sink_OptTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sink_OptTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Sink.OptTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Sink.OptTag)
    MergeFrom(*source);
  }
}

void Sink_OptTag::MergeFrom(const Sink_OptTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Sink.OptTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::google::protobuf::Int32Value::MergeFrom(from.tag());
  }
}

void Sink_OptTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Sink.OptTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sink_OptTag::CopyFrom(const Sink_OptTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Sink.OptTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sink_OptTag::IsInitialized() const {
  return true;
}

void Sink_OptTag::Swap(Sink_OptTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sink_OptTag::InternalSwap(Sink_OptTag* other) {
  using std::swap;
  swap(tag_, other->tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sink_OptTag::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sink::InitAsDefaultInstance() {
  ::physical::_Sink_default_instance_._instance.get_mutable()->sink_target_ = const_cast< ::algebra::Sink_SinkTarget*>(
      ::algebra::Sink_SinkTarget::internal_default_instance());
}
void Sink::clear_sink_target() {
  if (GetArenaNoVirtual() == NULL && sink_target_ != NULL) {
    delete sink_target_;
  }
  sink_target_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sink::kTagsFieldNumber;
const int Sink::kSinkTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sink::Sink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Sink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Sink)
}
Sink::Sink(const Sink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sink_target()) {
    sink_target_ = new ::algebra::Sink_SinkTarget(*from.sink_target_);
  } else {
    sink_target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.Sink)
}

void Sink::SharedCtor() {
  sink_target_ = NULL;
}

Sink::~Sink() {
  // @@protoc_insertion_point(destructor:physical.Sink)
  SharedDtor();
}

void Sink::SharedDtor() {
  if (this != internal_default_instance()) delete sink_target_;
}

void Sink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sink::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sink& Sink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Sink.base);
  return *internal_default_instance();
}


void Sink::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Sink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == NULL && sink_target_ != NULL) {
    delete sink_target_;
  }
  sink_target_ = NULL;
  _internal_metadata_.Clear();
}

bool Sink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Sink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .physical.Sink.OptTag tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Sink.SinkTarget sink_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sink_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Sink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Sink)
  return false;
#undef DO_
}

void Sink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Sink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.Sink.OptTag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tags(static_cast<int>(i)),
      output);
  }

  // .algebra.Sink.SinkTarget sink_target = 2;
  if (this->has_sink_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sink_target(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Sink)
}

::google::protobuf::uint8* Sink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Sink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.Sink.OptTag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tags(static_cast<int>(i)), deterministic, target);
  }

  // .algebra.Sink.SinkTarget sink_target = 2;
  if (this->has_sink_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sink_target(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Sink)
  return target;
}

size_t Sink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Sink)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.Sink.OptTag tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // .algebra.Sink.SinkTarget sink_target = 2;
  if (this->has_sink_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sink_target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Sink)
  GOOGLE_DCHECK_NE(&from, this);
  const Sink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Sink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Sink)
    MergeFrom(*source);
  }
}

void Sink::MergeFrom(const Sink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Sink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_sink_target()) {
    mutable_sink_target()->::algebra::Sink_SinkTarget::MergeFrom(from.sink_target());
  }
}

void Sink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Sink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sink::CopyFrom(const Sink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Sink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sink::IsInitialized() const {
  return true;
}

void Sink::Swap(Sink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sink::InternalSwap(Sink* other) {
  using std::swap;
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  swap(sink_target_, other->sink_target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sink::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Repartition_Shuffle::InitAsDefaultInstance() {
  ::physical::_Repartition_Shuffle_default_instance_._instance.get_mutable()->shuffle_key_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Repartition_Shuffle::clear_shuffle_key() {
  if (GetArenaNoVirtual() == NULL && shuffle_key_ != NULL) {
    delete shuffle_key_;
  }
  shuffle_key_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Repartition_Shuffle::kShuffleKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repartition_Shuffle::Repartition_Shuffle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Repartition_Shuffle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Repartition.Shuffle)
}
Repartition_Shuffle::Repartition_Shuffle(const Repartition_Shuffle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shuffle_key()) {
    shuffle_key_ = new ::google::protobuf::Int32Value(*from.shuffle_key_);
  } else {
    shuffle_key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.Repartition.Shuffle)
}

void Repartition_Shuffle::SharedCtor() {
  shuffle_key_ = NULL;
}

Repartition_Shuffle::~Repartition_Shuffle() {
  // @@protoc_insertion_point(destructor:physical.Repartition.Shuffle)
  SharedDtor();
}

void Repartition_Shuffle::SharedDtor() {
  if (this != internal_default_instance()) delete shuffle_key_;
}

void Repartition_Shuffle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Repartition_Shuffle::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Repartition_Shuffle& Repartition_Shuffle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Repartition_Shuffle.base);
  return *internal_default_instance();
}


void Repartition_Shuffle::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Repartition.Shuffle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && shuffle_key_ != NULL) {
    delete shuffle_key_;
  }
  shuffle_key_ = NULL;
  _internal_metadata_.Clear();
}

bool Repartition_Shuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Repartition.Shuffle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value shuffle_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shuffle_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Repartition.Shuffle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Repartition.Shuffle)
  return false;
#undef DO_
}

void Repartition_Shuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Repartition.Shuffle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value shuffle_key = 1;
  if (this->has_shuffle_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_shuffle_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Repartition.Shuffle)
}

::google::protobuf::uint8* Repartition_Shuffle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Repartition.Shuffle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value shuffle_key = 1;
  if (this->has_shuffle_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_shuffle_key(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Repartition.Shuffle)
  return target;
}

size_t Repartition_Shuffle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Repartition.Shuffle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value shuffle_key = 1;
  if (this->has_shuffle_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shuffle_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repartition_Shuffle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Repartition.Shuffle)
  GOOGLE_DCHECK_NE(&from, this);
  const Repartition_Shuffle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Repartition_Shuffle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Repartition.Shuffle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Repartition.Shuffle)
    MergeFrom(*source);
  }
}

void Repartition_Shuffle::MergeFrom(const Repartition_Shuffle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Repartition.Shuffle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shuffle_key()) {
    mutable_shuffle_key()->::google::protobuf::Int32Value::MergeFrom(from.shuffle_key());
  }
}

void Repartition_Shuffle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Repartition.Shuffle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repartition_Shuffle::CopyFrom(const Repartition_Shuffle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Repartition.Shuffle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repartition_Shuffle::IsInitialized() const {
  return true;
}

void Repartition_Shuffle::Swap(Repartition_Shuffle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repartition_Shuffle::InternalSwap(Repartition_Shuffle* other) {
  using std::swap;
  swap(shuffle_key_, other->shuffle_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Repartition_Shuffle::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Repartition_Broadcast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repartition_Broadcast::Repartition_Broadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Repartition_Broadcast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Repartition.Broadcast)
}
Repartition_Broadcast::Repartition_Broadcast(const Repartition_Broadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:physical.Repartition.Broadcast)
}

void Repartition_Broadcast::SharedCtor() {
}

Repartition_Broadcast::~Repartition_Broadcast() {
  // @@protoc_insertion_point(destructor:physical.Repartition.Broadcast)
  SharedDtor();
}

void Repartition_Broadcast::SharedDtor() {
}

void Repartition_Broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Repartition_Broadcast::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Repartition_Broadcast& Repartition_Broadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Repartition_Broadcast.base);
  return *internal_default_instance();
}


void Repartition_Broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Repartition.Broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Repartition_Broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Repartition.Broadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Repartition.Broadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Repartition.Broadcast)
  return false;
#undef DO_
}

void Repartition_Broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Repartition.Broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Repartition.Broadcast)
}

::google::protobuf::uint8* Repartition_Broadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Repartition.Broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Repartition.Broadcast)
  return target;
}

size_t Repartition_Broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Repartition.Broadcast)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repartition_Broadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Repartition.Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const Repartition_Broadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Repartition_Broadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Repartition.Broadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Repartition.Broadcast)
    MergeFrom(*source);
  }
}

void Repartition_Broadcast::MergeFrom(const Repartition_Broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Repartition.Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Repartition_Broadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Repartition.Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repartition_Broadcast::CopyFrom(const Repartition_Broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Repartition.Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repartition_Broadcast::IsInitialized() const {
  return true;
}

void Repartition_Broadcast::Swap(Repartition_Broadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repartition_Broadcast::InternalSwap(Repartition_Broadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Repartition_Broadcast::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Repartition::InitAsDefaultInstance() {
  ::physical::_Repartition_default_instance_.to_another_ = const_cast< ::physical::Repartition_Shuffle*>(
      ::physical::Repartition_Shuffle::internal_default_instance());
  ::physical::_Repartition_default_instance_.to_others_ = const_cast< ::physical::Repartition_Broadcast*>(
      ::physical::Repartition_Broadcast::internal_default_instance());
}
void Repartition::set_allocated_to_another(::physical::Repartition_Shuffle* to_another) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Strategy();
  if (to_another) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to_another = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_another, submessage_arena);
    }
    set_has_to_another();
    Strategy_.to_another_ = to_another;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.Repartition.to_another)
}
void Repartition::set_allocated_to_others(::physical::Repartition_Broadcast* to_others) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Strategy();
  if (to_others) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to_others = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_others, submessage_arena);
    }
    set_has_to_others();
    Strategy_.to_others_ = to_others;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.Repartition.to_others)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Repartition::kToAnotherFieldNumber;
const int Repartition::kToOthersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Repartition::Repartition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Repartition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Repartition)
}
Repartition::Repartition(const Repartition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Strategy();
  switch (from.Strategy_case()) {
    case kToAnother: {
      mutable_to_another()->::physical::Repartition_Shuffle::MergeFrom(from.to_another());
      break;
    }
    case kToOthers: {
      mutable_to_others()->::physical::Repartition_Broadcast::MergeFrom(from.to_others());
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:physical.Repartition)
}

void Repartition::SharedCtor() {
  clear_has_Strategy();
}

Repartition::~Repartition() {
  // @@protoc_insertion_point(destructor:physical.Repartition)
  SharedDtor();
}

void Repartition::SharedDtor() {
  if (has_Strategy()) {
    clear_Strategy();
  }
}

void Repartition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Repartition::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Repartition& Repartition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Repartition.base);
  return *internal_default_instance();
}


void Repartition::clear_Strategy() {
// @@protoc_insertion_point(one_of_clear_start:physical.Repartition)
  switch (Strategy_case()) {
    case kToAnother: {
      delete Strategy_.to_another_;
      break;
    }
    case kToOthers: {
      delete Strategy_.to_others_;
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_NOT_SET;
}


void Repartition::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Repartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Strategy();
  _internal_metadata_.Clear();
}

bool Repartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Repartition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.Repartition.Shuffle to_another = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_another()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Repartition.Broadcast to_others = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_others()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Repartition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Repartition)
  return false;
#undef DO_
}

void Repartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Repartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Repartition.Shuffle to_another = 1;
  if (has_to_another()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_to_another(), output);
  }

  // .physical.Repartition.Broadcast to_others = 2;
  if (has_to_others()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_to_others(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Repartition)
}

::google::protobuf::uint8* Repartition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Repartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Repartition.Shuffle to_another = 1;
  if (has_to_another()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_to_another(), deterministic, target);
  }

  // .physical.Repartition.Broadcast to_others = 2;
  if (has_to_others()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_to_others(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Repartition)
  return target;
}

size_t Repartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Repartition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (Strategy_case()) {
    // .physical.Repartition.Shuffle to_another = 1;
    case kToAnother: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Strategy_.to_another_);
      break;
    }
    // .physical.Repartition.Broadcast to_others = 2;
    case kToOthers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Strategy_.to_others_);
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repartition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Repartition)
  GOOGLE_DCHECK_NE(&from, this);
  const Repartition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Repartition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Repartition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Repartition)
    MergeFrom(*source);
  }
}

void Repartition::MergeFrom(const Repartition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Repartition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Strategy_case()) {
    case kToAnother: {
      mutable_to_another()->::physical::Repartition_Shuffle::MergeFrom(from.to_another());
      break;
    }
    case kToOthers: {
      mutable_to_others()->::physical::Repartition_Broadcast::MergeFrom(from.to_others());
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
}

void Repartition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Repartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repartition::CopyFrom(const Repartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Repartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repartition::IsInitialized() const {
  return true;
}

void Repartition::Swap(Repartition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Repartition::InternalSwap(Repartition* other) {
  using std::swap;
  swap(Strategy_, other->Strategy_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Repartition::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Root::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Root::Root()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Root.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.Root)
}
Root::Root(const Root& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:physical.Root)
}

void Root::SharedCtor() {
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:physical.Root)
  SharedDtor();
}

void Root::SharedDtor() {
}

void Root::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Root::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Root& Root::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Root.base);
  return *internal_default_instance();
}


void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Root::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.Root)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:physical.Root)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.Root)
  return false;
#undef DO_
}

void Root::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.Root)
}

::google::protobuf::uint8* Root::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.Root)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Root::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.Root)
  GOOGLE_DCHECK_NE(&from, this);
  const Root* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Root>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.Root)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.Root)
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.Root)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Root::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  return true;
}

void Root::Swap(Root* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Root::InternalSwap(Root* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Root::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PhysicalOpr_Operator::InitAsDefaultInstance() {
  ::physical::_PhysicalOpr_Operator_default_instance_.project_ = const_cast< ::physical::Project*>(
      ::physical::Project::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.select_ = const_cast< ::algebra::Select*>(
      ::algebra::Select::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.group_by_ = const_cast< ::physical::GroupBy*>(
      ::physical::GroupBy::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.order_by_ = const_cast< ::algebra::OrderBy*>(
      ::algebra::OrderBy::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.dedup_ = const_cast< ::algebra::Dedup*>(
      ::algebra::Dedup::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.unfold_ = const_cast< ::physical::Unfold*>(
      ::physical::Unfold::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.limit_ = const_cast< ::algebra::Limit*>(
      ::algebra::Limit::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.scan_ = const_cast< ::physical::Scan*>(
      ::physical::Scan::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.sink_ = const_cast< ::physical::Sink*>(
      ::physical::Sink::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.apply_ = const_cast< ::physical::Apply*>(
      ::physical::Apply::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.join_ = const_cast< ::physical::Join*>(
      ::physical::Join::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.union__ = const_cast< ::physical::Union*>(
      ::physical::Union::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.intersect_ = const_cast< ::physical::Intersect*>(
      ::physical::Intersect::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.repartition_ = const_cast< ::physical::Repartition*>(
      ::physical::Repartition::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.root_ = const_cast< ::physical::Root*>(
      ::physical::Root::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.sample_ = const_cast< ::algebra::Sample*>(
      ::algebra::Sample::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.vertex_ = const_cast< ::physical::GetV*>(
      ::physical::GetV::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.edge_ = const_cast< ::physical::EdgeExpand*>(
      ::physical::EdgeExpand::internal_default_instance());
  ::physical::_PhysicalOpr_Operator_default_instance_.path_ = const_cast< ::physical::PathExpand*>(
      ::physical::PathExpand::internal_default_instance());
}
void PhysicalOpr_Operator::set_allocated_project(::physical::Project* project) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (project) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      project = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    op_kind_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.project)
}
void PhysicalOpr_Operator::set_allocated_select(::algebra::Select* select) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (select) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    set_has_select();
    op_kind_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.select)
}
void PhysicalOpr_Operator::clear_select() {
  if (has_select()) {
    delete op_kind_.select_;
    clear_has_op_kind();
  }
}
void PhysicalOpr_Operator::set_allocated_group_by(::physical::GroupBy* group_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (group_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_by, submessage_arena);
    }
    set_has_group_by();
    op_kind_.group_by_ = group_by;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.group_by)
}
void PhysicalOpr_Operator::set_allocated_order_by(::algebra::OrderBy* order_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (order_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      order_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order_by, submessage_arena);
    }
    set_has_order_by();
    op_kind_.order_by_ = order_by;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.order_by)
}
void PhysicalOpr_Operator::clear_order_by() {
  if (has_order_by()) {
    delete op_kind_.order_by_;
    clear_has_op_kind();
  }
}
void PhysicalOpr_Operator::set_allocated_dedup(::algebra::Dedup* dedup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (dedup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dedup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dedup, submessage_arena);
    }
    set_has_dedup();
    op_kind_.dedup_ = dedup;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.dedup)
}
void PhysicalOpr_Operator::clear_dedup() {
  if (has_dedup()) {
    delete op_kind_.dedup_;
    clear_has_op_kind();
  }
}
void PhysicalOpr_Operator::set_allocated_unfold(::physical::Unfold* unfold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (unfold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unfold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unfold, submessage_arena);
    }
    set_has_unfold();
    op_kind_.unfold_ = unfold;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.unfold)
}
void PhysicalOpr_Operator::set_allocated_limit(::algebra::Limit* limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    set_has_limit();
    op_kind_.limit_ = limit;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.limit)
}
void PhysicalOpr_Operator::clear_limit() {
  if (has_limit()) {
    delete op_kind_.limit_;
    clear_has_op_kind();
  }
}
void PhysicalOpr_Operator::set_allocated_scan(::physical::Scan* scan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (scan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    set_has_scan();
    op_kind_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.scan)
}
void PhysicalOpr_Operator::set_allocated_sink(::physical::Sink* sink) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (sink) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sink = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sink, submessage_arena);
    }
    set_has_sink();
    op_kind_.sink_ = sink;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.sink)
}
void PhysicalOpr_Operator::set_allocated_apply(::physical::Apply* apply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (apply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply, submessage_arena);
    }
    set_has_apply();
    op_kind_.apply_ = apply;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.apply)
}
void PhysicalOpr_Operator::set_allocated_join(::physical::Join* join) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (join) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    op_kind_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.join)
}
void PhysicalOpr_Operator::set_allocated_union_(::physical::Union* union_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (union_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      union_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, union_, submessage_arena);
    }
    set_has_union_();
    op_kind_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.union)
}
void PhysicalOpr_Operator::set_allocated_intersect(::physical::Intersect* intersect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (intersect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intersect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersect, submessage_arena);
    }
    set_has_intersect();
    op_kind_.intersect_ = intersect;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.intersect)
}
void PhysicalOpr_Operator::set_allocated_repartition(::physical::Repartition* repartition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (repartition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      repartition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, repartition, submessage_arena);
    }
    set_has_repartition();
    op_kind_.repartition_ = repartition;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.repartition)
}
void PhysicalOpr_Operator::set_allocated_root(::physical::Root* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    set_has_root();
    op_kind_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.root)
}
void PhysicalOpr_Operator::set_allocated_sample(::algebra::Sample* sample) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (sample) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    set_has_sample();
    op_kind_.sample_ = sample;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.sample)
}
void PhysicalOpr_Operator::clear_sample() {
  if (has_sample()) {
    delete op_kind_.sample_;
    clear_has_op_kind();
  }
}
void PhysicalOpr_Operator::set_allocated_vertex(::physical::GetV* vertex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (vertex) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vertex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vertex, submessage_arena);
    }
    set_has_vertex();
    op_kind_.vertex_ = vertex;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.vertex)
}
void PhysicalOpr_Operator::set_allocated_edge(::physical::EdgeExpand* edge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (edge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      edge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    set_has_edge();
    op_kind_.edge_ = edge;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.edge)
}
void PhysicalOpr_Operator::set_allocated_path(::physical::PathExpand* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op_kind();
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    set_has_path();
    op_kind_.path_ = path;
  }
  // @@protoc_insertion_point(field_set_allocated:physical.PhysicalOpr.Operator.path)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicalOpr_Operator::kProjectFieldNumber;
const int PhysicalOpr_Operator::kSelectFieldNumber;
const int PhysicalOpr_Operator::kGroupByFieldNumber;
const int PhysicalOpr_Operator::kOrderByFieldNumber;
const int PhysicalOpr_Operator::kDedupFieldNumber;
const int PhysicalOpr_Operator::kUnfoldFieldNumber;
const int PhysicalOpr_Operator::kLimitFieldNumber;
const int PhysicalOpr_Operator::kScanFieldNumber;
const int PhysicalOpr_Operator::kSinkFieldNumber;
const int PhysicalOpr_Operator::kApplyFieldNumber;
const int PhysicalOpr_Operator::kJoinFieldNumber;
const int PhysicalOpr_Operator::kUnionFieldNumber;
const int PhysicalOpr_Operator::kIntersectFieldNumber;
const int PhysicalOpr_Operator::kRepartitionFieldNumber;
const int PhysicalOpr_Operator::kRootFieldNumber;
const int PhysicalOpr_Operator::kSampleFieldNumber;
const int PhysicalOpr_Operator::kVertexFieldNumber;
const int PhysicalOpr_Operator::kEdgeFieldNumber;
const int PhysicalOpr_Operator::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicalOpr_Operator::PhysicalOpr_Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.PhysicalOpr.Operator)
}
PhysicalOpr_Operator::PhysicalOpr_Operator(const PhysicalOpr_Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_op_kind();
  switch (from.op_kind_case()) {
    case kProject: {
      mutable_project()->::physical::Project::MergeFrom(from.project());
      break;
    }
    case kSelect: {
      mutable_select()->::algebra::Select::MergeFrom(from.select());
      break;
    }
    case kGroupBy: {
      mutable_group_by()->::physical::GroupBy::MergeFrom(from.group_by());
      break;
    }
    case kOrderBy: {
      mutable_order_by()->::algebra::OrderBy::MergeFrom(from.order_by());
      break;
    }
    case kDedup: {
      mutable_dedup()->::algebra::Dedup::MergeFrom(from.dedup());
      break;
    }
    case kUnfold: {
      mutable_unfold()->::physical::Unfold::MergeFrom(from.unfold());
      break;
    }
    case kLimit: {
      mutable_limit()->::algebra::Limit::MergeFrom(from.limit());
      break;
    }
    case kScan: {
      mutable_scan()->::physical::Scan::MergeFrom(from.scan());
      break;
    }
    case kSink: {
      mutable_sink()->::physical::Sink::MergeFrom(from.sink());
      break;
    }
    case kApply: {
      mutable_apply()->::physical::Apply::MergeFrom(from.apply());
      break;
    }
    case kJoin: {
      mutable_join()->::physical::Join::MergeFrom(from.join());
      break;
    }
    case kUnion: {
      mutable_union_()->::physical::Union::MergeFrom(from.union_());
      break;
    }
    case kIntersect: {
      mutable_intersect()->::physical::Intersect::MergeFrom(from.intersect());
      break;
    }
    case kRepartition: {
      mutable_repartition()->::physical::Repartition::MergeFrom(from.repartition());
      break;
    }
    case kRoot: {
      mutable_root()->::physical::Root::MergeFrom(from.root());
      break;
    }
    case kSample: {
      mutable_sample()->::algebra::Sample::MergeFrom(from.sample());
      break;
    }
    case kVertex: {
      mutable_vertex()->::physical::GetV::MergeFrom(from.vertex());
      break;
    }
    case kEdge: {
      mutable_edge()->::physical::EdgeExpand::MergeFrom(from.edge());
      break;
    }
    case kPath: {
      mutable_path()->::physical::PathExpand::MergeFrom(from.path());
      break;
    }
    case OP_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:physical.PhysicalOpr.Operator)
}

void PhysicalOpr_Operator::SharedCtor() {
  clear_has_op_kind();
}

PhysicalOpr_Operator::~PhysicalOpr_Operator() {
  // @@protoc_insertion_point(destructor:physical.PhysicalOpr.Operator)
  SharedDtor();
}

void PhysicalOpr_Operator::SharedDtor() {
  if (has_op_kind()) {
    clear_op_kind();
  }
}

void PhysicalOpr_Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PhysicalOpr_Operator::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhysicalOpr_Operator& PhysicalOpr_Operator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void PhysicalOpr_Operator::clear_op_kind() {
// @@protoc_insertion_point(one_of_clear_start:physical.PhysicalOpr.Operator)
  switch (op_kind_case()) {
    case kProject: {
      delete op_kind_.project_;
      break;
    }
    case kSelect: {
      delete op_kind_.select_;
      break;
    }
    case kGroupBy: {
      delete op_kind_.group_by_;
      break;
    }
    case kOrderBy: {
      delete op_kind_.order_by_;
      break;
    }
    case kDedup: {
      delete op_kind_.dedup_;
      break;
    }
    case kUnfold: {
      delete op_kind_.unfold_;
      break;
    }
    case kLimit: {
      delete op_kind_.limit_;
      break;
    }
    case kScan: {
      delete op_kind_.scan_;
      break;
    }
    case kSink: {
      delete op_kind_.sink_;
      break;
    }
    case kApply: {
      delete op_kind_.apply_;
      break;
    }
    case kJoin: {
      delete op_kind_.join_;
      break;
    }
    case kUnion: {
      delete op_kind_.union__;
      break;
    }
    case kIntersect: {
      delete op_kind_.intersect_;
      break;
    }
    case kRepartition: {
      delete op_kind_.repartition_;
      break;
    }
    case kRoot: {
      delete op_kind_.root_;
      break;
    }
    case kSample: {
      delete op_kind_.sample_;
      break;
    }
    case kVertex: {
      delete op_kind_.vertex_;
      break;
    }
    case kEdge: {
      delete op_kind_.edge_;
      break;
    }
    case kPath: {
      delete op_kind_.path_;
      break;
    }
    case OP_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_KIND_NOT_SET;
}


void PhysicalOpr_Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.PhysicalOpr.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op_kind();
  _internal_metadata_.Clear();
}

bool PhysicalOpr_Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.PhysicalOpr.Operator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.Project project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Select select = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.GroupBy group_by = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.OrderBy order_by = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Dedup dedup = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dedup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Unfold unfold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unfold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Limit limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Scan scan = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Sink sink = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Apply apply = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Join join = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Union union = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_union_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Intersect intersect = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Repartition repartition = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_repartition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.Root root = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .algebra.Sample sample = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.GetV vertex = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vertex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.EdgeExpand edge = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .physical.PathExpand path = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.PhysicalOpr.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.PhysicalOpr.Operator)
  return false;
#undef DO_
}

void PhysicalOpr_Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.PhysicalOpr.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Project project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_project(), output);
  }

  // .algebra.Select select = 2;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_select(), output);
  }

  // .physical.GroupBy group_by = 3;
  if (has_group_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_group_by(), output);
  }

  // .algebra.OrderBy order_by = 4;
  if (has_order_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_order_by(), output);
  }

  // .algebra.Dedup dedup = 5;
  if (has_dedup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_dedup(), output);
  }

  // .physical.Unfold unfold = 6;
  if (has_unfold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_unfold(), output);
  }

  // .algebra.Limit limit = 7;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_limit(), output);
  }

  // .physical.Scan scan = 8;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_scan(), output);
  }

  // .physical.Sink sink = 9;
  if (has_sink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_sink(), output);
  }

  // .physical.Apply apply = 10;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_apply(), output);
  }

  // .physical.Join join = 11;
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_join(), output);
  }

  // .physical.Union union = 12;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_union_(), output);
  }

  // .physical.Intersect intersect = 13;
  if (has_intersect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_intersect(), output);
  }

  // .physical.Repartition repartition = 14;
  if (has_repartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_repartition(), output);
  }

  // .physical.Root root = 16;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_root(), output);
  }

  // .algebra.Sample sample = 17;
  if (has_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_sample(), output);
  }

  // .physical.GetV vertex = 30;
  if (has_vertex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_vertex(), output);
  }

  // .physical.EdgeExpand edge = 31;
  if (has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_edge(), output);
  }

  // .physical.PathExpand path = 32;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.PhysicalOpr.Operator)
}

::google::protobuf::uint8* PhysicalOpr_Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.PhysicalOpr.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.Project project = 1;
  if (has_project()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_project(), deterministic, target);
  }

  // .algebra.Select select = 2;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_select(), deterministic, target);
  }

  // .physical.GroupBy group_by = 3;
  if (has_group_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_group_by(), deterministic, target);
  }

  // .algebra.OrderBy order_by = 4;
  if (has_order_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_order_by(), deterministic, target);
  }

  // .algebra.Dedup dedup = 5;
  if (has_dedup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_dedup(), deterministic, target);
  }

  // .physical.Unfold unfold = 6;
  if (has_unfold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_unfold(), deterministic, target);
  }

  // .algebra.Limit limit = 7;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_limit(), deterministic, target);
  }

  // .physical.Scan scan = 8;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_scan(), deterministic, target);
  }

  // .physical.Sink sink = 9;
  if (has_sink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_sink(), deterministic, target);
  }

  // .physical.Apply apply = 10;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_apply(), deterministic, target);
  }

  // .physical.Join join = 11;
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_join(), deterministic, target);
  }

  // .physical.Union union = 12;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_union_(), deterministic, target);
  }

  // .physical.Intersect intersect = 13;
  if (has_intersect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_intersect(), deterministic, target);
  }

  // .physical.Repartition repartition = 14;
  if (has_repartition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_repartition(), deterministic, target);
  }

  // .physical.Root root = 16;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_root(), deterministic, target);
  }

  // .algebra.Sample sample = 17;
  if (has_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_sample(), deterministic, target);
  }

  // .physical.GetV vertex = 30;
  if (has_vertex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_vertex(), deterministic, target);
  }

  // .physical.EdgeExpand edge = 31;
  if (has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_edge(), deterministic, target);
  }

  // .physical.PathExpand path = 32;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_path(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.PhysicalOpr.Operator)
  return target;
}

size_t PhysicalOpr_Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.PhysicalOpr.Operator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (op_kind_case()) {
    // .physical.Project project = 1;
    case kProject: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.project_);
      break;
    }
    // .algebra.Select select = 2;
    case kSelect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.select_);
      break;
    }
    // .physical.GroupBy group_by = 3;
    case kGroupBy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.group_by_);
      break;
    }
    // .algebra.OrderBy order_by = 4;
    case kOrderBy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.order_by_);
      break;
    }
    // .algebra.Dedup dedup = 5;
    case kDedup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.dedup_);
      break;
    }
    // .physical.Unfold unfold = 6;
    case kUnfold: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.unfold_);
      break;
    }
    // .algebra.Limit limit = 7;
    case kLimit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.limit_);
      break;
    }
    // .physical.Scan scan = 8;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.scan_);
      break;
    }
    // .physical.Sink sink = 9;
    case kSink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.sink_);
      break;
    }
    // .physical.Apply apply = 10;
    case kApply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.apply_);
      break;
    }
    // .physical.Join join = 11;
    case kJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.join_);
      break;
    }
    // .physical.Union union = 12;
    case kUnion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.union__);
      break;
    }
    // .physical.Intersect intersect = 13;
    case kIntersect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.intersect_);
      break;
    }
    // .physical.Repartition repartition = 14;
    case kRepartition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.repartition_);
      break;
    }
    // .physical.Root root = 16;
    case kRoot: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.root_);
      break;
    }
    // .algebra.Sample sample = 17;
    case kSample: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.sample_);
      break;
    }
    // .physical.GetV vertex = 30;
    case kVertex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.vertex_);
      break;
    }
    // .physical.EdgeExpand edge = 31;
    case kEdge: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.edge_);
      break;
    }
    // .physical.PathExpand path = 32;
    case kPath: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_kind_.path_);
      break;
    }
    case OP_KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalOpr_Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.PhysicalOpr.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalOpr_Operator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicalOpr_Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.PhysicalOpr.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.PhysicalOpr.Operator)
    MergeFrom(*source);
  }
}

void PhysicalOpr_Operator::MergeFrom(const PhysicalOpr_Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.PhysicalOpr.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_kind_case()) {
    case kProject: {
      mutable_project()->::physical::Project::MergeFrom(from.project());
      break;
    }
    case kSelect: {
      mutable_select()->::algebra::Select::MergeFrom(from.select());
      break;
    }
    case kGroupBy: {
      mutable_group_by()->::physical::GroupBy::MergeFrom(from.group_by());
      break;
    }
    case kOrderBy: {
      mutable_order_by()->::algebra::OrderBy::MergeFrom(from.order_by());
      break;
    }
    case kDedup: {
      mutable_dedup()->::algebra::Dedup::MergeFrom(from.dedup());
      break;
    }
    case kUnfold: {
      mutable_unfold()->::physical::Unfold::MergeFrom(from.unfold());
      break;
    }
    case kLimit: {
      mutable_limit()->::algebra::Limit::MergeFrom(from.limit());
      break;
    }
    case kScan: {
      mutable_scan()->::physical::Scan::MergeFrom(from.scan());
      break;
    }
    case kSink: {
      mutable_sink()->::physical::Sink::MergeFrom(from.sink());
      break;
    }
    case kApply: {
      mutable_apply()->::physical::Apply::MergeFrom(from.apply());
      break;
    }
    case kJoin: {
      mutable_join()->::physical::Join::MergeFrom(from.join());
      break;
    }
    case kUnion: {
      mutable_union_()->::physical::Union::MergeFrom(from.union_());
      break;
    }
    case kIntersect: {
      mutable_intersect()->::physical::Intersect::MergeFrom(from.intersect());
      break;
    }
    case kRepartition: {
      mutable_repartition()->::physical::Repartition::MergeFrom(from.repartition());
      break;
    }
    case kRoot: {
      mutable_root()->::physical::Root::MergeFrom(from.root());
      break;
    }
    case kSample: {
      mutable_sample()->::algebra::Sample::MergeFrom(from.sample());
      break;
    }
    case kVertex: {
      mutable_vertex()->::physical::GetV::MergeFrom(from.vertex());
      break;
    }
    case kEdge: {
      mutable_edge()->::physical::EdgeExpand::MergeFrom(from.edge());
      break;
    }
    case kPath: {
      mutable_path()->::physical::PathExpand::MergeFrom(from.path());
      break;
    }
    case OP_KIND_NOT_SET: {
      break;
    }
  }
}

void PhysicalOpr_Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.PhysicalOpr.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalOpr_Operator::CopyFrom(const PhysicalOpr_Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.PhysicalOpr.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalOpr_Operator::IsInitialized() const {
  return true;
}

void PhysicalOpr_Operator::Swap(PhysicalOpr_Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicalOpr_Operator::InternalSwap(PhysicalOpr_Operator* other) {
  using std::swap;
  swap(op_kind_, other->op_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PhysicalOpr_Operator::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PhysicalOpr_MetaData::InitAsDefaultInstance() {
  ::physical::_PhysicalOpr_MetaData_default_instance_._instance.get_mutable()->type_ = const_cast< ::common::IrDataType*>(
      ::common::IrDataType::internal_default_instance());
}
void PhysicalOpr_MetaData::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicalOpr_MetaData::kTypeFieldNumber;
const int PhysicalOpr_MetaData::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicalOpr_MetaData::PhysicalOpr_MetaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_PhysicalOpr_MetaData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.PhysicalOpr.MetaData)
}
PhysicalOpr_MetaData::PhysicalOpr_MetaData(const PhysicalOpr_MetaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    type_ = new ::common::IrDataType(*from.type_);
  } else {
    type_ = NULL;
  }
  alias_ = from.alias_;
  // @@protoc_insertion_point(copy_constructor:physical.PhysicalOpr.MetaData)
}

void PhysicalOpr_MetaData::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&type_)) + sizeof(alias_));
}

PhysicalOpr_MetaData::~PhysicalOpr_MetaData() {
  // @@protoc_insertion_point(destructor:physical.PhysicalOpr.MetaData)
  SharedDtor();
}

void PhysicalOpr_MetaData::SharedDtor() {
  if (this != internal_default_instance()) delete type_;
}

void PhysicalOpr_MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PhysicalOpr_MetaData::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhysicalOpr_MetaData& PhysicalOpr_MetaData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_PhysicalOpr_MetaData.base);
  return *internal_default_instance();
}


void PhysicalOpr_MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.PhysicalOpr.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
  alias_ = 0;
  _internal_metadata_.Clear();
}

bool PhysicalOpr_MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.PhysicalOpr.MetaData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.IrDataType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.PhysicalOpr.MetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.PhysicalOpr.MetaData)
  return false;
#undef DO_
}

void PhysicalOpr_MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.PhysicalOpr.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.IrDataType type = 1;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_type(), output);
  }

  // int32 alias = 2;
  if (this->alias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.PhysicalOpr.MetaData)
}

::google::protobuf::uint8* PhysicalOpr_MetaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.PhysicalOpr.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.IrDataType type = 1;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_type(), deterministic, target);
  }

  // int32 alias = 2;
  if (this->alias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alias(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.PhysicalOpr.MetaData)
  return target;
}

size_t PhysicalOpr_MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.PhysicalOpr.MetaData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.IrDataType type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // int32 alias = 2;
  if (this->alias() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alias());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalOpr_MetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.PhysicalOpr.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalOpr_MetaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicalOpr_MetaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.PhysicalOpr.MetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.PhysicalOpr.MetaData)
    MergeFrom(*source);
  }
}

void PhysicalOpr_MetaData::MergeFrom(const PhysicalOpr_MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.PhysicalOpr.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    mutable_type()->::common::IrDataType::MergeFrom(from.type());
  }
  if (from.alias() != 0) {
    set_alias(from.alias());
  }
}

void PhysicalOpr_MetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.PhysicalOpr.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalOpr_MetaData::CopyFrom(const PhysicalOpr_MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.PhysicalOpr.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalOpr_MetaData::IsInitialized() const {
  return true;
}

void PhysicalOpr_MetaData::Swap(PhysicalOpr_MetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicalOpr_MetaData::InternalSwap(PhysicalOpr_MetaData* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(alias_, other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PhysicalOpr_MetaData::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PhysicalOpr::InitAsDefaultInstance() {
  ::physical::_PhysicalOpr_default_instance_._instance.get_mutable()->opr_ = const_cast< ::physical::PhysicalOpr_Operator*>(
      ::physical::PhysicalOpr_Operator::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicalOpr::kOprFieldNumber;
const int PhysicalOpr::kMetaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicalOpr::PhysicalOpr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.PhysicalOpr)
}
PhysicalOpr::PhysicalOpr(const PhysicalOpr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      meta_data_(from.meta_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_opr()) {
    opr_ = new ::physical::PhysicalOpr_Operator(*from.opr_);
  } else {
    opr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:physical.PhysicalOpr)
}

void PhysicalOpr::SharedCtor() {
  opr_ = NULL;
}

PhysicalOpr::~PhysicalOpr() {
  // @@protoc_insertion_point(destructor:physical.PhysicalOpr)
  SharedDtor();
}

void PhysicalOpr::SharedDtor() {
  if (this != internal_default_instance()) delete opr_;
}

void PhysicalOpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PhysicalOpr::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhysicalOpr& PhysicalOpr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void PhysicalOpr::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.PhysicalOpr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_data_.Clear();
  if (GetArenaNoVirtual() == NULL && opr_ != NULL) {
    delete opr_;
  }
  opr_ = NULL;
  _internal_metadata_.Clear();
}

bool PhysicalOpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.PhysicalOpr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .physical.PhysicalOpr.Operator opr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_opr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .physical.PhysicalOpr.MetaData meta_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_meta_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.PhysicalOpr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.PhysicalOpr)
  return false;
#undef DO_
}

void PhysicalOpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.PhysicalOpr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.PhysicalOpr.Operator opr = 1;
  if (this->has_opr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_opr(), output);
  }

  // repeated .physical.PhysicalOpr.MetaData meta_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->meta_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.PhysicalOpr)
}

::google::protobuf::uint8* PhysicalOpr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.PhysicalOpr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .physical.PhysicalOpr.Operator opr = 1;
  if (this->has_opr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_opr(), deterministic, target);
  }

  // repeated .physical.PhysicalOpr.MetaData meta_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->meta_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.PhysicalOpr)
  return target;
}

size_t PhysicalOpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.PhysicalOpr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.PhysicalOpr.MetaData meta_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->meta_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meta_data(static_cast<int>(i)));
    }
  }

  // .physical.PhysicalOpr.Operator opr = 1;
  if (this->has_opr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *opr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalOpr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.PhysicalOpr)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalOpr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicalOpr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.PhysicalOpr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.PhysicalOpr)
    MergeFrom(*source);
  }
}

void PhysicalOpr::MergeFrom(const PhysicalOpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.PhysicalOpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meta_data_.MergeFrom(from.meta_data_);
  if (from.has_opr()) {
    mutable_opr()->::physical::PhysicalOpr_Operator::MergeFrom(from.opr());
  }
}

void PhysicalOpr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.PhysicalOpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalOpr::CopyFrom(const PhysicalOpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.PhysicalOpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalOpr::IsInitialized() const {
  return true;
}

void PhysicalOpr::Swap(PhysicalOpr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicalOpr::InternalSwap(PhysicalOpr* other) {
  using std::swap;
  CastToBase(&meta_data_)->InternalSwap(CastToBase(&other->meta_data_));
  swap(opr_, other->opr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PhysicalOpr::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PhysicalPlan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicalPlan::kPlanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicalPlan::PhysicalPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_physical_2eproto::scc_info_Apply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:physical.PhysicalPlan)
}
PhysicalPlan::PhysicalPlan(const PhysicalPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      plan_(from.plan_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:physical.PhysicalPlan)
}

void PhysicalPlan::SharedCtor() {
}

PhysicalPlan::~PhysicalPlan() {
  // @@protoc_insertion_point(destructor:physical.PhysicalPlan)
  SharedDtor();
}

void PhysicalPlan::SharedDtor() {
}

void PhysicalPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PhysicalPlan::descriptor() {
  ::protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhysicalPlan& PhysicalPlan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_physical_2eproto::scc_info_Apply.base);
  return *internal_default_instance();
}


void PhysicalPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:physical.PhysicalPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plan_.Clear();
  _internal_metadata_.Clear();
}

bool PhysicalPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:physical.PhysicalPlan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .physical.PhysicalOpr plan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:physical.PhysicalPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:physical.PhysicalPlan)
  return false;
#undef DO_
}

void PhysicalPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:physical.PhysicalPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.PhysicalOpr plan = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plan_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->plan(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:physical.PhysicalPlan)
}

::google::protobuf::uint8* PhysicalPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:physical.PhysicalPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .physical.PhysicalOpr plan = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plan_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->plan(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:physical.PhysicalPlan)
  return target;
}

size_t PhysicalPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:physical.PhysicalPlan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .physical.PhysicalOpr plan = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->plan_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plan(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:physical.PhysicalPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicalPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:physical.PhysicalPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:physical.PhysicalPlan)
    MergeFrom(*source);
  }
}

void PhysicalPlan::MergeFrom(const PhysicalPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:physical.PhysicalPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plan_.MergeFrom(from.plan_);
}

void PhysicalPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:physical.PhysicalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalPlan::CopyFrom(const PhysicalPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:physical.PhysicalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalPlan::IsInitialized() const {
  return true;
}

void PhysicalPlan::Swap(PhysicalPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicalPlan::InternalSwap(PhysicalPlan* other) {
  using std::swap;
  CastToBase(&plan_)->InternalSwap(CastToBase(&other->plan_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PhysicalPlan::GetMetadata() const {
  protobuf_physical_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_physical_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace physical
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Project_ExprAlias* Arena::CreateMaybeMessage< ::physical::Project_ExprAlias >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Project_ExprAlias >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Project* Arena::CreateMaybeMessage< ::physical::Project >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Project >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::GroupBy_AggFunc* Arena::CreateMaybeMessage< ::physical::GroupBy_AggFunc >(Arena* arena) {
  return Arena::CreateInternal< ::physical::GroupBy_AggFunc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::GroupBy_KeyAlias* Arena::CreateMaybeMessage< ::physical::GroupBy_KeyAlias >(Arena* arena) {
  return Arena::CreateInternal< ::physical::GroupBy_KeyAlias >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::GroupBy* Arena::CreateMaybeMessage< ::physical::GroupBy >(Arena* arena) {
  return Arena::CreateInternal< ::physical::GroupBy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Unfold* Arena::CreateMaybeMessage< ::physical::Unfold >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Unfold >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Union* Arena::CreateMaybeMessage< ::physical::Union >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Union >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Intersect* Arena::CreateMaybeMessage< ::physical::Intersect >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Intersect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Join* Arena::CreateMaybeMessage< ::physical::Join >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Apply* Arena::CreateMaybeMessage< ::physical::Apply >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Apply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Scan* Arena::CreateMaybeMessage< ::physical::Scan >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Scan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::GetV* Arena::CreateMaybeMessage< ::physical::GetV >(Arena* arena) {
  return Arena::CreateInternal< ::physical::GetV >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::EdgeExpand* Arena::CreateMaybeMessage< ::physical::EdgeExpand >(Arena* arena) {
  return Arena::CreateInternal< ::physical::EdgeExpand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::PathExpand_ExpandBase* Arena::CreateMaybeMessage< ::physical::PathExpand_ExpandBase >(Arena* arena) {
  return Arena::CreateInternal< ::physical::PathExpand_ExpandBase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::PathExpand* Arena::CreateMaybeMessage< ::physical::PathExpand >(Arena* arena) {
  return Arena::CreateInternal< ::physical::PathExpand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Sink_OptTag* Arena::CreateMaybeMessage< ::physical::Sink_OptTag >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Sink_OptTag >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Sink* Arena::CreateMaybeMessage< ::physical::Sink >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Sink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Repartition_Shuffle* Arena::CreateMaybeMessage< ::physical::Repartition_Shuffle >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Repartition_Shuffle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Repartition_Broadcast* Arena::CreateMaybeMessage< ::physical::Repartition_Broadcast >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Repartition_Broadcast >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Repartition* Arena::CreateMaybeMessage< ::physical::Repartition >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Repartition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::Root* Arena::CreateMaybeMessage< ::physical::Root >(Arena* arena) {
  return Arena::CreateInternal< ::physical::Root >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::PhysicalOpr_Operator* Arena::CreateMaybeMessage< ::physical::PhysicalOpr_Operator >(Arena* arena) {
  return Arena::CreateInternal< ::physical::PhysicalOpr_Operator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::PhysicalOpr_MetaData* Arena::CreateMaybeMessage< ::physical::PhysicalOpr_MetaData >(Arena* arena) {
  return Arena::CreateInternal< ::physical::PhysicalOpr_MetaData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::PhysicalOpr* Arena::CreateMaybeMessage< ::physical::PhysicalOpr >(Arena* arena) {
  return Arena::CreateInternal< ::physical::PhysicalOpr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::physical::PhysicalPlan* Arena::CreateMaybeMessage< ::physical::PhysicalPlan >(Arena* arena) {
  return Arena::CreateInternal< ::physical::PhysicalPlan >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
