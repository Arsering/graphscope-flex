// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef PROTOBUF_INCLUDED_schema_2eproto
#define PROTOBUF_INCLUDED_schema_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto 

namespace protobuf_schema_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_schema_2eproto
namespace schema {
class ColumnMeta;
class ColumnMetaDefaultTypeInternal;
extern ColumnMetaDefaultTypeInternal _ColumnMeta_default_instance_;
class EntityMeta;
class EntityMetaDefaultTypeInternal;
extern EntityMetaDefaultTypeInternal _EntityMeta_default_instance_;
class LabelMeta;
class LabelMetaDefaultTypeInternal;
extern LabelMetaDefaultTypeInternal _LabelMeta_default_instance_;
class RelationMeta;
class RelationMetaDefaultTypeInternal;
extern RelationMetaDefaultTypeInternal _RelationMeta_default_instance_;
class RelationMeta_LabelPair;
class RelationMeta_LabelPairDefaultTypeInternal;
extern RelationMeta_LabelPairDefaultTypeInternal _RelationMeta_LabelPair_default_instance_;
class Schema;
class SchemaDefaultTypeInternal;
extern SchemaDefaultTypeInternal _Schema_default_instance_;
}  // namespace schema
namespace google {
namespace protobuf {
template<> ::schema::ColumnMeta* Arena::CreateMaybeMessage<::schema::ColumnMeta>(Arena*);
template<> ::schema::EntityMeta* Arena::CreateMaybeMessage<::schema::EntityMeta>(Arena*);
template<> ::schema::LabelMeta* Arena::CreateMaybeMessage<::schema::LabelMeta>(Arena*);
template<> ::schema::RelationMeta* Arena::CreateMaybeMessage<::schema::RelationMeta>(Arena*);
template<> ::schema::RelationMeta_LabelPair* Arena::CreateMaybeMessage<::schema::RelationMeta_LabelPair>(Arena*);
template<> ::schema::Schema* Arena::CreateMaybeMessage<::schema::Schema>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace schema {

// ===================================================================

class LabelMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.LabelMeta) */ {
 public:
  LabelMeta();
  virtual ~LabelMeta();

  LabelMeta(const LabelMeta& from);

  inline LabelMeta& operator=(const LabelMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelMeta(LabelMeta&& from) noexcept
    : LabelMeta() {
    *this = ::std::move(from);
  }

  inline LabelMeta& operator=(LabelMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelMeta* internal_default_instance() {
    return reinterpret_cast<const LabelMeta*>(
               &_LabelMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LabelMeta* other);
  friend void swap(LabelMeta& a, LabelMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelMeta* New() const final {
    return CreateMaybeMessage<LabelMeta>(NULL);
  }

  LabelMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabelMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabelMeta& from);
  void MergeFrom(const LabelMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:schema.LabelMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ColumnMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.ColumnMeta) */ {
 public:
  ColumnMeta();
  virtual ~ColumnMeta();

  ColumnMeta(const ColumnMeta& from);

  inline ColumnMeta& operator=(const ColumnMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColumnMeta(ColumnMeta&& from) noexcept
    : ColumnMeta() {
    *this = ::std::move(from);
  }

  inline ColumnMeta& operator=(ColumnMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnMeta* internal_default_instance() {
    return reinterpret_cast<const ColumnMeta*>(
               &_ColumnMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ColumnMeta* other);
  friend void swap(ColumnMeta& a, ColumnMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColumnMeta* New() const final {
    return CreateMaybeMessage<ColumnMeta>(NULL);
  }

  ColumnMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ColumnMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ColumnMeta& from);
  void MergeFrom(const ColumnMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .schema.LabelMeta key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  private:
  const ::schema::LabelMeta& _internal_key() const;
  public:
  const ::schema::LabelMeta& key() const;
  ::schema::LabelMeta* release_key();
  ::schema::LabelMeta* mutable_key();
  void set_allocated_key(::schema::LabelMeta* key);

  // .common.DataType data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::common::DataType data_type() const;
  void set_data_type(::common::DataType value);

  // bool is_primary_key = 3;
  void clear_is_primary_key();
  static const int kIsPrimaryKeyFieldNumber = 3;
  bool is_primary_key() const;
  void set_is_primary_key(bool value);

  // @@protoc_insertion_point(class_scope:schema.ColumnMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::schema::LabelMeta* key_;
  int data_type_;
  bool is_primary_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.EntityMeta) */ {
 public:
  EntityMeta();
  virtual ~EntityMeta();

  EntityMeta(const EntityMeta& from);

  inline EntityMeta& operator=(const EntityMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityMeta(EntityMeta&& from) noexcept
    : EntityMeta() {
    *this = ::std::move(from);
  }

  inline EntityMeta& operator=(EntityMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityMeta* internal_default_instance() {
    return reinterpret_cast<const EntityMeta*>(
               &_EntityMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EntityMeta* other);
  friend void swap(EntityMeta& a, EntityMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityMeta* New() const final {
    return CreateMaybeMessage<EntityMeta>(NULL);
  }

  EntityMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityMeta& from);
  void MergeFrom(const EntityMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .schema.ColumnMeta columns = 2;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 2;
  ::schema::ColumnMeta* mutable_columns(int index);
  ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >*
      mutable_columns();
  const ::schema::ColumnMeta& columns(int index) const;
  ::schema::ColumnMeta* add_columns();
  const ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >&
      columns() const;

  // .schema.LabelMeta label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  private:
  const ::schema::LabelMeta& _internal_label() const;
  public:
  const ::schema::LabelMeta& label() const;
  ::schema::LabelMeta* release_label();
  ::schema::LabelMeta* mutable_label();
  void set_allocated_label(::schema::LabelMeta* label);

  // @@protoc_insertion_point(class_scope:schema.EntityMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta > columns_;
  ::schema::LabelMeta* label_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelationMeta_LabelPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.RelationMeta.LabelPair) */ {
 public:
  RelationMeta_LabelPair();
  virtual ~RelationMeta_LabelPair();

  RelationMeta_LabelPair(const RelationMeta_LabelPair& from);

  inline RelationMeta_LabelPair& operator=(const RelationMeta_LabelPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelationMeta_LabelPair(RelationMeta_LabelPair&& from) noexcept
    : RelationMeta_LabelPair() {
    *this = ::std::move(from);
  }

  inline RelationMeta_LabelPair& operator=(RelationMeta_LabelPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationMeta_LabelPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationMeta_LabelPair* internal_default_instance() {
    return reinterpret_cast<const RelationMeta_LabelPair*>(
               &_RelationMeta_LabelPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RelationMeta_LabelPair* other);
  friend void swap(RelationMeta_LabelPair& a, RelationMeta_LabelPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelationMeta_LabelPair* New() const final {
    return CreateMaybeMessage<RelationMeta_LabelPair>(NULL);
  }

  RelationMeta_LabelPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelationMeta_LabelPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelationMeta_LabelPair& from);
  void MergeFrom(const RelationMeta_LabelPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelationMeta_LabelPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .schema.LabelMeta src = 1;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  private:
  const ::schema::LabelMeta& _internal_src() const;
  public:
  const ::schema::LabelMeta& src() const;
  ::schema::LabelMeta* release_src();
  ::schema::LabelMeta* mutable_src();
  void set_allocated_src(::schema::LabelMeta* src);

  // .schema.LabelMeta dst = 2;
  bool has_dst() const;
  void clear_dst();
  static const int kDstFieldNumber = 2;
  private:
  const ::schema::LabelMeta& _internal_dst() const;
  public:
  const ::schema::LabelMeta& dst() const;
  ::schema::LabelMeta* release_dst();
  ::schema::LabelMeta* mutable_dst();
  void set_allocated_dst(::schema::LabelMeta* dst);

  // @@protoc_insertion_point(class_scope:schema.RelationMeta.LabelPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::schema::LabelMeta* src_;
  ::schema::LabelMeta* dst_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelationMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.RelationMeta) */ {
 public:
  RelationMeta();
  virtual ~RelationMeta();

  RelationMeta(const RelationMeta& from);

  inline RelationMeta& operator=(const RelationMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelationMeta(RelationMeta&& from) noexcept
    : RelationMeta() {
    *this = ::std::move(from);
  }

  inline RelationMeta& operator=(RelationMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationMeta* internal_default_instance() {
    return reinterpret_cast<const RelationMeta*>(
               &_RelationMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RelationMeta* other);
  friend void swap(RelationMeta& a, RelationMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelationMeta* New() const final {
    return CreateMaybeMessage<RelationMeta>(NULL);
  }

  RelationMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelationMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelationMeta& from);
  void MergeFrom(const RelationMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelationMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelationMeta_LabelPair LabelPair;

  // accessors -------------------------------------------------------

  // repeated .schema.RelationMeta.LabelPair entity_pairs = 2;
  int entity_pairs_size() const;
  void clear_entity_pairs();
  static const int kEntityPairsFieldNumber = 2;
  ::schema::RelationMeta_LabelPair* mutable_entity_pairs(int index);
  ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta_LabelPair >*
      mutable_entity_pairs();
  const ::schema::RelationMeta_LabelPair& entity_pairs(int index) const;
  ::schema::RelationMeta_LabelPair* add_entity_pairs();
  const ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta_LabelPair >&
      entity_pairs() const;

  // repeated .schema.ColumnMeta columns = 3;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 3;
  ::schema::ColumnMeta* mutable_columns(int index);
  ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >*
      mutable_columns();
  const ::schema::ColumnMeta& columns(int index) const;
  ::schema::ColumnMeta* add_columns();
  const ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >&
      columns() const;

  // .schema.LabelMeta label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  private:
  const ::schema::LabelMeta& _internal_label() const;
  public:
  const ::schema::LabelMeta& label() const;
  ::schema::LabelMeta* release_label();
  ::schema::LabelMeta* mutable_label();
  void set_allocated_label(::schema::LabelMeta* label);

  // @@protoc_insertion_point(class_scope:schema.RelationMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta_LabelPair > entity_pairs_;
  ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta > columns_;
  ::schema::LabelMeta* label_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Schema : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.Schema) */ {
 public:
  Schema();
  virtual ~Schema();

  Schema(const Schema& from);

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Schema(Schema&& from) noexcept
    : Schema() {
    *this = ::std::move(from);
  }

  inline Schema& operator=(Schema&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Schema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schema* internal_default_instance() {
    return reinterpret_cast<const Schema*>(
               &_Schema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Schema* other);
  friend void swap(Schema& a, Schema& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Schema* New() const final {
    return CreateMaybeMessage<Schema>(NULL);
  }

  Schema* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Schema>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schema* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .schema.EntityMeta entities = 1;
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 1;
  ::schema::EntityMeta* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField< ::schema::EntityMeta >*
      mutable_entities();
  const ::schema::EntityMeta& entities(int index) const;
  ::schema::EntityMeta* add_entities();
  const ::google::protobuf::RepeatedPtrField< ::schema::EntityMeta >&
      entities() const;

  // repeated .schema.RelationMeta relations = 2;
  int relations_size() const;
  void clear_relations();
  static const int kRelationsFieldNumber = 2;
  ::schema::RelationMeta* mutable_relations(int index);
  ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta >*
      mutable_relations();
  const ::schema::RelationMeta& relations(int index) const;
  ::schema::RelationMeta* add_relations();
  const ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta >&
      relations() const;

  // bool is_table_id = 3;
  void clear_is_table_id();
  static const int kIsTableIdFieldNumber = 3;
  bool is_table_id() const;
  void set_is_table_id(bool value);

  // bool is_column_id = 4;
  void clear_is_column_id();
  static const int kIsColumnIdFieldNumber = 4;
  bool is_column_id() const;
  void set_is_column_id(bool value);

  // @@protoc_insertion_point(class_scope:schema.Schema)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::schema::EntityMeta > entities_;
  ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta > relations_;
  bool is_table_id_;
  bool is_column_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LabelMeta

// int32 id = 1;
inline void LabelMeta::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LabelMeta::id() const {
  // @@protoc_insertion_point(field_get:schema.LabelMeta.id)
  return id_;
}
inline void LabelMeta::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:schema.LabelMeta.id)
}

// string name = 2;
inline void LabelMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabelMeta::name() const {
  // @@protoc_insertion_point(field_get:schema.LabelMeta.name)
  return name_.GetNoArena();
}
inline void LabelMeta::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schema.LabelMeta.name)
}
#if LANG_CXX11
inline void LabelMeta::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schema.LabelMeta.name)
}
#endif
inline void LabelMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.LabelMeta.name)
}
inline void LabelMeta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.LabelMeta.name)
}
inline ::std::string* LabelMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:schema.LabelMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMeta::release_name() {
  // @@protoc_insertion_point(field_release:schema.LabelMeta.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:schema.LabelMeta.name)
}

// -------------------------------------------------------------------

// ColumnMeta

// .schema.LabelMeta key = 1;
inline bool ColumnMeta::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void ColumnMeta::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
inline const ::schema::LabelMeta& ColumnMeta::_internal_key() const {
  return *key_;
}
inline const ::schema::LabelMeta& ColumnMeta::key() const {
  const ::schema::LabelMeta* p = key_;
  // @@protoc_insertion_point(field_get:schema.ColumnMeta.key)
  return p != NULL ? *p : *reinterpret_cast<const ::schema::LabelMeta*>(
      &::schema::_LabelMeta_default_instance_);
}
inline ::schema::LabelMeta* ColumnMeta::release_key() {
  // @@protoc_insertion_point(field_release:schema.ColumnMeta.key)
  
  ::schema::LabelMeta* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::schema::LabelMeta* ColumnMeta::mutable_key() {
  
  if (key_ == NULL) {
    auto* p = CreateMaybeMessage<::schema::LabelMeta>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:schema.ColumnMeta.key)
  return key_;
}
inline void ColumnMeta::set_allocated_key(::schema::LabelMeta* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:schema.ColumnMeta.key)
}

// .common.DataType data_type = 2;
inline void ColumnMeta::clear_data_type() {
  data_type_ = 0;
}
inline ::common::DataType ColumnMeta::data_type() const {
  // @@protoc_insertion_point(field_get:schema.ColumnMeta.data_type)
  return static_cast< ::common::DataType >(data_type_);
}
inline void ColumnMeta::set_data_type(::common::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:schema.ColumnMeta.data_type)
}

// bool is_primary_key = 3;
inline void ColumnMeta::clear_is_primary_key() {
  is_primary_key_ = false;
}
inline bool ColumnMeta::is_primary_key() const {
  // @@protoc_insertion_point(field_get:schema.ColumnMeta.is_primary_key)
  return is_primary_key_;
}
inline void ColumnMeta::set_is_primary_key(bool value) {
  
  is_primary_key_ = value;
  // @@protoc_insertion_point(field_set:schema.ColumnMeta.is_primary_key)
}

// -------------------------------------------------------------------

// EntityMeta

// .schema.LabelMeta label = 1;
inline bool EntityMeta::has_label() const {
  return this != internal_default_instance() && label_ != NULL;
}
inline void EntityMeta::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
}
inline const ::schema::LabelMeta& EntityMeta::_internal_label() const {
  return *label_;
}
inline const ::schema::LabelMeta& EntityMeta::label() const {
  const ::schema::LabelMeta* p = label_;
  // @@protoc_insertion_point(field_get:schema.EntityMeta.label)
  return p != NULL ? *p : *reinterpret_cast<const ::schema::LabelMeta*>(
      &::schema::_LabelMeta_default_instance_);
}
inline ::schema::LabelMeta* EntityMeta::release_label() {
  // @@protoc_insertion_point(field_release:schema.EntityMeta.label)
  
  ::schema::LabelMeta* temp = label_;
  label_ = NULL;
  return temp;
}
inline ::schema::LabelMeta* EntityMeta::mutable_label() {
  
  if (label_ == NULL) {
    auto* p = CreateMaybeMessage<::schema::LabelMeta>(GetArenaNoVirtual());
    label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:schema.EntityMeta.label)
  return label_;
}
inline void EntityMeta::set_allocated_label(::schema::LabelMeta* label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_;
  }
  if (label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:schema.EntityMeta.label)
}

// repeated .schema.ColumnMeta columns = 2;
inline int EntityMeta::columns_size() const {
  return columns_.size();
}
inline void EntityMeta::clear_columns() {
  columns_.Clear();
}
inline ::schema::ColumnMeta* EntityMeta::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:schema.EntityMeta.columns)
  return columns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >*
EntityMeta::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:schema.EntityMeta.columns)
  return &columns_;
}
inline const ::schema::ColumnMeta& EntityMeta::columns(int index) const {
  // @@protoc_insertion_point(field_get:schema.EntityMeta.columns)
  return columns_.Get(index);
}
inline ::schema::ColumnMeta* EntityMeta::add_columns() {
  // @@protoc_insertion_point(field_add:schema.EntityMeta.columns)
  return columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >&
EntityMeta::columns() const {
  // @@protoc_insertion_point(field_list:schema.EntityMeta.columns)
  return columns_;
}

// -------------------------------------------------------------------

// RelationMeta_LabelPair

// .schema.LabelMeta src = 1;
inline bool RelationMeta_LabelPair::has_src() const {
  return this != internal_default_instance() && src_ != NULL;
}
inline void RelationMeta_LabelPair::clear_src() {
  if (GetArenaNoVirtual() == NULL && src_ != NULL) {
    delete src_;
  }
  src_ = NULL;
}
inline const ::schema::LabelMeta& RelationMeta_LabelPair::_internal_src() const {
  return *src_;
}
inline const ::schema::LabelMeta& RelationMeta_LabelPair::src() const {
  const ::schema::LabelMeta* p = src_;
  // @@protoc_insertion_point(field_get:schema.RelationMeta.LabelPair.src)
  return p != NULL ? *p : *reinterpret_cast<const ::schema::LabelMeta*>(
      &::schema::_LabelMeta_default_instance_);
}
inline ::schema::LabelMeta* RelationMeta_LabelPair::release_src() {
  // @@protoc_insertion_point(field_release:schema.RelationMeta.LabelPair.src)
  
  ::schema::LabelMeta* temp = src_;
  src_ = NULL;
  return temp;
}
inline ::schema::LabelMeta* RelationMeta_LabelPair::mutable_src() {
  
  if (src_ == NULL) {
    auto* p = CreateMaybeMessage<::schema::LabelMeta>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:schema.RelationMeta.LabelPair.src)
  return src_;
}
inline void RelationMeta_LabelPair::set_allocated_src(::schema::LabelMeta* src) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_;
  }
  if (src) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    
  } else {
    
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:schema.RelationMeta.LabelPair.src)
}

// .schema.LabelMeta dst = 2;
inline bool RelationMeta_LabelPair::has_dst() const {
  return this != internal_default_instance() && dst_ != NULL;
}
inline void RelationMeta_LabelPair::clear_dst() {
  if (GetArenaNoVirtual() == NULL && dst_ != NULL) {
    delete dst_;
  }
  dst_ = NULL;
}
inline const ::schema::LabelMeta& RelationMeta_LabelPair::_internal_dst() const {
  return *dst_;
}
inline const ::schema::LabelMeta& RelationMeta_LabelPair::dst() const {
  const ::schema::LabelMeta* p = dst_;
  // @@protoc_insertion_point(field_get:schema.RelationMeta.LabelPair.dst)
  return p != NULL ? *p : *reinterpret_cast<const ::schema::LabelMeta*>(
      &::schema::_LabelMeta_default_instance_);
}
inline ::schema::LabelMeta* RelationMeta_LabelPair::release_dst() {
  // @@protoc_insertion_point(field_release:schema.RelationMeta.LabelPair.dst)
  
  ::schema::LabelMeta* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline ::schema::LabelMeta* RelationMeta_LabelPair::mutable_dst() {
  
  if (dst_ == NULL) {
    auto* p = CreateMaybeMessage<::schema::LabelMeta>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:schema.RelationMeta.LabelPair.dst)
  return dst_;
}
inline void RelationMeta_LabelPair::set_allocated_dst(::schema::LabelMeta* dst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dst_;
  }
  if (dst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    
  } else {
    
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:schema.RelationMeta.LabelPair.dst)
}

// -------------------------------------------------------------------

// RelationMeta

// .schema.LabelMeta label = 1;
inline bool RelationMeta::has_label() const {
  return this != internal_default_instance() && label_ != NULL;
}
inline void RelationMeta::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
}
inline const ::schema::LabelMeta& RelationMeta::_internal_label() const {
  return *label_;
}
inline const ::schema::LabelMeta& RelationMeta::label() const {
  const ::schema::LabelMeta* p = label_;
  // @@protoc_insertion_point(field_get:schema.RelationMeta.label)
  return p != NULL ? *p : *reinterpret_cast<const ::schema::LabelMeta*>(
      &::schema::_LabelMeta_default_instance_);
}
inline ::schema::LabelMeta* RelationMeta::release_label() {
  // @@protoc_insertion_point(field_release:schema.RelationMeta.label)
  
  ::schema::LabelMeta* temp = label_;
  label_ = NULL;
  return temp;
}
inline ::schema::LabelMeta* RelationMeta::mutable_label() {
  
  if (label_ == NULL) {
    auto* p = CreateMaybeMessage<::schema::LabelMeta>(GetArenaNoVirtual());
    label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:schema.RelationMeta.label)
  return label_;
}
inline void RelationMeta::set_allocated_label(::schema::LabelMeta* label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_;
  }
  if (label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:schema.RelationMeta.label)
}

// repeated .schema.RelationMeta.LabelPair entity_pairs = 2;
inline int RelationMeta::entity_pairs_size() const {
  return entity_pairs_.size();
}
inline void RelationMeta::clear_entity_pairs() {
  entity_pairs_.Clear();
}
inline ::schema::RelationMeta_LabelPair* RelationMeta::mutable_entity_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:schema.RelationMeta.entity_pairs)
  return entity_pairs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta_LabelPair >*
RelationMeta::mutable_entity_pairs() {
  // @@protoc_insertion_point(field_mutable_list:schema.RelationMeta.entity_pairs)
  return &entity_pairs_;
}
inline const ::schema::RelationMeta_LabelPair& RelationMeta::entity_pairs(int index) const {
  // @@protoc_insertion_point(field_get:schema.RelationMeta.entity_pairs)
  return entity_pairs_.Get(index);
}
inline ::schema::RelationMeta_LabelPair* RelationMeta::add_entity_pairs() {
  // @@protoc_insertion_point(field_add:schema.RelationMeta.entity_pairs)
  return entity_pairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta_LabelPair >&
RelationMeta::entity_pairs() const {
  // @@protoc_insertion_point(field_list:schema.RelationMeta.entity_pairs)
  return entity_pairs_;
}

// repeated .schema.ColumnMeta columns = 3;
inline int RelationMeta::columns_size() const {
  return columns_.size();
}
inline void RelationMeta::clear_columns() {
  columns_.Clear();
}
inline ::schema::ColumnMeta* RelationMeta::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:schema.RelationMeta.columns)
  return columns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >*
RelationMeta::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:schema.RelationMeta.columns)
  return &columns_;
}
inline const ::schema::ColumnMeta& RelationMeta::columns(int index) const {
  // @@protoc_insertion_point(field_get:schema.RelationMeta.columns)
  return columns_.Get(index);
}
inline ::schema::ColumnMeta* RelationMeta::add_columns() {
  // @@protoc_insertion_point(field_add:schema.RelationMeta.columns)
  return columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::schema::ColumnMeta >&
RelationMeta::columns() const {
  // @@protoc_insertion_point(field_list:schema.RelationMeta.columns)
  return columns_;
}

// -------------------------------------------------------------------

// Schema

// repeated .schema.EntityMeta entities = 1;
inline int Schema::entities_size() const {
  return entities_.size();
}
inline void Schema::clear_entities() {
  entities_.Clear();
}
inline ::schema::EntityMeta* Schema::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:schema.Schema.entities)
  return entities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::schema::EntityMeta >*
Schema::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:schema.Schema.entities)
  return &entities_;
}
inline const ::schema::EntityMeta& Schema::entities(int index) const {
  // @@protoc_insertion_point(field_get:schema.Schema.entities)
  return entities_.Get(index);
}
inline ::schema::EntityMeta* Schema::add_entities() {
  // @@protoc_insertion_point(field_add:schema.Schema.entities)
  return entities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::schema::EntityMeta >&
Schema::entities() const {
  // @@protoc_insertion_point(field_list:schema.Schema.entities)
  return entities_;
}

// repeated .schema.RelationMeta relations = 2;
inline int Schema::relations_size() const {
  return relations_.size();
}
inline void Schema::clear_relations() {
  relations_.Clear();
}
inline ::schema::RelationMeta* Schema::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:schema.Schema.relations)
  return relations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta >*
Schema::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:schema.Schema.relations)
  return &relations_;
}
inline const ::schema::RelationMeta& Schema::relations(int index) const {
  // @@protoc_insertion_point(field_get:schema.Schema.relations)
  return relations_.Get(index);
}
inline ::schema::RelationMeta* Schema::add_relations() {
  // @@protoc_insertion_point(field_add:schema.Schema.relations)
  return relations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::schema::RelationMeta >&
Schema::relations() const {
  // @@protoc_insertion_point(field_list:schema.Schema.relations)
  return relations_;
}

// bool is_table_id = 3;
inline void Schema::clear_is_table_id() {
  is_table_id_ = false;
}
inline bool Schema::is_table_id() const {
  // @@protoc_insertion_point(field_get:schema.Schema.is_table_id)
  return is_table_id_;
}
inline void Schema::set_is_table_id(bool value) {
  
  is_table_id_ = value;
  // @@protoc_insertion_point(field_set:schema.Schema.is_table_id)
}

// bool is_column_id = 4;
inline void Schema::clear_is_column_id() {
  is_column_id_ = false;
}
inline bool Schema::is_column_id() const {
  // @@protoc_insertion_point(field_get:schema.Schema.is_column_id)
  return is_column_id_;
}
inline void Schema::set_is_column_id(bool value) {
  
  is_column_id_ = value;
  // @@protoc_insertion_point(field_set:schema.Schema.is_column_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace schema

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_schema_2eproto
