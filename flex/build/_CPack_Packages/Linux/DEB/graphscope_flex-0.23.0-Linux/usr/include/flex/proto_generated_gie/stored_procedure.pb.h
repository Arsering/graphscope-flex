// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stored_procedure.proto

#ifndef PROTOBUF_INCLUDED_stored_5fprocedure_2eproto
#define PROTOBUF_INCLUDED_stored_5fprocedure_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stored_5fprocedure_2eproto 

namespace protobuf_stored_5fprocedure_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_stored_5fprocedure_2eproto
namespace query {
class Argument;
class ArgumentDefaultTypeInternal;
extern ArgumentDefaultTypeInternal _Argument_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace query
namespace google {
namespace protobuf {
template<> ::query::Argument* Arena::CreateMaybeMessage<::query::Argument>(Arena*);
template<> ::query::Query* Arena::CreateMaybeMessage<::query::Query>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace query {

// ===================================================================

class Argument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Argument) */ {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Argument(Argument&& from) noexcept
    : Argument() {
    *this = ::std::move(from);
  }

  inline Argument& operator=(Argument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Argument* internal_default_instance() {
    return reinterpret_cast<const Argument*>(
               &_Argument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Argument* other);
  friend void swap(Argument& a, Argument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Argument* New() const final {
    return CreateMaybeMessage<Argument>(NULL);
  }

  Argument* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Argument>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Argument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string param_name = 1;
  void clear_param_name();
  static const int kParamNameFieldNumber = 1;
  const ::std::string& param_name() const;
  void set_param_name(const ::std::string& value);
  #if LANG_CXX11
  void set_param_name(::std::string&& value);
  #endif
  void set_param_name(const char* value);
  void set_param_name(const char* value, size_t size);
  ::std::string* mutable_param_name();
  ::std::string* release_param_name();
  void set_allocated_param_name(::std::string* param_name);

  // .common.Value value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::common::Value& _internal_value() const;
  public:
  const ::common::Value& value() const;
  ::common::Value* release_value();
  ::common::Value* mutable_value();
  void set_allocated_value(::common::Value* value);

  // int32 param_ind = 2;
  void clear_param_ind();
  static const int kParamIndFieldNumber = 2;
  ::google::protobuf::int32 param_ind() const;
  void set_param_ind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:query.Argument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr param_name_;
  ::common::Value* value_;
  ::google::protobuf::int32 param_ind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stored_5fprocedure_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:query.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(NULL);
  }

  Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .query.Argument arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  ::query::Argument* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::query::Argument >*
      mutable_arguments();
  const ::query::Argument& arguments(int index) const;
  ::query::Argument* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::query::Argument >&
      arguments() const;

  // .common.NameOrId query_name = 1;
  bool has_query_name() const;
  void clear_query_name();
  static const int kQueryNameFieldNumber = 1;
  private:
  const ::common::NameOrId& _internal_query_name() const;
  public:
  const ::common::NameOrId& query_name() const;
  ::common::NameOrId* release_query_name();
  ::common::NameOrId* mutable_query_name();
  void set_allocated_query_name(::common::NameOrId* query_name);

  // @@protoc_insertion_point(class_scope:query.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::query::Argument > arguments_;
  ::common::NameOrId* query_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stored_5fprocedure_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Argument

// string param_name = 1;
inline void Argument::clear_param_name() {
  param_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Argument::param_name() const {
  // @@protoc_insertion_point(field_get:query.Argument.param_name)
  return param_name_.GetNoArena();
}
inline void Argument::set_param_name(const ::std::string& value) {
  
  param_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query.Argument.param_name)
}
#if LANG_CXX11
inline void Argument::set_param_name(::std::string&& value) {
  
  param_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query.Argument.param_name)
}
#endif
inline void Argument::set_param_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  param_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query.Argument.param_name)
}
inline void Argument::set_param_name(const char* value, size_t size) {
  
  param_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query.Argument.param_name)
}
inline ::std::string* Argument::mutable_param_name() {
  
  // @@protoc_insertion_point(field_mutable:query.Argument.param_name)
  return param_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_param_name() {
  // @@protoc_insertion_point(field_release:query.Argument.param_name)
  
  return param_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_param_name(::std::string* param_name) {
  if (param_name != NULL) {
    
  } else {
    
  }
  param_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_name);
  // @@protoc_insertion_point(field_set_allocated:query.Argument.param_name)
}

// int32 param_ind = 2;
inline void Argument::clear_param_ind() {
  param_ind_ = 0;
}
inline ::google::protobuf::int32 Argument::param_ind() const {
  // @@protoc_insertion_point(field_get:query.Argument.param_ind)
  return param_ind_;
}
inline void Argument::set_param_ind(::google::protobuf::int32 value) {
  
  param_ind_ = value;
  // @@protoc_insertion_point(field_set:query.Argument.param_ind)
}

// .common.Value value = 3;
inline bool Argument::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::common::Value& Argument::_internal_value() const {
  return *value_;
}
inline const ::common::Value& Argument::value() const {
  const ::common::Value* p = value_;
  // @@protoc_insertion_point(field_get:query.Argument.value)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Value*>(
      &::common::_Value_default_instance_);
}
inline ::common::Value* Argument::release_value() {
  // @@protoc_insertion_point(field_release:query.Argument.value)
  
  ::common::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::common::Value* Argument::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:query.Argument.value)
  return value_;
}
inline void Argument::set_allocated_value(::common::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:query.Argument.value)
}

// -------------------------------------------------------------------

// Query

// .common.NameOrId query_name = 1;
inline bool Query::has_query_name() const {
  return this != internal_default_instance() && query_name_ != NULL;
}
inline const ::common::NameOrId& Query::_internal_query_name() const {
  return *query_name_;
}
inline const ::common::NameOrId& Query::query_name() const {
  const ::common::NameOrId* p = query_name_;
  // @@protoc_insertion_point(field_get:query.Query.query_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::NameOrId*>(
      &::common::_NameOrId_default_instance_);
}
inline ::common::NameOrId* Query::release_query_name() {
  // @@protoc_insertion_point(field_release:query.Query.query_name)
  
  ::common::NameOrId* temp = query_name_;
  query_name_ = NULL;
  return temp;
}
inline ::common::NameOrId* Query::mutable_query_name() {
  
  if (query_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::NameOrId>(GetArenaNoVirtual());
    query_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:query.Query.query_name)
  return query_name_;
}
inline void Query::set_allocated_query_name(::common::NameOrId* query_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_name_);
  }
  if (query_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_name, submessage_arena);
    }
    
  } else {
    
  }
  query_name_ = query_name;
  // @@protoc_insertion_point(field_set_allocated:query.Query.query_name)
}

// repeated .query.Argument arguments = 2;
inline int Query::arguments_size() const {
  return arguments_.size();
}
inline void Query::clear_arguments() {
  arguments_.Clear();
}
inline ::query::Argument* Query::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:query.Query.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::query::Argument >*
Query::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:query.Query.arguments)
  return &arguments_;
}
inline const ::query::Argument& Query::arguments(int index) const {
  // @@protoc_insertion_point(field_get:query.Query.arguments)
  return arguments_.Get(index);
}
inline ::query::Argument* Query::add_arguments() {
  // @@protoc_insertion_point(field_add:query.Query.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::query::Argument >&
Query::arguments() const {
  // @@protoc_insertion_point(field_list:query.Query.arguments)
  return arguments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace query

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stored_5fprocedure_2eproto
