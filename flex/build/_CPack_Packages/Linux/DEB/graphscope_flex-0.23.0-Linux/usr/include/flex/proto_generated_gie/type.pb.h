// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#ifndef PROTOBUF_INCLUDED_type_2eproto
#define PROTOBUF_INCLUDED_type_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_type_2eproto 

namespace protobuf_type_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_type_2eproto
namespace common {
class GraphDataType;
class GraphDataTypeDefaultTypeInternal;
extern GraphDataTypeDefaultTypeInternal _GraphDataType_default_instance_;
class GraphDataType_GraphElementLabel;
class GraphDataType_GraphElementLabelDefaultTypeInternal;
extern GraphDataType_GraphElementLabelDefaultTypeInternal _GraphDataType_GraphElementLabel_default_instance_;
class GraphDataType_GraphElementType;
class GraphDataType_GraphElementTypeDefaultTypeInternal;
extern GraphDataType_GraphElementTypeDefaultTypeInternal _GraphDataType_GraphElementType_default_instance_;
class GraphDataType_GraphElementTypeField;
class GraphDataType_GraphElementTypeFieldDefaultTypeInternal;
extern GraphDataType_GraphElementTypeFieldDefaultTypeInternal _GraphDataType_GraphElementTypeField_default_instance_;
class IrDataType;
class IrDataTypeDefaultTypeInternal;
extern IrDataTypeDefaultTypeInternal _IrDataType_default_instance_;
}  // namespace common
namespace google {
namespace protobuf {
template<> ::common::GraphDataType* Arena::CreateMaybeMessage<::common::GraphDataType>(Arena*);
template<> ::common::GraphDataType_GraphElementLabel* Arena::CreateMaybeMessage<::common::GraphDataType_GraphElementLabel>(Arena*);
template<> ::common::GraphDataType_GraphElementType* Arena::CreateMaybeMessage<::common::GraphDataType_GraphElementType>(Arena*);
template<> ::common::GraphDataType_GraphElementTypeField* Arena::CreateMaybeMessage<::common::GraphDataType_GraphElementTypeField>(Arena*);
template<> ::common::IrDataType* Arena::CreateMaybeMessage<::common::IrDataType>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace common {

enum GraphDataType_GraphElementOpt {
  GraphDataType_GraphElementOpt_VERTEX = 0,
  GraphDataType_GraphElementOpt_EDGE = 1,
  GraphDataType_GraphElementOpt_GraphDataType_GraphElementOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GraphDataType_GraphElementOpt_GraphDataType_GraphElementOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GraphDataType_GraphElementOpt_IsValid(int value);
const GraphDataType_GraphElementOpt GraphDataType_GraphElementOpt_GraphElementOpt_MIN = GraphDataType_GraphElementOpt_VERTEX;
const GraphDataType_GraphElementOpt GraphDataType_GraphElementOpt_GraphElementOpt_MAX = GraphDataType_GraphElementOpt_EDGE;
const int GraphDataType_GraphElementOpt_GraphElementOpt_ARRAYSIZE = GraphDataType_GraphElementOpt_GraphElementOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* GraphDataType_GraphElementOpt_descriptor();
inline const ::std::string& GraphDataType_GraphElementOpt_Name(GraphDataType_GraphElementOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    GraphDataType_GraphElementOpt_descriptor(), value);
}
inline bool GraphDataType_GraphElementOpt_Parse(
    const ::std::string& name, GraphDataType_GraphElementOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GraphDataType_GraphElementOpt>(
    GraphDataType_GraphElementOpt_descriptor(), name, value);
}
// ===================================================================

class GraphDataType_GraphElementLabel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.GraphDataType.GraphElementLabel) */ {
 public:
  GraphDataType_GraphElementLabel();
  virtual ~GraphDataType_GraphElementLabel();

  GraphDataType_GraphElementLabel(const GraphDataType_GraphElementLabel& from);

  inline GraphDataType_GraphElementLabel& operator=(const GraphDataType_GraphElementLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphDataType_GraphElementLabel(GraphDataType_GraphElementLabel&& from) noexcept
    : GraphDataType_GraphElementLabel() {
    *this = ::std::move(from);
  }

  inline GraphDataType_GraphElementLabel& operator=(GraphDataType_GraphElementLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphDataType_GraphElementLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDataType_GraphElementLabel* internal_default_instance() {
    return reinterpret_cast<const GraphDataType_GraphElementLabel*>(
               &_GraphDataType_GraphElementLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GraphDataType_GraphElementLabel* other);
  friend void swap(GraphDataType_GraphElementLabel& a, GraphDataType_GraphElementLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphDataType_GraphElementLabel* New() const final {
    return CreateMaybeMessage<GraphDataType_GraphElementLabel>(NULL);
  }

  GraphDataType_GraphElementLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphDataType_GraphElementLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GraphDataType_GraphElementLabel& from);
  void MergeFrom(const GraphDataType_GraphElementLabel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDataType_GraphElementLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Int32Value src_label = 2;
  bool has_src_label() const;
  void clear_src_label();
  static const int kSrcLabelFieldNumber = 2;
  private:
  const ::google::protobuf::Int32Value& _internal_src_label() const;
  public:
  const ::google::protobuf::Int32Value& src_label() const;
  ::google::protobuf::Int32Value* release_src_label();
  ::google::protobuf::Int32Value* mutable_src_label();
  void set_allocated_src_label(::google::protobuf::Int32Value* src_label);

  // .google.protobuf.Int32Value dst_label = 3;
  bool has_dst_label() const;
  void clear_dst_label();
  static const int kDstLabelFieldNumber = 3;
  private:
  const ::google::protobuf::Int32Value& _internal_dst_label() const;
  public:
  const ::google::protobuf::Int32Value& dst_label() const;
  ::google::protobuf::Int32Value* release_dst_label();
  ::google::protobuf::Int32Value* mutable_dst_label();
  void set_allocated_dst_label(::google::protobuf::Int32Value* dst_label);

  // int32 label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:common.GraphDataType.GraphElementLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Int32Value* src_label_;
  ::google::protobuf::Int32Value* dst_label_;
  ::google::protobuf::int32 label_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_type_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphDataType_GraphElementTypeField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.GraphDataType.GraphElementTypeField) */ {
 public:
  GraphDataType_GraphElementTypeField();
  virtual ~GraphDataType_GraphElementTypeField();

  GraphDataType_GraphElementTypeField(const GraphDataType_GraphElementTypeField& from);

  inline GraphDataType_GraphElementTypeField& operator=(const GraphDataType_GraphElementTypeField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphDataType_GraphElementTypeField(GraphDataType_GraphElementTypeField&& from) noexcept
    : GraphDataType_GraphElementTypeField() {
    *this = ::std::move(from);
  }

  inline GraphDataType_GraphElementTypeField& operator=(GraphDataType_GraphElementTypeField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphDataType_GraphElementTypeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDataType_GraphElementTypeField* internal_default_instance() {
    return reinterpret_cast<const GraphDataType_GraphElementTypeField*>(
               &_GraphDataType_GraphElementTypeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GraphDataType_GraphElementTypeField* other);
  friend void swap(GraphDataType_GraphElementTypeField& a, GraphDataType_GraphElementTypeField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphDataType_GraphElementTypeField* New() const final {
    return CreateMaybeMessage<GraphDataType_GraphElementTypeField>(NULL);
  }

  GraphDataType_GraphElementTypeField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphDataType_GraphElementTypeField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GraphDataType_GraphElementTypeField& from);
  void MergeFrom(const GraphDataType_GraphElementTypeField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDataType_GraphElementTypeField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.NameOrId prop_id = 1;
  bool has_prop_id() const;
  void clear_prop_id();
  static const int kPropIdFieldNumber = 1;
  private:
  const ::common::NameOrId& _internal_prop_id() const;
  public:
  const ::common::NameOrId& prop_id() const;
  ::common::NameOrId* release_prop_id();
  ::common::NameOrId* mutable_prop_id();
  void set_allocated_prop_id(::common::NameOrId* prop_id);

  // .common.DataType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::common::DataType type() const;
  void set_type(::common::DataType value);

  // @@protoc_insertion_point(class_scope:common.GraphDataType.GraphElementTypeField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::NameOrId* prop_id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_type_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphDataType_GraphElementType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.GraphDataType.GraphElementType) */ {
 public:
  GraphDataType_GraphElementType();
  virtual ~GraphDataType_GraphElementType();

  GraphDataType_GraphElementType(const GraphDataType_GraphElementType& from);

  inline GraphDataType_GraphElementType& operator=(const GraphDataType_GraphElementType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphDataType_GraphElementType(GraphDataType_GraphElementType&& from) noexcept
    : GraphDataType_GraphElementType() {
    *this = ::std::move(from);
  }

  inline GraphDataType_GraphElementType& operator=(GraphDataType_GraphElementType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphDataType_GraphElementType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDataType_GraphElementType* internal_default_instance() {
    return reinterpret_cast<const GraphDataType_GraphElementType*>(
               &_GraphDataType_GraphElementType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GraphDataType_GraphElementType* other);
  friend void swap(GraphDataType_GraphElementType& a, GraphDataType_GraphElementType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphDataType_GraphElementType* New() const final {
    return CreateMaybeMessage<GraphDataType_GraphElementType>(NULL);
  }

  GraphDataType_GraphElementType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphDataType_GraphElementType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GraphDataType_GraphElementType& from);
  void MergeFrom(const GraphDataType_GraphElementType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDataType_GraphElementType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.GraphDataType.GraphElementTypeField props = 2;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 2;
  ::common::GraphDataType_GraphElementTypeField* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementTypeField >*
      mutable_props();
  const ::common::GraphDataType_GraphElementTypeField& props(int index) const;
  ::common::GraphDataType_GraphElementTypeField* add_props();
  const ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementTypeField >&
      props() const;

  // .common.GraphDataType.GraphElementLabel label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  private:
  const ::common::GraphDataType_GraphElementLabel& _internal_label() const;
  public:
  const ::common::GraphDataType_GraphElementLabel& label() const;
  ::common::GraphDataType_GraphElementLabel* release_label();
  ::common::GraphDataType_GraphElementLabel* mutable_label();
  void set_allocated_label(::common::GraphDataType_GraphElementLabel* label);

  // @@protoc_insertion_point(class_scope:common.GraphDataType.GraphElementType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementTypeField > props_;
  ::common::GraphDataType_GraphElementLabel* label_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_type_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphDataType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.GraphDataType) */ {
 public:
  GraphDataType();
  virtual ~GraphDataType();

  GraphDataType(const GraphDataType& from);

  inline GraphDataType& operator=(const GraphDataType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphDataType(GraphDataType&& from) noexcept
    : GraphDataType() {
    *this = ::std::move(from);
  }

  inline GraphDataType& operator=(GraphDataType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphDataType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDataType* internal_default_instance() {
    return reinterpret_cast<const GraphDataType*>(
               &_GraphDataType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GraphDataType* other);
  friend void swap(GraphDataType& a, GraphDataType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphDataType* New() const final {
    return CreateMaybeMessage<GraphDataType>(NULL);
  }

  GraphDataType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphDataType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GraphDataType& from);
  void MergeFrom(const GraphDataType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GraphDataType_GraphElementLabel GraphElementLabel;
  typedef GraphDataType_GraphElementTypeField GraphElementTypeField;
  typedef GraphDataType_GraphElementType GraphElementType;

  typedef GraphDataType_GraphElementOpt GraphElementOpt;
  static const GraphElementOpt VERTEX =
    GraphDataType_GraphElementOpt_VERTEX;
  static const GraphElementOpt EDGE =
    GraphDataType_GraphElementOpt_EDGE;
  static inline bool GraphElementOpt_IsValid(int value) {
    return GraphDataType_GraphElementOpt_IsValid(value);
  }
  static const GraphElementOpt GraphElementOpt_MIN =
    GraphDataType_GraphElementOpt_GraphElementOpt_MIN;
  static const GraphElementOpt GraphElementOpt_MAX =
    GraphDataType_GraphElementOpt_GraphElementOpt_MAX;
  static const int GraphElementOpt_ARRAYSIZE =
    GraphDataType_GraphElementOpt_GraphElementOpt_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GraphElementOpt_descriptor() {
    return GraphDataType_GraphElementOpt_descriptor();
  }
  static inline const ::std::string& GraphElementOpt_Name(GraphElementOpt value) {
    return GraphDataType_GraphElementOpt_Name(value);
  }
  static inline bool GraphElementOpt_Parse(const ::std::string& name,
      GraphElementOpt* value) {
    return GraphDataType_GraphElementOpt_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .common.GraphDataType.GraphElementType graph_data_type = 2;
  int graph_data_type_size() const;
  void clear_graph_data_type();
  static const int kGraphDataTypeFieldNumber = 2;
  ::common::GraphDataType_GraphElementType* mutable_graph_data_type(int index);
  ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementType >*
      mutable_graph_data_type();
  const ::common::GraphDataType_GraphElementType& graph_data_type(int index) const;
  ::common::GraphDataType_GraphElementType* add_graph_data_type();
  const ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementType >&
      graph_data_type() const;

  // .common.GraphDataType.GraphElementOpt element_opt = 1;
  void clear_element_opt();
  static const int kElementOptFieldNumber = 1;
  ::common::GraphDataType_GraphElementOpt element_opt() const;
  void set_element_opt(::common::GraphDataType_GraphElementOpt value);

  // @@protoc_insertion_point(class_scope:common.GraphDataType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementType > graph_data_type_;
  int element_opt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_type_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrDataType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.IrDataType) */ {
 public:
  IrDataType();
  virtual ~IrDataType();

  IrDataType(const IrDataType& from);

  inline IrDataType& operator=(const IrDataType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrDataType(IrDataType&& from) noexcept
    : IrDataType() {
    *this = ::std::move(from);
  }

  inline IrDataType& operator=(IrDataType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrDataType& default_instance();

  enum TypeCase {
    kDataType = 1,
    kGraphType = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IrDataType* internal_default_instance() {
    return reinterpret_cast<const IrDataType*>(
               &_IrDataType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IrDataType* other);
  friend void swap(IrDataType& a, IrDataType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrDataType* New() const final {
    return CreateMaybeMessage<IrDataType>(NULL);
  }

  IrDataType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IrDataType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IrDataType& from);
  void MergeFrom(const IrDataType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrDataType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.DataType data_type = 1;
  private:
  bool has_data_type() const;
  public:
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::common::DataType data_type() const;
  void set_data_type(::common::DataType value);

  // .common.GraphDataType graph_type = 2;
  bool has_graph_type() const;
  void clear_graph_type();
  static const int kGraphTypeFieldNumber = 2;
  private:
  const ::common::GraphDataType& _internal_graph_type() const;
  public:
  const ::common::GraphDataType& graph_type() const;
  ::common::GraphDataType* release_graph_type();
  ::common::GraphDataType* mutable_graph_type();
  void set_allocated_graph_type(::common::GraphDataType* graph_type);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:common.IrDataType)
 private:
  void set_has_data_type();
  void set_has_graph_type();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    int data_type_;
    ::common::GraphDataType* graph_type_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_type_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphDataType_GraphElementLabel

// int32 label = 1;
inline void GraphDataType_GraphElementLabel::clear_label() {
  label_ = 0;
}
inline ::google::protobuf::int32 GraphDataType_GraphElementLabel::label() const {
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementLabel.label)
  return label_;
}
inline void GraphDataType_GraphElementLabel::set_label(::google::protobuf::int32 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:common.GraphDataType.GraphElementLabel.label)
}

// .google.protobuf.Int32Value src_label = 2;
inline bool GraphDataType_GraphElementLabel::has_src_label() const {
  return this != internal_default_instance() && src_label_ != NULL;
}
inline const ::google::protobuf::Int32Value& GraphDataType_GraphElementLabel::_internal_src_label() const {
  return *src_label_;
}
inline const ::google::protobuf::Int32Value& GraphDataType_GraphElementLabel::src_label() const {
  const ::google::protobuf::Int32Value* p = src_label_;
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementLabel.src_label)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int32Value*>(
      &::google::protobuf::_Int32Value_default_instance_);
}
inline ::google::protobuf::Int32Value* GraphDataType_GraphElementLabel::release_src_label() {
  // @@protoc_insertion_point(field_release:common.GraphDataType.GraphElementLabel.src_label)
  
  ::google::protobuf::Int32Value* temp = src_label_;
  src_label_ = NULL;
  return temp;
}
inline ::google::protobuf::Int32Value* GraphDataType_GraphElementLabel::mutable_src_label() {
  
  if (src_label_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int32Value>(GetArenaNoVirtual());
    src_label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.GraphDataType.GraphElementLabel.src_label)
  return src_label_;
}
inline void GraphDataType_GraphElementLabel::set_allocated_src_label(::google::protobuf::Int32Value* src_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(src_label_);
  }
  if (src_label) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(src_label)->GetArena();
    if (message_arena != submessage_arena) {
      src_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src_label, submessage_arena);
    }
    
  } else {
    
  }
  src_label_ = src_label;
  // @@protoc_insertion_point(field_set_allocated:common.GraphDataType.GraphElementLabel.src_label)
}

// .google.protobuf.Int32Value dst_label = 3;
inline bool GraphDataType_GraphElementLabel::has_dst_label() const {
  return this != internal_default_instance() && dst_label_ != NULL;
}
inline const ::google::protobuf::Int32Value& GraphDataType_GraphElementLabel::_internal_dst_label() const {
  return *dst_label_;
}
inline const ::google::protobuf::Int32Value& GraphDataType_GraphElementLabel::dst_label() const {
  const ::google::protobuf::Int32Value* p = dst_label_;
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementLabel.dst_label)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int32Value*>(
      &::google::protobuf::_Int32Value_default_instance_);
}
inline ::google::protobuf::Int32Value* GraphDataType_GraphElementLabel::release_dst_label() {
  // @@protoc_insertion_point(field_release:common.GraphDataType.GraphElementLabel.dst_label)
  
  ::google::protobuf::Int32Value* temp = dst_label_;
  dst_label_ = NULL;
  return temp;
}
inline ::google::protobuf::Int32Value* GraphDataType_GraphElementLabel::mutable_dst_label() {
  
  if (dst_label_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int32Value>(GetArenaNoVirtual());
    dst_label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.GraphDataType.GraphElementLabel.dst_label)
  return dst_label_;
}
inline void GraphDataType_GraphElementLabel::set_allocated_dst_label(::google::protobuf::Int32Value* dst_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dst_label_);
  }
  if (dst_label) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(dst_label)->GetArena();
    if (message_arena != submessage_arena) {
      dst_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst_label, submessage_arena);
    }
    
  } else {
    
  }
  dst_label_ = dst_label;
  // @@protoc_insertion_point(field_set_allocated:common.GraphDataType.GraphElementLabel.dst_label)
}

// -------------------------------------------------------------------

// GraphDataType_GraphElementTypeField

// .common.NameOrId prop_id = 1;
inline bool GraphDataType_GraphElementTypeField::has_prop_id() const {
  return this != internal_default_instance() && prop_id_ != NULL;
}
inline const ::common::NameOrId& GraphDataType_GraphElementTypeField::_internal_prop_id() const {
  return *prop_id_;
}
inline const ::common::NameOrId& GraphDataType_GraphElementTypeField::prop_id() const {
  const ::common::NameOrId* p = prop_id_;
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementTypeField.prop_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::NameOrId*>(
      &::common::_NameOrId_default_instance_);
}
inline ::common::NameOrId* GraphDataType_GraphElementTypeField::release_prop_id() {
  // @@protoc_insertion_point(field_release:common.GraphDataType.GraphElementTypeField.prop_id)
  
  ::common::NameOrId* temp = prop_id_;
  prop_id_ = NULL;
  return temp;
}
inline ::common::NameOrId* GraphDataType_GraphElementTypeField::mutable_prop_id() {
  
  if (prop_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::NameOrId>(GetArenaNoVirtual());
    prop_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.GraphDataType.GraphElementTypeField.prop_id)
  return prop_id_;
}
inline void GraphDataType_GraphElementTypeField::set_allocated_prop_id(::common::NameOrId* prop_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(prop_id_);
  }
  if (prop_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prop_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prop_id, submessage_arena);
    }
    
  } else {
    
  }
  prop_id_ = prop_id;
  // @@protoc_insertion_point(field_set_allocated:common.GraphDataType.GraphElementTypeField.prop_id)
}

// .common.DataType type = 2;
inline void GraphDataType_GraphElementTypeField::clear_type() {
  type_ = 0;
}
inline ::common::DataType GraphDataType_GraphElementTypeField::type() const {
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementTypeField.type)
  return static_cast< ::common::DataType >(type_);
}
inline void GraphDataType_GraphElementTypeField::set_type(::common::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:common.GraphDataType.GraphElementTypeField.type)
}

// -------------------------------------------------------------------

// GraphDataType_GraphElementType

// .common.GraphDataType.GraphElementLabel label = 1;
inline bool GraphDataType_GraphElementType::has_label() const {
  return this != internal_default_instance() && label_ != NULL;
}
inline void GraphDataType_GraphElementType::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
}
inline const ::common::GraphDataType_GraphElementLabel& GraphDataType_GraphElementType::_internal_label() const {
  return *label_;
}
inline const ::common::GraphDataType_GraphElementLabel& GraphDataType_GraphElementType::label() const {
  const ::common::GraphDataType_GraphElementLabel* p = label_;
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementType.label)
  return p != NULL ? *p : *reinterpret_cast<const ::common::GraphDataType_GraphElementLabel*>(
      &::common::_GraphDataType_GraphElementLabel_default_instance_);
}
inline ::common::GraphDataType_GraphElementLabel* GraphDataType_GraphElementType::release_label() {
  // @@protoc_insertion_point(field_release:common.GraphDataType.GraphElementType.label)
  
  ::common::GraphDataType_GraphElementLabel* temp = label_;
  label_ = NULL;
  return temp;
}
inline ::common::GraphDataType_GraphElementLabel* GraphDataType_GraphElementType::mutable_label() {
  
  if (label_ == NULL) {
    auto* p = CreateMaybeMessage<::common::GraphDataType_GraphElementLabel>(GetArenaNoVirtual());
    label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.GraphDataType.GraphElementType.label)
  return label_;
}
inline void GraphDataType_GraphElementType::set_allocated_label(::common::GraphDataType_GraphElementLabel* label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_;
  }
  if (label) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:common.GraphDataType.GraphElementType.label)
}

// repeated .common.GraphDataType.GraphElementTypeField props = 2;
inline int GraphDataType_GraphElementType::props_size() const {
  return props_.size();
}
inline void GraphDataType_GraphElementType::clear_props() {
  props_.Clear();
}
inline ::common::GraphDataType_GraphElementTypeField* GraphDataType_GraphElementType::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:common.GraphDataType.GraphElementType.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementTypeField >*
GraphDataType_GraphElementType::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:common.GraphDataType.GraphElementType.props)
  return &props_;
}
inline const ::common::GraphDataType_GraphElementTypeField& GraphDataType_GraphElementType::props(int index) const {
  // @@protoc_insertion_point(field_get:common.GraphDataType.GraphElementType.props)
  return props_.Get(index);
}
inline ::common::GraphDataType_GraphElementTypeField* GraphDataType_GraphElementType::add_props() {
  // @@protoc_insertion_point(field_add:common.GraphDataType.GraphElementType.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementTypeField >&
GraphDataType_GraphElementType::props() const {
  // @@protoc_insertion_point(field_list:common.GraphDataType.GraphElementType.props)
  return props_;
}

// -------------------------------------------------------------------

// GraphDataType

// .common.GraphDataType.GraphElementOpt element_opt = 1;
inline void GraphDataType::clear_element_opt() {
  element_opt_ = 0;
}
inline ::common::GraphDataType_GraphElementOpt GraphDataType::element_opt() const {
  // @@protoc_insertion_point(field_get:common.GraphDataType.element_opt)
  return static_cast< ::common::GraphDataType_GraphElementOpt >(element_opt_);
}
inline void GraphDataType::set_element_opt(::common::GraphDataType_GraphElementOpt value) {
  
  element_opt_ = value;
  // @@protoc_insertion_point(field_set:common.GraphDataType.element_opt)
}

// repeated .common.GraphDataType.GraphElementType graph_data_type = 2;
inline int GraphDataType::graph_data_type_size() const {
  return graph_data_type_.size();
}
inline void GraphDataType::clear_graph_data_type() {
  graph_data_type_.Clear();
}
inline ::common::GraphDataType_GraphElementType* GraphDataType::mutable_graph_data_type(int index) {
  // @@protoc_insertion_point(field_mutable:common.GraphDataType.graph_data_type)
  return graph_data_type_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementType >*
GraphDataType::mutable_graph_data_type() {
  // @@protoc_insertion_point(field_mutable_list:common.GraphDataType.graph_data_type)
  return &graph_data_type_;
}
inline const ::common::GraphDataType_GraphElementType& GraphDataType::graph_data_type(int index) const {
  // @@protoc_insertion_point(field_get:common.GraphDataType.graph_data_type)
  return graph_data_type_.Get(index);
}
inline ::common::GraphDataType_GraphElementType* GraphDataType::add_graph_data_type() {
  // @@protoc_insertion_point(field_add:common.GraphDataType.graph_data_type)
  return graph_data_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::GraphDataType_GraphElementType >&
GraphDataType::graph_data_type() const {
  // @@protoc_insertion_point(field_list:common.GraphDataType.graph_data_type)
  return graph_data_type_;
}

// -------------------------------------------------------------------

// IrDataType

// .common.DataType data_type = 1;
inline bool IrDataType::has_data_type() const {
  return type_case() == kDataType;
}
inline void IrDataType::set_has_data_type() {
  _oneof_case_[0] = kDataType;
}
inline void IrDataType::clear_data_type() {
  if (has_data_type()) {
    type_.data_type_ = 0;
    clear_has_type();
  }
}
inline ::common::DataType IrDataType::data_type() const {
  // @@protoc_insertion_point(field_get:common.IrDataType.data_type)
  if (has_data_type()) {
    return static_cast< ::common::DataType >(type_.data_type_);
  }
  return static_cast< ::common::DataType >(0);
}
inline void IrDataType::set_data_type(::common::DataType value) {
  if (!has_data_type()) {
    clear_type();
    set_has_data_type();
  }
  type_.data_type_ = value;
  // @@protoc_insertion_point(field_set:common.IrDataType.data_type)
}

// .common.GraphDataType graph_type = 2;
inline bool IrDataType::has_graph_type() const {
  return type_case() == kGraphType;
}
inline void IrDataType::set_has_graph_type() {
  _oneof_case_[0] = kGraphType;
}
inline void IrDataType::clear_graph_type() {
  if (has_graph_type()) {
    delete type_.graph_type_;
    clear_has_type();
  }
}
inline const ::common::GraphDataType& IrDataType::_internal_graph_type() const {
  return *type_.graph_type_;
}
inline ::common::GraphDataType* IrDataType::release_graph_type() {
  // @@protoc_insertion_point(field_release:common.IrDataType.graph_type)
  if (has_graph_type()) {
    clear_has_type();
      ::common::GraphDataType* temp = type_.graph_type_;
    type_.graph_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::common::GraphDataType& IrDataType::graph_type() const {
  // @@protoc_insertion_point(field_get:common.IrDataType.graph_type)
  return has_graph_type()
      ? *type_.graph_type_
      : *reinterpret_cast< ::common::GraphDataType*>(&::common::_GraphDataType_default_instance_);
}
inline ::common::GraphDataType* IrDataType::mutable_graph_type() {
  if (!has_graph_type()) {
    clear_type();
    set_has_graph_type();
    type_.graph_type_ = CreateMaybeMessage< ::common::GraphDataType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:common.IrDataType.graph_type)
  return type_.graph_type_;
}

inline bool IrDataType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void IrDataType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline IrDataType::TypeCase IrDataType::type_case() const {
  return IrDataType::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::GraphDataType_GraphElementOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::GraphDataType_GraphElementOpt>() {
  return ::common::GraphDataType_GraphElementOpt_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_type_2eproto
